
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00006000  00006094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000d2  008000d2  00006106  2**0
                  ALLOC
  3 .stab         00007698  00000000  00000000  00006108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000321a  00000000  00000000  0000d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000109ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00010b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00010ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00012cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00013def  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00014d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00014ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000151b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_1>
       8:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__vector_2>
       c:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_6>
      1c:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_7>
      20:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_8>
      24:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_9>
      28:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__vector_10>
      2c:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <main>
      8a:	0c 94 fe 2f 	jmp	0x5ffc	; 0x5ffc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af eb       	ldi	r26, 0xBF	; 191
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f eb       	ldi	r24, 0xBF	; 191
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 2f 	jmp	0x5f8c	; 0x5f8c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f eb       	ldi	r22, 0xBF	; 191
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e2 2f 	jmp	0x5fc4	; 0x5fc4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ea 2f 	jmp	0x5fd4	; 0x5fd4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_Init>:
#include "USART.h"



ES_t USART_Init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_Init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <USART_Init+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	ES_t Loc_Init_Status = NO_Error ;
     caa:	1c 82       	std	Y+4, r1	; 0x04

	#if Speed_Mode == Normal_Speed
	UCSRA &=~ (1<<U2X) ;
     cac:	ab e2       	ldi	r26, 0x2B	; 43
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	8c 93       	st	X, r24
	#elif  Speed_Mode == Double_Speed
	UCSRA |= (1<<U2X) ;
	#endif

	#if	UART_MODE == Transciever
	 SET_BIT(UCSRB,TXEN);
     cba:	aa e2       	ldi	r26, 0x2A	; 42
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e2       	ldi	r30, 0x2A	; 42
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24
	 SET_BIT(UCSRB,RXEN);
     cc8:	aa e2       	ldi	r26, 0x2A	; 42
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e2       	ldi	r30, 0x2A	; 42
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 61       	ori	r24, 0x10	; 16
     cd4:	8c 93       	st	X, r24
	#endif
	
	uint8_t Loc_u8UCSRC = 0 ; // UCSRC can not use bit access so i made variable to bit access intreed of register
     cd6:	1b 82       	std	Y+3, r1	; 0x03
	
	#if UART_Clock == Asynchronous
	Loc_u8UCSRC &=~ (1<<6) ; 
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	#if Data_Len == Eight
	Loc_u8UCSRC |= (3<<1);
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	86 60       	ori	r24, 0x06	; 6
     ce2:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	#if Parity_State == NO_parity 
	Loc_u8UCSRC &=~ (3<<4);
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	8f 7c       	andi	r24, 0xCF	; 207
     ce8:	8b 83       	std	Y+3, r24	; 0x03
	#endif
	
	#if STOP_State == One_Bit
	Loc_u8UCSRC &=~ (1<<3);
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	87 7f       	andi	r24, 0xF7	; 247
     cee:	8b 83       	std	Y+3, r24	; 0x03
	#endif

	Loc_u8UCSRC |= (1<<7) ;  	// Select Regester UCsrc by write one in bit 7 or UBRRH 0 
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Loc_u8UCSRC ; 
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	80 83       	st	Z, r24
	
 	uint16_t Loc_u16UBRR = MYUBRR(BAUD);
     cfe:	8c e0       	ldi	r24, 0x0C	; 12
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
 	Loc_u16UBRR &=~ (1<<15);	// Select Regester UCsrc by write one in bit 7 or UBRRH 0 
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	9f 77       	andi	r25, 0x7F	; 127
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
 	UBRRL = (uint8_t) Loc_u16UBRR ;
     d10:	e9 e2       	ldi	r30, 0x29	; 41
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	80 83       	st	Z, r24
 	UBRRH |= (uint8_t) (Loc_u16UBRR>>8) ;
     d18:	a0 e4       	ldi	r26, 0x40	; 64
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e0 e4       	ldi	r30, 0x40	; 64
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	20 81       	ld	r18, Z
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	89 2f       	mov	r24, r25
     d28:	99 27       	eor	r25, r25
     d2a:	82 2b       	or	r24, r18
     d2c:	8c 93       	st	X, r24
	 
	return Loc_Init_Status ; 
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <USART_Send_Char>:

ES_t USART_Send_Char(uint8_t Data )
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <USART_Send_Char+0x6>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_TX_Status = NO_Error ;
     d4a:	19 82       	std	Y+1, r1	; 0x01
		while(!(UCSRA&(1<<UDRE)) );
     d4c:	eb e2       	ldi	r30, 0x2B	; 43
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	80 72       	andi	r24, 0x20	; 32
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	b9 f3       	breq	.-18     	; 0xd4c <USART_Send_Char+0xe>
		UDR = Data ; 
     d5e:	ec e2       	ldi	r30, 0x2C	; 44
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	80 83       	st	Z, r24
	return Loc_TX_Status ; 
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <USART_Recieve_Char>:
ES_t USART_Recieve_Char( uint8_t* Data )
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <USART_Recieve_Char+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_RX_Status = NO_Error ;
     d82:	19 82       	std	Y+1, r1	; 0x01
	if(Data==NULL)
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	19 f4       	brne	.+6      	; 0xd92 <USART_Recieve_Char+0x20>
	{
		Loc_RX_Status = Error ; 
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <USART_Recieve_Char+0x36>
	}
	else
	{
		while(!( (UCSRA>>RXC) & 1) );
     d92:	eb e2       	ldi	r30, 0x2B	; 43
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	dc f7       	brge	.-10     	; 0xd92 <USART_Recieve_Char+0x20>
		*Data = UDR ;
     d9c:	ec e2       	ldi	r30, 0x2C	; 44
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	80 83       	st	Z, r24
	}
	return Loc_RX_Status ; 
     da8:	89 81       	ldd	r24, Y+1	; 0x01
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <USAERT_Send_STRING>:
ES_t USAERT_Send_STRING(uint8_t* String)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <USAERT_Send_STRING+0x6>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_TX_String_Status = NO_Error ;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	if(String==NULL)
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f4       	brne	.+26     	; 0xdea <USAERT_Send_STRING+0x34>
	{
		Loc_TX_String_Status = Error ; 
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <USAERT_Send_STRING+0x3e>
	}
	else
	{
		while (*String != '\0')
		{
			USART_Send_Char(*String);
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <USART_Send_Char>
			String++ ;
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 83       	std	Y+2, r24	; 0x02
	{
		Loc_TX_String_Status = Error ; 
	}
	else
	{
		while (*String != '\0')
     dea:	ea 81       	ldd	r30, Y+2	; 0x02
     dec:	fb 81       	ldd	r31, Y+3	; 0x03
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	89 f7       	brne	.-30     	; 0xdd6 <USAERT_Send_STRING+0x20>
		{
			USART_Send_Char(*String);
			String++ ;
		}
	}
	return Loc_TX_String_Status ; 
     df4:	89 81       	ldd	r24, Y+1	; 0x01
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <USAERT_Recieve_STRING>:
ES_t USAERT_Recieve_STRING(uint8_t* String)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <USAERT_Recieve_STRING+0x6>
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	9b 83       	std	Y+3, r25	; 0x03
     e10:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_RX_STRING_Status = NO_Error ;
     e12:	19 82       	std	Y+1, r1	; 0x01
	if(String==NULL)
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	11 f4       	brne	.+4      	; 0xe20 <USAERT_Recieve_STRING+0x1e>
	{
		Loc_RX_STRING_Status = Error ; 
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
	}
	while (1)
	{
		USART_Recieve_Char(String);
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	0e 94 b9 06 	call	0xd72	; 0xd72 <USART_Recieve_Char>
		if(*String == '\r' || *String == '\n')
     e28:	ea 81       	ldd	r30, Y+2	; 0x02
     e2a:	fb 81       	ldd	r31, Y+3	; 0x03
     e2c:	80 81       	ld	r24, Z
     e2e:	8d 30       	cpi	r24, 0x0D	; 13
     e30:	29 f0       	breq	.+10     	; 0xe3c <USAERT_Recieve_STRING+0x3a>
     e32:	ea 81       	ldd	r30, Y+2	; 0x02
     e34:	fb 81       	ldd	r31, Y+3	; 0x03
     e36:	80 81       	ld	r24, Z
     e38:	8a 30       	cpi	r24, 0x0A	; 10
     e3a:	51 f4       	brne	.+20     	; 0xe50 <USAERT_Recieve_STRING+0x4e>
		{
			*String = '\0' ; 
     e3c:	ea 81       	ldd	r30, Y+2	; 0x02
     e3e:	fb 81       	ldd	r31, Y+3	; 0x03
     e40:	10 82       	st	Z, r1
			break;
		}
		String++;
	}
	return Loc_RX_STRING_Status ; 
     e42:	89 81       	ldd	r24, Y+1	; 0x01
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret
		if(*String == '\r' || *String == '\n')
		{
			*String = '\0' ; 
			break;
		}
		String++;
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	e2 cf       	rjmp	.-60     	; 0xe20 <USAERT_Recieve_STRING+0x1e>

00000e5c <Timer1_voidInit>:
/************************************************************************************/
/*						PUBLIC FUNCTIONS IMPLEMENTATION								*/
/************************************************************************************/

void Timer1_voidInit(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TCCR1B , WGM12);
		CLEAR_BIT(TCCR1A , WGM11);
		CLEAR_BIT(TCCR1A , WGM10);

		#elif MODE == FAST_PWM_ICR1
		SET_BIT(TCCR1B , WGM13);
     e64:	ae e4       	ldi	r26, 0x4E	; 78
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ee e4       	ldi	r30, 0x4E	; 78
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , WGM12);
     e72:	ae e4       	ldi	r26, 0x4E	; 78
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ee e4       	ldi	r30, 0x4E	; 78
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 60       	ori	r24, 0x08	; 8
     e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A , WGM11);
     e80:	af e4       	ldi	r26, 0x4F	; 79
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ef e4       	ldi	r30, 0x4F	; 79
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A , WGM10);
     e8e:	af e4       	ldi	r26, 0x4F	; 79
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ef e4       	ldi	r30, 0x4F	; 79
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A , COM1A0);
			#elif OC1A_FAST_PWM == TOGGLE_OC1A
			CLEAR_BIT(TCCR1A , COM1A1);
			SET_BIT(TCCR1A , COM1A0);
			#elif OC1A_FAST_PWM == NON_INVERTED_OC1A
			SET_BIT(TCCR1A , COM1A1);
     e9c:	af e4       	ldi	r26, 0x4F	; 79
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ef e4       	ldi	r30, 0x4F	; 79
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 68       	ori	r24, 0x80	; 128
     ea8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A , COM1A0);
     eaa:	af e4       	ldi	r26, 0x4F	; 79
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ef e4       	ldi	r30, 0x4F	; 79
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A , COM1B0);
			#elif OC1B_FAST_PWM == TOGGLE_OC1B
			CLEAR_BIT(TCCR1A , COM1B1);
			SET_BIT(TCCR1A , COM1B0);
			#elif OC1B_FAST_PWM == NON_INVERTED_OC1B
			SET_BIT(TCCR1A , COM1B1);
     eb8:	af e4       	ldi	r26, 0x4F	; 79
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ef e4       	ldi	r30, 0x4F	; 79
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 62       	ori	r24, 0x20	; 32
     ec4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A , COM1B0);
     ec6:	af e4       	ldi	r26, 0x4F	; 79
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ef e4       	ldi	r30, 0x4F	; 79
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7e       	andi	r24, 0xEF	; 239
     ed2:	8c 93       	st	X, r24
			#else
			#error "Incorrect output compare pin (OC1B) behavior in case of phase correct or phase and frequency correct PWM modes"
			#endif
			#endif
		/* To ensure compatibility with future devices */
		CLEAR_BIT(TCCR1A , FOC1A);
     ed4:	af e4       	ldi	r26, 0x4F	; 79
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e4       	ldi	r30, 0x4F	; 79
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	87 7f       	andi	r24, 0xF7	; 247
     ee0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A , FOC1B);
     ee2:	af e4       	ldi	r26, 0x4F	; 79
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ef e4       	ldi	r30, 0x4F	; 79
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8b 7f       	andi	r24, 0xFB	; 251
     eee:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B , BIT5);
     ef0:	ae e4       	ldi	r26, 0x4E	; 78
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e4       	ldi	r30, 0x4E	; 78
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7d       	andi	r24, 0xDF	; 223
     efc:	8c 93       	st	X, r24
		#elif CLOCK_SELECT == NO_PRESCALER
		CLEAR_BIT(TCCR1B , CS12);
		CLEAR_BIT(TCCR1B , CS11);
		SET_BIT(TCCR1B , CS10);
		#elif CLOCK_SELECT == PRESCALER_8
		CLEAR_BIT(TCCR1B , CS12);
     efe:	ae e4       	ldi	r26, 0x4E	; 78
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ee e4       	ldi	r30, 0x4E	; 78
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , CS11);
     f0c:	ae e4       	ldi	r26, 0x4E	; 78
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ee e4       	ldi	r30, 0x4E	; 78
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	82 60       	ori	r24, 0x02	; 2
     f18:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B , CS10);
     f1a:	ae e4       	ldi	r26, 0x4E	; 78
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ee e4       	ldi	r30, 0x4E	; 78
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8e 7f       	andi	r24, 0xFE	; 254
     f26:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , CS11);
		SET_BIT(TCCR1B , CS10);
		#else
		#error "Incorrect clock selection"
		#endif	
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <PWM_Init>:

void PWM_Init()
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	Timer1 FastPwm Mode ICR TOP 
	Pres8 
	OCRA Non Inverting 
	OCRB Disconnected 
*/
	Timer1_voidInit();
     f36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <Timer1_voidInit>
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <PWM_Freq_KHz>:
void PWM_Freq_KHz(uint16_t Freq) 
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <PWM_Freq_KHz+0x6>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <PWM_Freq_KHz+0x8>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
	if (Freq==0)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	d1 f0       	breq	.+52     	; 0xf8c <PWM_Freq_KHz+0x4c>
	{
		;
	}
	else
	{
		uint16_t Ttotal =  1000/Freq ; 
     f58:	88 ee       	ldi	r24, 0xE8	; 232
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	2b 81       	ldd	r18, Y+3	; 0x03
     f5e:	3c 81       	ldd	r19, Y+4	; 0x04
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__udivmodhi4>
     f66:	cb 01       	movw	r24, r22
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	41 f0       	breq	.+16     	; 0xf84 <PWM_Freq_KHz+0x44>
		{
			ICR1 = Ttotal-1 ; 
     f74:	e6 e4       	ldi	r30, 0x46	; 70
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <PWM_Freq_KHz+0x4c>
		}
		else 
		{
			ICR1 = 0 ; 
     f84:	e6 e4       	ldi	r30, 0x46	; 70
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	11 82       	std	Z+1, r1	; 0x01
     f8a:	10 82       	st	Z, r1
		}
	}
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <PWM_Freq_Hz>:
void PWM_Freq_Hz(uint16_t Freq) 
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <PWM_Freq_Hz+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <PWM_Freq_Hz+0x8>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
	if (Freq==0)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	09 f1       	breq	.+66     	; 0xff4 <PWM_Freq_Hz+0x5a>
	{
		;
	}
	else
	{
		uint16_t Ttotal =  (uint32_t)1000000/Freq ;
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	9c 01       	movw	r18, r24
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	80 e4       	ldi	r24, 0x40	; 64
     fbe:	92 e4       	ldi	r25, 0x42	; 66
     fc0:	af e0       	ldi	r26, 0x0F	; 15
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
     fcc:	da 01       	movw	r26, r20
     fce:	c9 01       	movw	r24, r18
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	41 f0       	breq	.+16     	; 0xfec <PWM_Freq_Hz+0x52>
		{
			ICR1 = Ttotal-1 ;
     fdc:	e6 e4       	ldi	r30, 0x46	; 70
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <PWM_Freq_Hz+0x5a>
		}
		else
		{
			ICR1 = 0 ;
     fec:	e6 e4       	ldi	r30, 0x46	; 70
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	11 82       	std	Z+1, r1	; 0x01
     ff2:	10 82       	st	Z, r1
		}
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <PWM_Duty_OCR1A>:
void PWM_Duty_OCR1A(uint8_t Duty)
{
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <PWM_Duty_OCR1A+0xe>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8b 83       	std	Y+3, r24	; 0x03
	if (Duty<=100)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	85 36       	cpi	r24, 0x65	; 101
    101c:	80 f5       	brcc	.+96     	; 0x107e <PWM_Duty_OCR1A+0x7c>
	{
		uint16_t Ton = (uint32_t)Duty*(ICR1+1)/100 ;
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	e8 2e       	mov	r14, r24
    1022:	ff 24       	eor	r15, r15
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	e6 e4       	ldi	r30, 0x46	; 70
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9c 01       	movw	r18, r24
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	c8 01       	movw	r24, r16
    103a:	b7 01       	movw	r22, r14
    103c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	24 e6       	ldi	r18, 0x64	; 100
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    1054:	da 01       	movw	r26, r20
    1056:	c9 01       	movw	r24, r18
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (Ton>1)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	91 05       	cpc	r25, r1
    1064:	40 f0       	brcs	.+16     	; 0x1076 <PWM_Duty_OCR1A+0x74>
		{
			OCR1A = Ton-1 ;  
    1066:	ea e4       	ldi	r30, 0x4A	; 74
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	04 c0       	rjmp	.+8      	; 0x107e <PWM_Duty_OCR1A+0x7c>
		}
		else
		{
			OCR1A = 0 ; 
    1076:	ea e4       	ldi	r30, 0x4A	; 74
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	11 82       	std	Z+1, r1	; 0x01
    107c:	10 82       	st	Z, r1
		}
		 
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <PWM_Duty_OCR1B>:

void PWM_Duty_OCR1B(uint8_t Duty)
{
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <PWM_Duty_OCR1B+0xe>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	8b 83       	std	Y+3, r24	; 0x03
	if (Duty<=100)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	85 36       	cpi	r24, 0x65	; 101
    10ac:	80 f5       	brcc	.+96     	; 0x110e <PWM_Duty_OCR1B+0x7c>
	{
		uint16_t Ton = (uint32_t)Duty*(ICR1+1)/100 ;
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	e8 2e       	mov	r14, r24
    10b2:	ff 24       	eor	r15, r15
    10b4:	00 e0       	ldi	r16, 0x00	; 0
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	e6 e4       	ldi	r30, 0x46	; 70
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	9c 01       	movw	r18, r24
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	24 e6       	ldi	r18, 0x64	; 100
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    10e4:	da 01       	movw	r26, r20
    10e6:	c9 01       	movw	r24, r18
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
		if (Ton>1)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <PWM_Duty_OCR1B+0x74>
		{
			OCR1B = Ton-1 ;
    10f6:	e8 e4       	ldi	r30, 0x48	; 72
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	04 c0       	rjmp	.+8      	; 0x110e <PWM_Duty_OCR1B+0x7c>
		}
		else
		{
			OCR1B = 0 ;
    1106:	e8 e4       	ldi	r30, 0x48	; 72
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	11 82       	std	Z+1, r1	; 0x01
    110c:	10 82       	st	Z, r1
		}

	}
	
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	08 95       	ret

00001122 <Timer1_voidPreload>:

void Timer1_voidPreload(uint16_t LOC_U16Value)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <Timer1_voidPreload+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = LOC_U16Value;
    1130:	ec e4       	ldi	r30, 0x4C	; 76
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <Timer1_voidSetCounterTOP>:
void Timer1_voidSetCounterTOP(uint16_t LOC_U16Value)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <Timer1_voidSetCounterTOP+0x6>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value >= MINIMUM_RESOLUTION)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	30 f0       	brcs	.+12     	; 0x116a <Timer1_voidSetCounterTOP+0x24>
		#if MODE == CTC_OCR1A || MODE == FAST_PWM_OCR1A || MODE == PHASE_CORRECT_OCR1A \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A
		OCR1A  = LOC_U16Value;
		#elif MODE == CTC_ICR1 || MODE == FAST_PWM_ICR1 || MODE == PHASE_CORRECT_ICR1 \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_ICR1
		ICR1  = LOC_U16Value;
    115e:	e6 e4       	ldi	r30, 0x46	; 70
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
		/* Trying to set TOP value while using a fixed-TOP mode. */
		#else
		#error "Invalid mode of operation for timer1"
		#endif
	}
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <Timer1_voidSetOCACompareValue>:
void Timer1_voidSetOCACompareValue(uint16_t LOC_U16Value)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <Timer1_voidSetOCACompareValue+0x6>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	#if MODE == CTC_OCR1A || MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A || MODE == \
	PHASE_CORRECT_OCR1A
	/* Trying to set the OCR1A value as a compare value while using OCR1A as a TOP */
	#else
	OCR1A  = LOC_U16Value;
    1182:	ea e4       	ldi	r30, 0x4A	; 74
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
	#endif
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <Timer1_voidSetOCBCompareValue>:

void Timer1_voidSetOCBCompareValue(uint16_t LOC_U16Value)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <Timer1_voidSetOCBCompareValue+0x6>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B  = LOC_U16Value;
    11a6:	e8 e4       	ldi	r30, 0x48	; 72
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer1_voidOC1ASetDutyCycle>:
void Timer1_voidOC1ASetDutyCycle(uint8_t LOC_voidDutyCycle,uint16_t LOC_U16Top)
{
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <Timer1_voidOC1ASetDutyCycle+0xe>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	7b 83       	std	Y+3, r23	; 0x03
    11d4:	6a 83       	std	Y+2, r22	; 0x02
	if (LOC_voidDutyCycle >= MINIMUM_DUTYCYCLE && LOC_voidDutyCycle <= MAXIMUM_DUTYCYCLE && LOC_U16Top >= MINIMUM_RESOLUTION)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	85 36       	cpi	r24, 0x65	; 101
    11da:	28 f5       	brcc	.+74     	; 0x1226 <Timer1_voidOC1ASetDutyCycle+0x6a>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	00 f1       	brcs	.+64     	; 0x1226 <Timer1_voidOC1ASetDutyCycle+0x6a>
	{
		Timer1_voidSetCounterTOP(LOC_U16Top);
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ea:	0e 94 a3 08 	call	0x1146	; 0x1146 <Timer1_voidSetCounterTOP>
		Timer1_voidSetOCACompareValue( ( (uint32_t)LOC_voidDutyCycle  *  LOC_U16Top  ) / 100 );
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	e8 2e       	mov	r14, r24
    11f2:	ff 24       	eor	r15, r15
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	9c 01       	movw	r18, r24
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	c8 01       	movw	r24, r16
    1204:	b7 01       	movw	r22, r14
    1206:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	24 e6       	ldi	r18, 0x64	; 100
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    121e:	da 01       	movw	r26, r20
    1220:	c9 01       	movw	r24, r18
    1222:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_voidSetOCACompareValue>
	}

}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <Timer1_voidOC1BSetDutyCycle>:

void Timer1_voidOC1BSetDutyCycle(uint8_t LOC_voidDutyCycle, uint16_t LOC_U16Top)
{
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <Timer1_voidOC1BSetDutyCycle+0xe>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	7b 83       	std	Y+3, r23	; 0x03
    1252:	6a 83       	std	Y+2, r22	; 0x02
	if (LOC_voidDutyCycle <= MAXIMUM_DUTYCYCLE && LOC_U16Top >= MINIMUM_RESOLUTION)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	85 36       	cpi	r24, 0x65	; 101
    1258:	28 f5       	brcc	.+74     	; 0x12a4 <Timer1_voidOC1BSetDutyCycle+0x6a>
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	00 f1       	brcs	.+64     	; 0x12a4 <Timer1_voidOC1BSetDutyCycle+0x6a>
	{
		Timer1_voidSetCounterTOP(LOC_U16Top);
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	0e 94 a3 08 	call	0x1146	; 0x1146 <Timer1_voidSetCounterTOP>
		Timer1_voidSetOCBCompareValue( ( (uint32_t)LOC_voidDutyCycle  *  LOC_U16Top  ) / 100 );
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	e8 2e       	mov	r14, r24
    1270:	ff 24       	eor	r15, r15
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	9c 01       	movw	r18, r24
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	c8 01       	movw	r24, r16
    1282:	b7 01       	movw	r22, r14
    1284:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	24 e6       	ldi	r18, 0x64	; 100
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    129c:	da 01       	movw	r26, r20
    129e:	c9 01       	movw	r24, r18
    12a0:	0e 94 cc 08 	call	0x1198	; 0x1198 <Timer1_voidSetOCBCompareValue>
	}
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <Timer1_voidGetCounterValue>:
void Timer1_voidGetCounterValue(uint16_t* LOC_U16Value)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <Timer1_voidGetCounterValue+0x6>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	41 f0       	breq	.+16     	; 0x12de <Timer1_voidGetCounterValue+0x26>
	{
		*LOC_U16Value = TCNT1;
    12ce:	ec e4       	ldi	r30, 0x4C	; 76
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	e9 81       	ldd	r30, Y+1	; 0x01
    12d8:	fa 81       	ldd	r31, Y+2	; 0x02
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
	}
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <Timer1_voidEnableNoiseCanceler>:

void Timer1_voidEnableNoiseCanceler(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, ICNC1);
    12f0:	ae e4       	ldi	r26, 0x4E	; 78
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ee e4       	ldi	r30, 0x4E	; 78
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24
}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <Timer1_voidDisableNoiseCanceler>:

void Timer1_voidDisableNoiseCanceler(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B, ICNC1);
    130c:	ae e4       	ldi	r26, 0x4E	; 78
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ee e4       	ldi	r30, 0x4E	; 78
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 77       	andi	r24, 0x7F	; 127
    1318:	8c 93       	st	X, r24
	
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <Timer1_voidICEdgeSelect>:

void Timer1_voidICEdgeSelect(uint8_t LOC_voidEdge)

{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <Timer1_voidICEdgeSelect+0x6>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_voidEdge)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3b 83       	std	Y+3, r19	; 0x03
    1336:	2a 83       	std	Y+2, r18	; 0x02
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	31 f0       	breq	.+12     	; 0x134c <Timer1_voidICEdgeSelect+0x2c>
    1340:	2a 81       	ldd	r18, Y+2	; 0x02
    1342:	3b 81       	ldd	r19, Y+3	; 0x03
    1344:	21 30       	cpi	r18, 0x01	; 1
    1346:	31 05       	cpc	r19, r1
    1348:	49 f0       	breq	.+18     	; 0x135c <Timer1_voidICEdgeSelect+0x3c>
    134a:	0f c0       	rjmp	.+30     	; 0x136a <Timer1_voidICEdgeSelect+0x4a>
	{
		case _FALLING_EDGE:
			CLEAR_BIT(TCCR1B, ICES1);
    134c:	ae e4       	ldi	r26, 0x4E	; 78
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ee e4       	ldi	r30, 0x4E	; 78
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 7b       	andi	r24, 0xBF	; 191
    1358:	8c 93       	st	X, r24
    135a:	07 c0       	rjmp	.+14     	; 0x136a <Timer1_voidICEdgeSelect+0x4a>
			break;
		case _RISING_EDGE:
			SET_BIT(TCCR1B , ICES1);
    135c:	ae e4       	ldi	r26, 0x4E	; 78
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ee e4       	ldi	r30, 0x4E	; 78
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 64       	ori	r24, 0x40	; 64
    1368:	8c 93       	st	X, r24
			break;
		default:break;
	}
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <Timer1_voidGetCapturedValue>:

void Timer1_voidGetCapturedValue(uint16_t* LOC_U16Value)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <Timer1_voidGetCapturedValue+0x6>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	41 f0       	breq	.+16     	; 0x139c <Timer1_voidGetCapturedValue+0x26>
	{

		*LOC_U16Value = ICR1 ;
    138c:	e6 e4       	ldi	r30, 0x46	; 70
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Timer1_PWM_Freq_KHz>:

void Timer1_PWM_Freq_KHz(uint16_t Freq ) 
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Timer1_PWM_Freq_KHz+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <Timer1_PWM_Freq_KHz+0x8>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
	if (Freq==0)
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <Timer1_PWM_Freq_KHz+0x4c>
	{
		;
	}
	else
	{
		uint16_t Ttotal = F_CPU/1000/Freq ; 
    13be:	80 e4       	ldi	r24, 0x40	; 64
    13c0:	9f e1       	ldi	r25, 0x1F	; 31
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	b9 01       	movw	r22, r18
    13c8:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__udivmodhi4>
    13cc:	cb 01       	movw	r24, r22
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	41 f0       	breq	.+16     	; 0x13ea <Timer1_PWM_Freq_KHz+0x44>
		{
			ICR1 = Ttotal-1 ; 
    13da:	e6 e4       	ldi	r30, 0x46	; 70
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <Timer1_PWM_Freq_KHz+0x4c>
		}
		else ICR1 = 0 ; 
    13ea:	e6 e4       	ldi	r30, 0x46	; 70
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	11 82       	std	Z+1, r1	; 0x01
    13f0:	10 82       	st	Z, r1
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <Timer1_PWM_Freq_Hz>:
void Timer1_PWM_Freq_Hz(uint16_t Freq )
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <Timer1_PWM_Freq_Hz+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <Timer1_PWM_Freq_Hz+0x8>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
	if (Freq==0)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	09 f1       	breq	.+66     	; 0x145a <Timer1_PWM_Freq_Hz+0x5a>
	{
		;
	}
	else
	{
		uint16_t Ttotal = F_CPU/Freq ;
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	9c 01       	movw	r18, r24
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	92 e1       	ldi	r25, 0x12	; 18
    1426:	aa e7       	ldi	r26, 0x7A	; 122
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    1432:	da 01       	movw	r26, r20
    1434:	c9 01       	movw	r24, r18
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	41 f0       	breq	.+16     	; 0x1452 <Timer1_PWM_Freq_Hz+0x52>
		{
			ICR1 = Ttotal-1 ;
    1442:	e6 e4       	ldi	r30, 0x46	; 70
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	04 c0       	rjmp	.+8      	; 0x145a <Timer1_PWM_Freq_Hz+0x5a>
		}
		else ICR1 = 0 ;
    1452:	e6 e4       	ldi	r30, 0x46	; 70
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	11 82       	std	Z+1, r1	; 0x01
    1458:	10 82       	st	Z, r1
	}
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <Timer1_PWM_Duty>:
void Timer1_PWM_Duty(uint8_t duty)
{
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <Timer1_PWM_Duty+0xe>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	8b 83       	std	Y+3, r24	; 0x03
	if (duty<=100)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	85 36       	cpi	r24, 0x65	; 101
    1482:	80 f5       	brcc	.+96     	; 0x14e4 <Timer1_PWM_Duty+0x7c>
	{
		uint16_t Ton = ((uint32_t)duty*(ICR1+1))/100 ; 
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	e8 2e       	mov	r14, r24
    1488:	ff 24       	eor	r15, r15
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	e6 e4       	ldi	r30, 0x46	; 70
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	9c 01       	movw	r18, r24
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	c8 01       	movw	r24, r16
    14a0:	b7 01       	movw	r22, r14
    14a2:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	24 e6       	ldi	r18, 0x64	; 100
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    14ba:	da 01       	movw	r26, r20
    14bc:	c9 01       	movw	r24, r18
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
		if (Ton>1)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	9a 81       	ldd	r25, Y+2	; 0x02
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	40 f0       	brcs	.+16     	; 0x14dc <Timer1_PWM_Duty+0x74>
		{
			OCR1A = Ton - 1; 
    14cc:	ea e4       	ldi	r30, 0x4A	; 74
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <Timer1_PWM_Duty+0x7c>
		}
		else
		OCR1A=0 ; 
    14dc:	ea e4       	ldi	r30, 0x4A	; 74
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	11 82       	std	Z+1, r1	; 0x01
    14e2:	10 82       	st	Z, r1
	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	08 95       	ret

000014f8 <Timer1_voidOVFEnableInterrupt>:
void Timer1_voidOVFEnableInterrupt(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TOIE1);
    1500:	a9 e5       	ldi	r26, 0x59	; 89
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e9 e5       	ldi	r30, 0x59	; 89
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	84 60       	ori	r24, 0x04	; 4
    150c:	8c 93       	st	X, r24
}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <Timer1_voidOVFDisableInterrupt>:

void Timer1_voidOVFDisableInterrupt(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TOIE1);
    151c:	a9 e5       	ldi	r26, 0x59	; 89
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e9 e5       	ldi	r30, 0x59	; 89
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8b 7f       	andi	r24, 0xFB	; 251
    1528:	8c 93       	st	X, r24
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <Timer1_voidOCAEnableInterrupt>:

void Timer1_voidOCAEnableInterrupt(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , OCIE1A);
    1538:	a9 e5       	ldi	r26, 0x59	; 89
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e9 e5       	ldi	r30, 0x59	; 89
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 61       	ori	r24, 0x10	; 16
    1544:	8c 93       	st	X, r24
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Timer1_voidOCADisableInterrupt>:

void Timer1_voidOCADisableInterrupt(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , OCIE1A);
    1554:	a9 e5       	ldi	r26, 0x59	; 89
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e9 e5       	ldi	r30, 0x59	; 89
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7e       	andi	r24, 0xEF	; 239
    1560:	8c 93       	st	X, r24
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <Timer1_voidOCBEnableInterrupt>:

void Timer1_voidOCBEnableInterrupt(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , OCIE1B);
    1570:	a9 e5       	ldi	r26, 0x59	; 89
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e9 e5       	ldi	r30, 0x59	; 89
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	88 60       	ori	r24, 0x08	; 8
    157c:	8c 93       	st	X, r24
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <Timer1_voidOCBDisableInterrupt>:

void Timer1_voidOCBDisableInterrupt(void)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , OCIE1B);
    158c:	a9 e5       	ldi	r26, 0x59	; 89
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 e5       	ldi	r30, 0x59	; 89
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	87 7f       	andi	r24, 0xF7	; 247
    1598:	8c 93       	st	X, r24
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <Timer1_voidCaptureEventEnableInterrupt>:

void Timer1_voidCaptureEventEnableInterrupt(void)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TICIE1);
    15a8:	a9 e5       	ldi	r26, 0x59	; 89
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e9 e5       	ldi	r30, 0x59	; 89
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 62       	ori	r24, 0x20	; 32
    15b4:	8c 93       	st	X, r24
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <Timer1_voidCaptureEventDisableInterrupt>:

void Timer1_voidCaptureEventDisableInterrupt(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TICIE1);
    15c4:	a9 e5       	ldi	r26, 0x59	; 89
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 e5       	ldi	r30, 0x59	; 89
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7d       	andi	r24, 0xDF	; 223
    15d0:	8c 93       	st	X, r24
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Timer1_voidOVFPollingOnFlag>:

void Timer1_voidOVFPollingOnFlag(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR , TOV1) );
    15e0:	e8 e5       	ldi	r30, 0x58	; 88
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	86 95       	lsr	r24
    15e8:	86 95       	lsr	r24
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	a9 f3       	breq	.-22     	; 0x15e0 <Timer1_voidOVFPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR , TOV1);
    15f6:	a8 e5       	ldi	r26, 0x58	; 88
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e8 e5       	ldi	r30, 0x58	; 88
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <Timer1_voidOCAPollingOnFlag>:

void Timer1_voidOCAPollingOnFlag(void)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR , OCF1A) );
    1612:	e8 e5       	ldi	r30, 0x58	; 88
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	82 95       	swap	r24
    161a:	8f 70       	andi	r24, 0x0F	; 15
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	a9 f3       	breq	.-22     	; 0x1612 <Timer1_voidOCAPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR , OCF1A);
    1628:	a8 e5       	ldi	r26, 0x58	; 88
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e8 e5       	ldi	r30, 0x58	; 88
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 61       	ori	r24, 0x10	; 16
    1634:	8c 93       	st	X, r24
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <Timer1_voidOCBPollingOnFlag>:

void Timer1_voidOCBPollingOnFlag(void)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR , OCF1B) );
    1644:	e8 e5       	ldi	r30, 0x58	; 88
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	86 95       	lsr	r24
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	81 70       	andi	r24, 0x01	; 1
    1656:	90 70       	andi	r25, 0x00	; 0
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	a1 f3       	breq	.-24     	; 0x1644 <Timer1_voidOCBPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR , OCF1B);
    165c:	a8 e5       	ldi	r26, 0x58	; 88
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e5       	ldi	r30, 0x58	; 88
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	88 60       	ori	r24, 0x08	; 8
    1668:	8c 93       	st	X, r24
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Timer1_voidCaptureEventPollingOnFlag>:

void Timer1_voidCaptureEventPollingOnFlag(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR , ICF1) );
    1678:	e8 e5       	ldi	r30, 0x58	; 88
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	82 95       	swap	r24
    1680:	86 95       	lsr	r24
    1682:	87 70       	andi	r24, 0x07	; 7
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	90 70       	andi	r25, 0x00	; 0
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	a1 f3       	breq	.-24     	; 0x1678 <Timer1_voidCaptureEventPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR , ICF1);
    1690:	a8 e5       	ldi	r26, 0x58	; 88
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e5       	ldi	r30, 0x58	; 88
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	8c 93       	st	X, r24
}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <Timer1_voidOVFSetCallBack>:

void Timer1_voidOVFSetCallBack( void (*ptrToFun)(void) )
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <Timer1_voidOVFSetCallBack+0x6>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <Timer1_voidOVFSetCallBack+0x22>
	{
		GLOB_VidTimer1OVFPtrCallBack = ptrToFun;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	90 93 d3 00 	sts	0x00D3, r25
    16c2:	80 93 d2 00 	sts	0x00D2, r24
	 
	}
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <Timer1_voidOCASetCallBack>:
void Timer1_voidOCASetCallBack( void (*ptrToFun)(void) )
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <Timer1_voidOCASetCallBack+0x6>
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <Timer1_voidOCASetCallBack+0x22>
	{
		GLOB_VidTimer1OCAPtrCallBack = ptrToFun;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	90 93 d5 00 	sts	0x00D5, r25
    16ee:	80 93 d4 00 	sts	0x00D4, r24
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <Timer1_voidOCBSetCallBack>:

void Timer1_voidOCBSetCallBack( void (*ptrToFun)(void) )
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <Timer1_voidOCBSetCallBack+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	31 f0       	breq	.+12     	; 0x171e <Timer1_voidOCBSetCallBack+0x22>
	{
		GLOB_VidTimer1OCBPtrCallBack = ptrToFun;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	90 93 d7 00 	sts	0x00D7, r25
    171a:	80 93 d6 00 	sts	0x00D6, r24
		
	}
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <Timer1_voidCaptureEventSetCallBack>:

void Timer1_voidCaptureEventSetCallBack( void (*ptrToFun)(void) )
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <Timer1_voidCaptureEventSetCallBack+0x6>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	31 f0       	breq	.+12     	; 0x174a <Timer1_voidCaptureEventSetCallBack+0x22>
	{
		GLOB_VidTimer1CaptureEventPtrCallBack = ptrToFun;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	90 93 d9 00 	sts	0x00D9, r25
    1746:	80 93 d8 00 	sts	0x00D8, r24
		
	}
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <Timer1_voidResetPrescaler>:

void Timer1_voidResetPrescaler(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SFIOR, PSR10);	
    175c:	a0 e5       	ldi	r26, 0x50	; 80
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e0 e5       	ldi	r30, 0x50	; 80
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	81 60       	ori	r24, 0x01	; 1
    1768:	8c 93       	st	X, r24
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <__vector_9>:
/************************************************************************************/
/*						PRIVATE FUNCTIONS IMPLEMENTATION							*/
/************************************************************************************/

void __vector_9(void)
{
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	2f 93       	push	r18
    177c:	3f 93       	push	r19
    177e:	4f 93       	push	r20
    1780:	5f 93       	push	r21
    1782:	6f 93       	push	r22
    1784:	7f 93       	push	r23
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	af 93       	push	r26
    178c:	bf 93       	push	r27
    178e:	ef 93       	push	r30
    1790:	ff 93       	push	r31
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OVFPtrCallBack != NULL)
    179a:	80 91 d2 00 	lds	r24, 0x00D2
    179e:	90 91 d3 00 	lds	r25, 0x00D3
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	29 f0       	breq	.+10     	; 0x17b0 <__vector_9+0x40>
	{
		(*GLOB_VidTimer1OVFPtrCallBack)();
    17a6:	e0 91 d2 00 	lds	r30, 0x00D2
    17aa:	f0 91 d3 00 	lds	r31, 0x00D3
    17ae:	09 95       	icall
	}
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_8>:

void __vector_8(void)
{
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCBPtrCallBack != NULL)
    1800:	80 91 d6 00 	lds	r24, 0x00D6
    1804:	90 91 d7 00 	lds	r25, 0x00D7
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	29 f0       	breq	.+10     	; 0x1816 <__vector_8+0x40>
	{
		(*GLOB_VidTimer1OCBPtrCallBack)();
    180c:	e0 91 d6 00 	lds	r30, 0x00D6
    1810:	f0 91 d7 00 	lds	r31, 0x00D7
    1814:	09 95       	icall
	}
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_7>:

void __vector_7(void)
{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCAPtrCallBack != NULL)
    1866:	80 91 d4 00 	lds	r24, 0x00D4
    186a:	90 91 d5 00 	lds	r25, 0x00D5
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	29 f0       	breq	.+10     	; 0x187c <__vector_7+0x40>
	{
		(*GLOB_VidTimer1OCAPtrCallBack)();
    1872:	e0 91 d4 00 	lds	r30, 0x00D4
    1876:	f0 91 d5 00 	lds	r31, 0x00D5
    187a:	09 95       	icall
	}
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_6>:

void __vector_6(void)
{
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1CaptureEventPtrCallBack != NULL)
    18cc:	80 91 d8 00 	lds	r24, 0x00D8
    18d0:	90 91 d9 00 	lds	r25, 0x00D9
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <__vector_6+0x40>
	{
		(*GLOB_VidTimer1CaptureEventPtrCallBack)();
    18d8:	e0 91 d8 00 	lds	r30, 0x00D8
    18dc:	f0 91 d9 00 	lds	r31, 0x00D9
    18e0:	09 95       	icall
	}
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <Func_ICU>:
#include "Timer1_Interface.h"

volatile uint16_t t1 , t2 , t3  ; 
volatile uint8_t flag = 0 ;  
static void Func_ICU()
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
    1910:	80 91 da 00 	lds	r24, 0x00DA
    1914:	88 23       	and	r24, r24
    1916:	79 f4       	brne	.+30     	; 0x1936 <Func_ICU+0x2e>
	{
		t1 = ICR1 ; 
    1918:	e6 e4       	ldi	r30, 0x46	; 70
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	90 93 f7 00 	sts	0x00F7, r25
    1924:	80 93 f6 00 	sts	0x00F6, r24
		Timer1_voidICEdgeSelect(_FALLING_EDGE) ; 
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
		flag = 1 ;  
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 da 00 	sts	0x00DA, r24
    1934:	24 c0       	rjmp	.+72     	; 0x197e <Func_ICU+0x76>
	}
	else if (flag==1)
    1936:	80 91 da 00 	lds	r24, 0x00DA
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	79 f4       	brne	.+30     	; 0x195c <Func_ICU+0x54>
	{
		t2 = ICR1 ; 
    193e:	e6 e4       	ldi	r30, 0x46	; 70
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	90 93 f5 00 	sts	0x00F5, r25
    194a:	80 93 f4 00 	sts	0x00F4, r24
		Timer1_voidICEdgeSelect(_RISING_EDGE) ;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
		flag = 2 ;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	80 93 da 00 	sts	0x00DA, r24
    195a:	11 c0       	rjmp	.+34     	; 0x197e <Func_ICU+0x76>
	}
	else if (flag==2)
    195c:	80 91 da 00 	lds	r24, 0x00DA
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	69 f4       	brne	.+26     	; 0x197e <Func_ICU+0x76>
	{
		t3 = ICR1 ; 
    1964:	e6 e4       	ldi	r30, 0x46	; 70
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	90 93 f3 00 	sts	0x00F3, r25
    1970:	80 93 f2 00 	sts	0x00F2, r24
		Timer1_voidCaptureEventDisableInterrupt() ; 
    1974:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Timer1_voidCaptureEventDisableInterrupt>
		flag = 3 ; 
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	80 93 da 00 	sts	0x00DA, r24
	}
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <PWM_Measure>:
/************************************************************************/
/* its better to init timer in normal mode here divide by 1000000 as	*/
/* i used 8000000 and pres 8  OC1A , OC1B Disconnected                 */
/************************************************************************/
void PWM_Measure(uint32_t* Ptr_Freq , uint8_t* Ptr_Duty ) 
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	28 97       	sbiw	r28, 0x08	; 8
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	78 87       	std	Y+8, r23	; 0x08
    199e:	6f 83       	std	Y+7, r22	; 0x07
	uint16_t Ton = 0  , Toff = 0 ;
    19a0:	1c 82       	std	Y+4, r1	; 0x04
    19a2:	1b 82       	std	Y+3, r1	; 0x03
    19a4:	1a 82       	std	Y+2, r1	; 0x02
    19a6:	19 82       	std	Y+1, r1	; 0x01
	Timer1_voidCaptureEventSetCallBack(Func_ICU) ; 
    19a8:	84 e8       	ldi	r24, 0x84	; 132
    19aa:	9c e0       	ldi	r25, 0x0C	; 12
    19ac:	0e 94 94 0b 	call	0x1728	; 0x1728 <Timer1_voidCaptureEventSetCallBack>
	Timer1_voidICEdgeSelect(_RISING_EDGE) ; 
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
	Timer1_voidCaptureEventEnableInterrupt() ; 
    19b6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Timer1_voidCaptureEventEnableInterrupt>
	EnableGlobalEnterrupt() ;
    19ba:	0e 94 58 11 	call	0x22b0	; 0x22b0 <EnableGlobalEnterrupt>
	flag = 0 ; 
    19be:	10 92 da 00 	sts	0x00DA, r1
	while(flag<3) ;
    19c2:	80 91 da 00 	lds	r24, 0x00DA
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	e0 f3       	brcs	.-8      	; 0x19c2 <PWM_Measure+0x3e>
	Ton = t2 - t1 ; 
    19ca:	20 91 f4 00 	lds	r18, 0x00F4
    19ce:	30 91 f5 00 	lds	r19, 0x00F5
    19d2:	80 91 f6 00 	lds	r24, 0x00F6
    19d6:	90 91 f7 00 	lds	r25, 0x00F7
    19da:	a9 01       	movw	r20, r18
    19dc:	48 1b       	sub	r20, r24
    19de:	59 0b       	sbc	r21, r25
    19e0:	ca 01       	movw	r24, r20
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
	Toff = t3 - t2 ;
    19e6:	20 91 f2 00 	lds	r18, 0x00F2
    19ea:	30 91 f3 00 	lds	r19, 0x00F3
    19ee:	80 91 f4 00 	lds	r24, 0x00F4
    19f2:	90 91 f5 00 	lds	r25, 0x00F5
    19f6:	a9 01       	movw	r20, r18
    19f8:	48 1b       	sub	r20, r24
    19fa:	59 0b       	sbc	r21, r25
    19fc:	ca 01       	movw	r24, r20
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01
	*Ptr_Freq = (1000000UL) / (Ton+Toff) ; 
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	9c 01       	movw	r18, r24
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	80 e4       	ldi	r24, 0x40	; 64
    1a16:	92 e4       	ldi	r25, 0x42	; 66
    1a18:	af e0       	ldi	r26, 0x0F	; 15
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    1a24:	da 01       	movw	r26, r20
    1a26:	c9 01       	movw	r24, r18
    1a28:	ed 81       	ldd	r30, Y+5	; 0x05
    1a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	a2 83       	std	Z+2, r26	; 0x02
    1a32:	b3 83       	std	Z+3, r27	; 0x03
	*Ptr_Duty = ((Ton*100 )/(Ton+Toff)); 
    1a34:	2b 81       	ldd	r18, Y+3	; 0x03
    1a36:	3c 81       	ldd	r19, Y+4	; 0x04
    1a38:	84 e6       	ldi	r24, 0x64	; 100
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	28 9f       	mul	r18, r24
    1a3e:	a0 01       	movw	r20, r0
    1a40:	29 9f       	mul	r18, r25
    1a42:	50 0d       	add	r21, r0
    1a44:	38 9f       	mul	r19, r24
    1a46:	50 0d       	add	r21, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	28 0f       	add	r18, r24
    1a54:	39 1f       	adc	r19, r25
    1a56:	ca 01       	movw	r24, r20
    1a58:	b9 01       	movw	r22, r18
    1a5a:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__udivmodhi4>
    1a5e:	cb 01       	movw	r24, r22
    1a60:	ef 81       	ldd	r30, Y+7	; 0x07
    1a62:	f8 85       	ldd	r31, Y+8	; 0x08
    1a64:	80 83       	st	Z, r24
}
    1a66:	28 96       	adiw	r28, 0x08	; 8
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <Timer0_voidInit>:
/************************************************************************************/
/*						PUBLIC FUNCTIONS IMPLEMENTATION								*/

/************************************************************************************/
void Timer0_voidInit(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	#if MODE == NORMAL
	CLEAR_BIT(TCCR0 , WGM01);
	CLEAR_BIT(TCCR0 , WGM00);
	#elif MODE == PHASE_CORRECT
	CLEAR_BIT(TCCR0 , WGM01);
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	87 7f       	andi	r24, 0xF7	; 247
    1a8c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , WGM00);
    1a8e:	a3 e5       	ldi	r26, 0x53	; 83
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e3 e5       	ldi	r30, 0x53	; 83
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	80 64       	ori	r24, 0x40	; 64
    1a9a:	8c 93       	st	X, r24
	/* For ensuring compatibility with future devices */
	CLEAR_BIT(TCCR0 , FOC0);
    1a9c:	a3 e5       	ldi	r26, 0x53	; 83
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e5       	ldi	r30, 0x53	; 83
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 77       	andi	r24, 0x7F	; 127
    1aa8:	8c 93       	st	X, r24
		#if OC0_PHASE_CORRECT == DISCONNECT_OC0
		CLEAR_BIT(TCCR0 , COM01);
		CLEAR_BIT(TCCR0 , COM00);
		#elif OC0_PHASE_CORRECT == NON_INVERTING_OC0
		SET_BIT(TCCR0 , COM01);
    1aaa:	a3 e5       	ldi	r26, 0x53	; 83
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e3 e5       	ldi	r30, 0x53	; 83
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 62       	ori	r24, 0x20	; 32
    1ab6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM00);
    1ab8:	a3 e5       	ldi	r26, 0x53	; 83
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e3 e5       	ldi	r30, 0x53	; 83
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 7e       	andi	r24, 0xEF	; 239
    1ac4:	8c 93       	st	X, r24
	#elif CLOCK_SELECT == NO_PRESCALER
	CLEAR_BIT(TCCR0 , CS02);
	CLEAR_BIT(TCCR0 , CS01);
	SET_BIT(TCCR0 , CS00);
	#elif CLOCK_SELECT == PRESCALER_8
	CLEAR_BIT(TCCR0 , CS02);
    1ac6:	a3 e5       	ldi	r26, 0x53	; 83
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e3 e5       	ldi	r30, 0x53	; 83
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8b 7f       	andi	r24, 0xFB	; 251
    1ad2:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , CS01);
    1ad4:	a3 e5       	ldi	r26, 0x53	; 83
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e3 e5       	ldi	r30, 0x53	; 83
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , CS00);
    1ae2:	a3 e5       	ldi	r26, 0x53	; 83
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e3 e5       	ldi	r30, 0x53	; 83
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , CS01);
	SET_BIT(TCCR0 , CS00);
	#else
	#error "Incorrect clock selection"
	#endif
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <Timer0_voidPreload>:
void Timer0_voidPreload(uint8_t LOC_U8Value)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = LOC_U8Value;
    1b02:	e2 e5       	ldi	r30, 0x52	; 82
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	80 83       	st	Z, r24
}
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <Timer0_voidSetCTCValue>:
void Timer0_voidSetCTCValue(uint8_t LOC_U8Value)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	0f 92       	push	r0
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = LOC_U8Value;
    1b1e:	ec e5       	ldi	r30, 0x5C	; 92
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	80 83       	st	Z, r24
}
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <Timer0_voidGetCounterValue>:
void Timer0_voidGetCounterValue(uint8_t* LOC_U8Value)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <Timer0_voidGetCounterValue+0x6>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01

	*LOC_U8Value = TCNT0;
    1b3c:	e2 e5       	ldi	r30, 0x52	; 82
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <Timer0_voidEnableOVFInterrupt>:
void Timer0_voidEnableOVFInterrupt(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE0);
    1b5a:	a9 e5       	ldi	r26, 0x59	; 89
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e9 e5       	ldi	r30, 0x59	; 89
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	81 60       	ori	r24, 0x01	; 1
    1b66:	8c 93       	st	X, r24
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <Timer0_voidDisableOVFInterrupt>:
void Timer0_voidDisableOVFInterrupt(void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE0) ;
    1b76:	a9 e5       	ldi	r26, 0x59	; 89
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e9 e5       	ldi	r30, 0x59	; 89
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8e 7f       	andi	r24, 0xFE	; 254
    1b82:	8c 93       	st	X, r24
}
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Timer0_voidEnableOCMInterrupt>:
void Timer0_voidEnableOCMInterrupt(void)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE0);
    1b92:	a9 e5       	ldi	r26, 0x59	; 89
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e9 e5       	ldi	r30, 0x59	; 89
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	82 60       	ori	r24, 0x02	; 2
    1b9e:	8c 93       	st	X, r24
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <Timer0_voidDisableOCMInterrupt>:

void Timer0_voidDisableOCMInterrupt(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE0);
    1bae:	a9 e5       	ldi	r26, 0x59	; 89
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e9 e5       	ldi	r30, 0x59	; 89
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8d 7f       	andi	r24, 0xFD	; 253
    1bba:	8c 93       	st	X, r24
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <Timer0_voidOVFSetCallBack>:
void Timer0_voidOVFSetCallBack( void (*ptrToFun)(void) )
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <Timer0_voidOVFSetCallBack+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	31 f0       	breq	.+12     	; 0x1be4 <Timer0_voidOVFSetCallBack+0x22>
	{
		GLOB_VidTimer0OVFPtrCallBack = ptrToFun;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	90 93 dc 00 	sts	0x00DC, r25
    1be0:	80 93 db 00 	sts	0x00DB, r24
	}
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <Timer0_voidOCMSetCallBack>:
void Timer0_voidOCMSetCallBack( void (*ptrToFun)(void) )
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <Timer0_voidOCMSetCallBack+0x6>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	31 f0       	breq	.+12     	; 0x1c10 <Timer0_voidOCMSetCallBack+0x22>
	{
		GLOB_VidTimer0OCMPtrCallBack = ptrToFun;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	90 93 de 00 	sts	0x00DE, r25
    1c0c:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <Timer0_voidOVFPollingOnFlag>:
void Timer0_voidOVFPollingOnFlag(void)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, TOV0) );
    1c22:	e8 e5       	ldi	r30, 0x58	; 88
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	90 70       	andi	r25, 0x00	; 0
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	b9 f3       	breq	.-18     	; 0x1c22 <Timer0_voidOVFPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, TOV0);
    1c34:	a8 e5       	ldi	r26, 0x58	; 88
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 e5       	ldi	r30, 0x58	; 88
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	81 60       	ori	r24, 0x01	; 1
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <Timer0_voidOCMPollingOnFlag>:
void Timer0_voidOCMPollingOnFlag(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, OCF0) );
    1c50:	e8 e5       	ldi	r30, 0x58	; 88
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	86 95       	lsr	r24
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	90 70       	andi	r25, 0x00	; 0
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	b1 f3       	breq	.-20     	; 0x1c50 <Timer0_voidOCMPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, OCF0);
    1c64:	a8 e5       	ldi	r26, 0x58	; 88
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e8 e5       	ldi	r30, 0x58	; 88
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 60       	ori	r24, 0x02	; 2
    1c70:	8c 93       	st	X, r24

}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <Timer0_voidSetDutyCycle>:
void Timer0_voidSetDutyCycle(uint8_t LOC_F32DutyCycle)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	0f 92       	push	r0
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_F32DutyCycle >= MINIMUM_DUTYCYCLE && LOC_F32DutyCycle <= MAXIMUM_DUTYCYCLE)
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	85 36       	cpi	r24, 0x65	; 101
    1c88:	b8 f4       	brcc	.+46     	; 0x1cb8 <Timer0_voidSetDutyCycle+0x40>
	{
		Timer0_voidSetCTCValue( ( LOC_F32DutyCycle / 100 ) * ( RESOLUTION - 1 ) );
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	94 e6       	ldi	r25, 0x64	; 100
    1c8e:	69 2f       	mov	r22, r25
    1c90:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodqi4>
    1c94:	48 2f       	mov	r20, r24
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	ca 01       	movw	r24, r20
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	22 0f       	add	r18, r18
    1c9e:	33 1f       	adc	r19, r19
    1ca0:	c9 01       	movw	r24, r18
    1ca2:	96 95       	lsr	r25
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	88 27       	eor	r24, r24
    1ca8:	97 95       	ror	r25
    1caa:	87 95       	ror	r24
    1cac:	82 1b       	sub	r24, r18
    1cae:	93 0b       	sbc	r25, r19
    1cb0:	84 0f       	add	r24, r20
    1cb2:	95 1f       	adc	r25, r21
    1cb4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Timer0_voidSetCTCValue>
	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <__vector_10>:
/************************************************************************************/
/*						PRIVATE FUNCTIONS IMPLEMENTATION							*/
/************************************************************************************/

void __vector_10(void)
{
    1cc0:	1f 92       	push	r1
    1cc2:	0f 92       	push	r0
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	0f 92       	push	r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer0OCMPtrCallBack != NULL)
    1cea:	80 91 dd 00 	lds	r24, 0x00DD
    1cee:	90 91 de 00 	lds	r25, 0x00DE
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	29 f0       	breq	.+10     	; 0x1d00 <__vector_10+0x40>
	{
		(*GLOB_VidTimer0OCMPtrCallBack)();
    1cf6:	e0 91 dd 00 	lds	r30, 0x00DD
    1cfa:	f0 91 de 00 	lds	r31, 0x00DE
    1cfe:	09 95       	icall
	}
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <__vector_11>:

void __vector_11(void)
{
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	2f 93       	push	r18
    1d32:	3f 93       	push	r19
    1d34:	4f 93       	push	r20
    1d36:	5f 93       	push	r21
    1d38:	6f 93       	push	r22
    1d3a:	7f 93       	push	r23
    1d3c:	8f 93       	push	r24
    1d3e:	9f 93       	push	r25
    1d40:	af 93       	push	r26
    1d42:	bf 93       	push	r27
    1d44:	ef 93       	push	r30
    1d46:	ff 93       	push	r31
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer0OVFPtrCallBack != NULL)
    1d50:	80 91 db 00 	lds	r24, 0x00DB
    1d54:	90 91 dc 00 	lds	r25, 0x00DC
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	29 f0       	breq	.+10     	; 0x1d66 <__vector_11+0x40>
	{
		(*GLOB_VidTimer0OVFPtrCallBack)();
    1d5c:	e0 91 db 00 	lds	r30, 0x00DB
    1d60:	f0 91 dc 00 	lds	r31, 0x00DC
    1d64:	09 95       	icall
	}
}
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	ff 91       	pop	r31
    1d6c:	ef 91       	pop	r30
    1d6e:	bf 91       	pop	r27
    1d70:	af 91       	pop	r26
    1d72:	9f 91       	pop	r25
    1d74:	8f 91       	pop	r24
    1d76:	7f 91       	pop	r23
    1d78:	6f 91       	pop	r22
    1d7a:	5f 91       	pop	r21
    1d7c:	4f 91       	pop	r20
    1d7e:	3f 91       	pop	r19
    1d80:	2f 91       	pop	r18
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	0f 90       	pop	r0
    1d88:	1f 90       	pop	r1
    1d8a:	18 95       	reti

00001d8c <MCAL_SPI_Init>:
#include "ErrorState.h"
#include "SPI_Private.h"
#include "SPI_ConFig.h"

ES_t MCAL_SPI_Init()
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62

    ES_t Init_Status = NO_Error ; 
    1d96:	19 82       	std	Y+1, r1	; 0x01
	
    #if SPI_MODE == MASTER_MODE
    {
		MCAL_SPI_Set_Pins_Master() ;
    1d98:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <MCAL_SPI_Set_Pins_Master>
       SPCR |= (1<<MSTR) ; 
    1d9c:	ad e2       	ldi	r26, 0x2D	; 45
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	ed e2       	ldi	r30, 0x2D	; 45
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 61       	ori	r24, 0x10	; 16
    1da8:	8c 93       	st	X, r24
        // MAX BaudRate
        SPCR |= (1<<SPR0);
    1daa:	ad e2       	ldi	r26, 0x2D	; 45
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ed e2       	ldi	r30, 0x2D	; 45
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	8c 93       	st	X, r24
	    SPCR |= (1<<SPE) ; //  SPI Enable
    1db8:	ad e2       	ldi	r26, 0x2D	; 45
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ed e2       	ldi	r30, 0x2D	; 45
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 64       	ori	r24, 0x40	; 64
    1dc4:	8c 93       	st	X, r24
		SET_BIT(PORTB,4);
    1dc6:	a8 e3       	ldi	r26, 0x38	; 56
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 61       	ori	r24, 0x10	; 16
    1dd2:	8c 93       	st	X, r24
       Init_Status = NO_Error ; 
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    }
    #endif

    #if DATA_ORDER == MSB_FIRST
    {
        SPCR &=~ (1<<DORD);
    1dd6:	ad e2       	ldi	r26, 0x2D	; 45
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	ed e2       	ldi	r30, 0x2D	; 45
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 7d       	andi	r24, 0xDF	; 223
    1de2:	8c 93       	st	X, r24
        Init_Status = NO_Error ; 
    1de4:	19 82       	std	Y+1, r1	; 0x01
    }
    #endif

    #if SAMPLING_MODE == 0
    {
        SPCR &=~(1<<CPOL);
    1de6:	ad e2       	ldi	r26, 0x2D	; 45
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ed e2       	ldi	r30, 0x2D	; 45
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	87 7f       	andi	r24, 0xF7	; 247
    1df2:	8c 93       	st	X, r24
        SPCR &=~(1<<CPHA);
    1df4:	ad e2       	ldi	r26, 0x2D	; 45
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ed e2       	ldi	r30, 0x2D	; 45
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8b 7f       	andi	r24, 0xFB	; 251
    1e00:	8c 93       	st	X, r24
        Init_Status = NO_Error ; 
    1e02:	19 82       	std	Y+1, r1	; 0x01
    }
    #endif

    #if SPEED_MODE == NORMAL_SPEED
    {
	    SPCR &=~ (1<<SPI2X);
    1e04:	ad e2       	ldi	r26, 0x2D	; 45
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ed e2       	ldi	r30, 0x2D	; 45
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	8c 93       	st	X, r24
        Init_Status = NO_Error ; 
    1e12:	19 82       	std	Y+1, r1	; 0x01
    {
        Init_Status = Error ; 
    }
    #endif
	
    return Init_Status ;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <MCAL_SPI_MasterSend_Data>:
uint8_t MCAL_SPI_MasterSend_Data(uint8_t DataSend  )
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTB,4);
    1e2a:	a8 e3       	ldi	r26, 0x38	; 56
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e8 e3       	ldi	r30, 0x38	; 56
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7e       	andi	r24, 0xEF	; 239
    1e36:	8c 93       	st	X, r24
	SPDR = DataSend ; 
    1e38:	ef e2       	ldi	r30, 0x2F	; 47
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	80 83       	st	Z, r24
	while( GET_BIT(SPSR,SPIF)==0);
    1e40:	ee e2       	ldi	r30, 0x2E	; 46
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	dc f7       	brge	.-10     	; 0x1e40 <MCAL_SPI_MasterSend_Data+0x22>
	return SPDR ; 
    1e4a:	ef e2       	ldi	r30, 0x2F	; 47
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
}
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <MCAL_SPI_SlaveRecieve_Data>:
uint8_t MCAL_SPI_SlaveRecieve_Data(uint8_t DataSend )
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
	SPDR = DataSend ;
    1e64:	ef e2       	ldi	r30, 0x2F	; 47
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	80 83       	st	Z, r24
	while( GET_BIT(SPSR,SPIF)==0);
    1e6c:	ee e2       	ldi	r30, 0x2E	; 46
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 23       	and	r24, r24
    1e74:	dc f7       	brge	.-10     	; 0x1e6c <MCAL_SPI_SlaveRecieve_Data+0x14>
	return SPDR ; 
    1e76:	ef e2       	ldi	r30, 0x2F	; 47
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
}
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <MCAL_SPI_TX_RX>:
ES_t MCAL_SPI_TX_RX(uint8_t DataSend , uint8_t* DataRecieve)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <MCAL_SPI_TX_RX+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <MCAL_SPI_TX_RX+0x8>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	7c 83       	std	Y+4, r23	; 0x04
    1e94:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t Init_Status = NO_Error ;
    1e96:	19 82       	std	Y+1, r1	; 0x01
	SPDR = DataSend ;
    1e98:	ef e2       	ldi	r30, 0x2F	; 47
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	80 83       	st	Z, r24
	while( (SPSR&&(1<<SPIF) )==0);
    1ea0:	ee e2       	ldi	r30, 0x2E	; 46
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 23       	and	r24, r24
    1ea8:	d9 f3       	breq	.-10     	; 0x1ea0 <MCAL_SPI_TX_RX+0x1c>
	*DataRecieve = SPDR ;
    1eaa:	ef e2       	ldi	r30, 0x2F	; 47
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb4:	80 83       	st	Z, r24
	return Init_Status ;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <MCAL_SPI_Set_Pins_Master>:
void MCAL_SPI_Set_Pins_Master(void)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0xB0 ; 
    1ece:	a7 e3       	ldi	r26, 0x37	; 55
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e7 e3       	ldi	r30, 0x37	; 55
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 6b       	ori	r24, 0xB0	; 176
    1eda:	8c 93       	st	X, r24
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <MCAL_SPI_Set_Pins_SLAVE>:
void MCAL_SPI_Set_Pins_SLAVE(void)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0x40 ;
    1eea:	a7 e3       	ldi	r26, 0x37	; 55
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e7 e3       	ldi	r30, 0x37	; 55
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 64       	ori	r24, 0x40	; 64
    1ef6:	8c 93       	st	X, r24
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <IIC_MasterInit>:
#include "IIC_Int.h"


ES_t IIC_MasterInit(void)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	ES_t Loc_ErrorState = Error ; 
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	
	SET_TWBR_VALUE ;
    1f0c:	a0 e2       	ldi	r26, 0x20	; 32
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e0 e2       	ldi	r30, 0x20	; 32
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 e1       	ldi	r24, 0x10	; 16
    1f16:	80 83       	st	Z, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	8c 93       	st	X, r24

    // Clear prescaler bits (TWSR) for TWI
    TWSR = 0;
    1f1c:	e1 e2       	ldi	r30, 0x21	; 33
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	10 82       	st	Z, r1
	#if I2C_PRESCALER == PRES_1
	SET_I2C_PRESCALER_1;
	Loc_ErrorState = NO_Error;

	#elif I2C_PRESCALER == PRES_4
	SET_I2C_PRESCALER_4;
    1f22:	a1 e2       	ldi	r26, 0x21	; 33
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e1 e2       	ldi	r30, 0x21	; 33
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8d 7f       	andi	r24, 0xFD	; 253
    1f2e:	8c 93       	st	X, r24
    1f30:	a1 e2       	ldi	r26, 0x21	; 33
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e1 e2       	ldi	r30, 0x21	; 33
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	81 60       	ori	r24, 0x01	; 1
    1f3c:	8c 93       	st	X, r24
	Loc_ErrorState = NO_Error;
    1f3e:	19 82       	std	Y+1, r1	; 0x01
	SET_I2C_PRESCALER_64;
	Loc_ErrorState = NO_Error;

	#endif
	
	SET_I2C_ENABLE;
    1f40:	a6 e5       	ldi	r26, 0x56	; 86
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 e5       	ldi	r30, 0x56	; 86
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	84 60       	ori	r24, 0x04	; 4
    1f4c:	8c 93       	st	X, r24

	return Loc_ErrorState ; 	
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <IIC_SlaveInit>:

ES_t IIC_SlaveInit(uint8_t SlaveAddress)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <IIC_SlaveInit+0x6>
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_ErrorState = NO_Error ;
    1f64:	19 82       	std	Y+1, r1	; 0x01
		
	SET_ECU_ADDRESS(SlaveAddress) ;
    1f66:	e2 e2       	ldi	r30, 0x22	; 34
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	88 0f       	add	r24, r24
    1f6e:	80 83       	st	Z, r24
	
    TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);/* Enable TWI, Enable ack generation */ 
    1f70:	e6 e5       	ldi	r30, 0x56	; 86
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	84 ec       	ldi	r24, 0xC4	; 196
    1f76:	80 83       	st	Z, r24
	
	return Loc_ErrorState ;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <IIC_SlaveCheckAdress>:
Error_TX_RX_e IIC_SlaveCheckAdress (void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	Error_TX_RX_e Loc_ErrorState = NOError ; 
    1f8e:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		while(WAIT_FLAG) ;
    1f90:	e6 e5       	ldi	r30, 0x56	; 86
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 23       	and	r24, r24
    1f98:	dc f7       	brge	.-10     	; 0x1f90 <IIC_SlaveCheckAdress+0xc>
		
		if (SLAVE_WRITE_RECIEVED) /* Own SLA+W received &ack returned */
    1f9a:	e1 e2       	ldi	r30, 0x21	; 33
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	88 7f       	andi	r24, 0xF8	; 248
    1fa6:	90 70       	andi	r25, 0x00	; 0
    1fa8:	88 36       	cpi	r24, 0x68	; 104
    1faa:	91 05       	cpc	r25, r1
    1fac:	99 f1       	breq	.+102    	; 0x2014 <IIC_SlaveCheckAdress+0x90>
    1fae:	e1 e2       	ldi	r30, 0x21	; 33
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	88 7f       	andi	r24, 0xF8	; 248
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	80 36       	cpi	r24, 0x60	; 96
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	49 f1       	breq	.+82     	; 0x2014 <IIC_SlaveCheckAdress+0x90>
		{
			break;
		}
		if (SLAVE_RAED_RECIEVED) /* Own SLA+R received &ack returned */
    1fc2:	e1 e2       	ldi	r30, 0x21	; 33
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	88 7f       	andi	r24, 0xF8	; 248
    1fce:	90 70       	andi	r25, 0x00	; 0
    1fd0:	88 3a       	cpi	r24, 0xA8	; 168
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	f9 f0       	breq	.+62     	; 0x2014 <IIC_SlaveCheckAdress+0x90>
    1fd6:	e1 e2       	ldi	r30, 0x21	; 33
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 7f       	andi	r24, 0xF8	; 248
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	80 3b       	cpi	r24, 0xB0	; 176
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	a9 f0       	breq	.+42     	; 0x2014 <IIC_SlaveCheckAdress+0x90>
		{
			break;
		}
		if (SLAVE_GENERALCALL_RECIEVED_ACK) /* General call received &ack returned */
    1fea:	e1 e2       	ldi	r30, 0x21	; 33
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	88 7f       	andi	r24, 0xF8	; 248
    1ff6:	90 70       	andi	r25, 0x00	; 0
    1ff8:	80 37       	cpi	r24, 0x70	; 112
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	59 f0       	breq	.+22     	; 0x2014 <IIC_SlaveCheckAdress+0x90>
    1ffe:	e1 e2       	ldi	r30, 0x21	; 33
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	88 7f       	andi	r24, 0xF8	; 248
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	88 37       	cpi	r24, 0x78	; 120
    200e:	91 05       	cpc	r25, r1
    2010:	09 f0       	breq	.+2      	; 0x2014 <IIC_SlaveCheckAdress+0x90>
    2012:	be cf       	rjmp	.-132    	; 0x1f90 <IIC_SlaveCheckAdress+0xc>
		{
			break;
		}
	}
	return Loc_ErrorState ; 
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <IIC_StartCondition>:

Error_TX_RX_e IIC_StartCondition(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	Error_TX_RX_e Loc_ErrorState = NOError ;
    2028:	19 82       	std	Y+1, r1	; 0x01

    TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	84 ea       	ldi	r24, 0xA4	; 164
    2030:	80 83       	st	Z, r24
	
	while (WAIT_FLAG);
    2032:	e6 e5       	ldi	r30, 0x56	; 86
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 23       	and	r24, r24
    203a:	dc f7       	brge	.-10     	; 0x2032 <IIC_StartCondition+0x14>

	if (!START_CONDITION_TRANSMIT)
    203c:	e1 e2       	ldi	r30, 0x21	; 33
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	88 7f       	andi	r24, 0xF8	; 248
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	88 30       	cpi	r24, 0x08	; 8
    204c:	91 05       	cpc	r25, r1
    204e:	11 f0       	breq	.+4      	; 0x2054 <IIC_StartCondition+0x36>
	{
		Loc_ErrorState =  START_CONDITION_TRANSMIT_Error ;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_ErrorState ;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <IIC_RepeatedStartCondition>:

Error_TX_RX_e IIC_RepeatedStartCondition(void)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <IIC_RepeatedStartCondition+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
	Error_TX_RX_e Loc_ErrorState = NOError ; 
    2068:	19 82       	std	Y+1, r1	; 0x01
			
	    TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
    206a:	e6 e5       	ldi	r30, 0x56	; 86
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	84 ea       	ldi	r24, 0xA4	; 164
    2070:	80 83       	st	Z, r24

		while (WAIT_FLAG); 		// Wait for start condition to be transmitted
    2072:	e6 e5       	ldi	r30, 0x56	; 86
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	88 23       	and	r24, r24
    207a:	dc f7       	brge	.-10     	; 0x2072 <IIC_RepeatedStartCondition+0x14>
		
		if (REPEAT_START_CONDITION_TRANSMIT) /* Check for repeated start transmitted */
    207c:	e1 e2       	ldi	r30, 0x21	; 33
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
		{
			; 	
		}
		return Loc_ErrorState ; 
    2082:	89 81       	ldd	r24, Y+1	; 0x01
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <IIC_SendSlaveAdress>:
Error_TX_RX_e IIC_SendSlaveAdress(uint8_t LOC_uint8_tSlaveAdress , uint8_t operation)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <IIC_SendSlaveAdress+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <IIC_SendSlaveAdress+0x8>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	6b 83       	std	Y+3, r22	; 0x03
	Error_TX_RX_e Loc_ErrorState = NOError ;
    20a0:	19 82       	std	Y+1, r1	; 0x01
	
    TWDR = (LOC_uint8_tSlaveAdress << 1) | (operation & 0x01);
    20a2:	e3 e2       	ldi	r30, 0x23	; 35
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	98 2f       	mov	r25, r24
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	81 70       	andi	r24, 0x01	; 1
    20b6:	89 2b       	or	r24, r25
    20b8:	80 83       	st	Z, r24

    TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
    20ba:	e6 e5       	ldi	r30, 0x56	; 86
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	84 e8       	ldi	r24, 0x84	; 132
    20c0:	80 83       	st	Z, r24

	while (WAIT_FLAG); 	 // Wait until the transmission is complete
    20c2:	e6 e5       	ldi	r30, 0x56	; 86
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	dc f7       	brge	.-10     	; 0x20c2 <IIC_SendSlaveAdress+0x34>
	
	if (SLA_WRITE_RECIEVED_ACK) /* Check for SLA+W transmitted &ack received */
    20cc:	e1 e2       	ldi	r30, 0x21	; 33
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
	{
			;
	}
	if (SLA_WRITE_RECIEVED_NACK) /* Check for SLA+W transmitted &nack received */
    20d2:	e1 e2       	ldi	r30, 0x21	; 33
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
	{
		;		
	}
	
	return Loc_ErrorState ;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <IIC_MasterSendData_ACK>:

Error_TX_RX_e IIC_MasterSendData_ACK(uint8_t LOC_uint8_tData)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <IIC_MasterSendData_ACK+0x6>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	8a 83       	std	Y+2, r24	; 0x02
	Error_TX_RX_e 	Loc_ErrorState = MASTER_DATA_TRANSMIT_Error ;
    20f6:	85 e0       	ldi	r24, 0x05	; 5
    20f8:	89 83       	std	Y+1, r24	; 0x01
	
	SEND_DATA_REGISTER(LOC_uint8_tData);
    20fa:	e3 e2       	ldi	r30, 0x23	; 35
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
		
    TWCR = (1<<TWEN) | (1<<TWINT);	    /* Enable TWI and clear interrupt flag */
    2102:	e6 e5       	ldi	r30, 0x56	; 86
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	84 e8       	ldi	r24, 0x84	; 132
    2108:	80 83       	st	Z, r24
	
	while (WAIT_FLAG);
    210a:	e6 e5       	ldi	r30, 0x56	; 86
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	88 23       	and	r24, r24
    2112:	dc f7       	brge	.-10     	; 0x210a <IIC_MasterSendData_ACK+0x20>
	
	if (MASTER_DATA_TRANSMIT_ACK) /* Check for data transmitted &ack received */
    2114:	e1 e2       	ldi	r30, 0x21	; 33
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	88 7f       	andi	r24, 0xF8	; 248
    2120:	90 70       	andi	r25, 0x00	; 0
    2122:	88 32       	cpi	r24, 0x28	; 40
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <IIC_MasterSendData_ACK+0x40>
	{
		Loc_ErrorState = NOError ;
    2128:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_ErrorState;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <IIC_SlaveReceieveData>:

Error_TX_RX_e IIC_SlaveReceieveData(uint8_t*ReceivedData)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <IIC_SlaveReceieveData+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <IIC_SlaveReceieveData+0x8>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	8a 83       	std	Y+2, r24	; 0x02
	Error_TX_RX_e Loc_ErrorState = NOError ;
    2146:	19 82       	std	Y+1, r1	; 0x01
	
    TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);/* Enable TWI & generation of ack */
    2148:	e6 e5       	ldi	r30, 0x56	; 86
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	84 ec       	ldi	r24, 0xC4	; 196
    214e:	80 83       	st	Z, r24
	
	while (WAIT_FLAG);
    2150:	e6 e5       	ldi	r30, 0x56	; 86
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	dc f7       	brge	.-10     	; 0x2150 <IIC_SlaveReceieveData+0x1a>
	
	if (SLAVE_DATA_RECIEVED) /* Check for data received &ack returned */
    215a:	e1 e2       	ldi	r30, 0x21	; 33
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	88 7f       	andi	r24, 0xF8	; 248
    2166:	90 70       	andi	r25, 0x00	; 0
    2168:	80 38       	cpi	r24, 0x80	; 128
    216a:	91 05       	cpc	r25, r1
    216c:	51 f0       	breq	.+20     	; 0x2182 <IIC_SlaveReceieveData+0x4c>
    216e:	e1 e2       	ldi	r30, 0x21	; 33
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	88 7f       	andi	r24, 0xF8	; 248
    217a:	90 70       	andi	r25, 0x00	; 0
    217c:	80 39       	cpi	r24, 0x90	; 144
    217e:	91 05       	cpc	r25, r1
    2180:	31 f4       	brne	.+12     	; 0x218e <IIC_SlaveReceieveData+0x58>
	{
		*ReceivedData = TWDR ;
    2182:	e3 e2       	ldi	r30, 0x23	; 35
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	ea 81       	ldd	r30, Y+2	; 0x02
    218a:	fb 81       	ldd	r31, Y+3	; 0x03
    218c:	80 83       	st	Z, r24
	}
	/* Check for data received, nack returned & switched to not addressed slave mode */
	if(((TWSR & 0xf8) == 0x88)||((TWSR & 0xf8) == 0x98))
    218e:	e1 e2       	ldi	r30, 0x21	; 33
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	88 7f       	andi	r24, 0xF8	; 248
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	88 38       	cpi	r24, 0x88	; 136
    219e:	91 05       	cpc	r25, r1
    21a0:	51 f0       	breq	.+20     	; 0x21b6 <IIC_SlaveReceieveData+0x80>
    21a2:	e1 e2       	ldi	r30, 0x21	; 33
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 7f       	andi	r24, 0xF8	; 248
    21ae:	90 70       	andi	r25, 0x00	; 0
    21b0:	88 39       	cpi	r24, 0x98	; 152
    21b2:	91 05       	cpc	r25, r1
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <IIC_SlaveReceieveData+0x8a>
		return TWDR;
    21b6:	e3 e2       	ldi	r30, 0x23	; 35
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8c 83       	std	Y+4, r24	; 0x04
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <IIC_SlaveReceieveData+0x8e>
	 
	return Loc_ErrorState;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	8c 83       	std	Y+4, r24	; 0x04
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <IIC_Master_ReadData_ACK>:

Error_TX_RX_e IIC_Master_ReadData_ACK(uint8_t* Data ) 
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <IIC_Master_ReadData_ACK+0x6>
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9b 83       	std	Y+3, r25	; 0x03
    21e2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_ErrorState = IIC_Master_ReadData_Error ; 
    21e4:	89 e0       	ldi	r24, 0x09	; 9
    21e6:	89 83       	std	Y+1, r24	; 0x01
	
    TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);/* Enable TWI & clear interrupt flag */
    21e8:	e6 e5       	ldi	r30, 0x56	; 86
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	84 ec       	ldi	r24, 0xC4	; 196
    21ee:	80 83       	st	Z, r24

	while(WAIT_FLAG) ; 
    21f0:	e6 e5       	ldi	r30, 0x56	; 86
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	88 23       	and	r24, r24
    21f8:	dc f7       	brge	.-10     	; 0x21f0 <IIC_Master_ReadData_ACK+0x1c>
	
	if (MASTER_RECIEVE_ACK) /*Data byte has been received	ACK has been returned*/
    21fa:	e1 e2       	ldi	r30, 0x21	; 33
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	88 7f       	andi	r24, 0xF8	; 248
    2206:	90 70       	andi	r25, 0x00	; 0
    2208:	80 35       	cpi	r24, 0x50	; 80
    220a:	91 05       	cpc	r25, r1
    220c:	39 f4       	brne	.+14     	; 0x221c <IIC_Master_ReadData_ACK+0x48>
	{
		*Data = TWDR ; 
    220e:	e3 e2       	ldi	r30, 0x23	; 35
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	ea 81       	ldd	r30, Y+2	; 0x02
    2216:	fb 81       	ldd	r31, Y+3	; 0x03
    2218:	80 83       	st	Z, r24
		Loc_ErrorState = NOError ; 
    221a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState ; 
    221c:	89 81       	ldd	r24, Y+1	; 0x01
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <IIC_Master_ReadData_NACK>:
Error_TX_RX_e IIC_Master_ReadData_NACK(uint8_t* Data )
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <IIC_Master_ReadData_NACK+0x6>
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9b 83       	std	Y+3, r25	; 0x03
    2238:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_ErrorState = IIC_Master_ReadData_Error ;
    223a:	89 e0       	ldi	r24, 0x09	; 9
    223c:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR=(1<<TWEN)|(1<<TWINT);/* Enable TWI & clear interrupt flag */
    223e:	e6 e5       	ldi	r30, 0x56	; 86
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	84 e8       	ldi	r24, 0x84	; 132
    2244:	80 83       	st	Z, r24

	while(WAIT_FLAG) ;
    2246:	e6 e5       	ldi	r30, 0x56	; 86
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 23       	and	r24, r24
    224e:	dc f7       	brge	.-10     	; 0x2246 <IIC_Master_ReadData_NACK+0x1c>
	
	if (MASTER_RECIEVE_NACK) /*Data byte has been received	ACK has been returned*/
    2250:	e1 e2       	ldi	r30, 0x21	; 33
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 7f       	andi	r24, 0xF8	; 248
    225c:	90 70       	andi	r25, 0x00	; 0
    225e:	88 35       	cpi	r24, 0x58	; 88
    2260:	91 05       	cpc	r25, r1
    2262:	39 f4       	brne	.+14     	; 0x2272 <IIC_Master_ReadData_NACK+0x48>
	{
		*Data = TWDR ;
    2264:	e3 e2       	ldi	r30, 0x23	; 35
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	ea 81       	ldd	r30, Y+2	; 0x02
    226c:	fb 81       	ldd	r31, Y+3	; 0x03
    226e:	80 83       	st	Z, r24
		Loc_ErrorState = NOError ;
    2270:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_ErrorState ;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <IIC_StopCondition>:
ES_t IIC_StopCondition(void)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	ES_t Loc_ErrorState = NO_Error ;
    228a:	19 82       	std	Y+1, r1	; 0x01
	
    TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    228c:	e6 e5       	ldi	r30, 0x56	; 86
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	84 e9       	ldi	r24, 0x94	; 148
    2292:	80 83       	st	Z, r24
   
    while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
    2294:	e6 e5       	ldi	r30, 0x56	; 86
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	80 71       	andi	r24, 0x10	; 16
    22a0:	90 70       	andi	r25, 0x00	; 0
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	b9 f7       	brne	.-18     	; 0x2294 <IIC_StopCondition+0x14>
	   
	return Loc_ErrorState ;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <EnableGlobalEnterrupt>:
 *  Author: karim
 */ 
#include "GIE.h"

ES_t EnableGlobalEnterrupt(void) 
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_state = NO_Error ; 
    22ba:	19 82       	std	Y+1, r1	; 0x01
	
	SET_BIT(SREG,7) ;
    22bc:	af e5       	ldi	r26, 0x5F	; 95
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	ef e5       	ldi	r30, 0x5F	; 95
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	8c 93       	st	X, r24
	
	return Local_state ; 
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <DisableGlobalEnterrupt>:
ES_t DisableGlobalEnterrupt(void) 
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	0f 92       	push	r0
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_state = NO_Error ;
    22de:	19 82       	std	Y+1, r1	; 0x01
	
	CLEAR_BIT(SREG,7) ;
    22e0:	af e5       	ldi	r26, 0x5F	; 95
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ef e5       	ldi	r30, 0x5F	; 95
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 77       	andi	r24, 0x7F	; 127
    22ec:	8c 93       	st	X, r24
	
	return Local_state ;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <EXI_SetCallBack>:
static void (*INT1_Fptr) (void)=NULL;
static void (*INT2_Fptr) (void)=NULL;

/************************************Call back functions*********************************************/
void EXI_SetCallBack(EXTI_Interrupt_t Interrupt,void(*LocalPtr)(void))
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <EXI_SetCallBack+0x6>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <EXI_SetCallBack+0x8>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	7b 83       	std	Y+3, r23	; 0x03
    230a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	3d 83       	std	Y+5, r19	; 0x05
    2314:	2c 83       	std	Y+4, r18	; 0x04
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	81 f0       	breq	.+32     	; 0x2340 <EXI_SetCallBack+0x48>
    2320:	2c 81       	ldd	r18, Y+4	; 0x04
    2322:	3d 81       	ldd	r19, Y+5	; 0x05
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	91 f0       	breq	.+36     	; 0x234e <EXI_SetCallBack+0x56>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	a1 f4       	brne	.+40     	; 0x235a <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	90 93 e0 00 	sts	0x00E0, r25
    233a:	80 93 df 00 	sts	0x00DF, r24
    233e:	0d c0       	rjmp	.+26     	; 0x235a <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	9b 81       	ldd	r25, Y+3	; 0x03
    2344:	90 93 e2 00 	sts	0x00E2, r25
    2348:	80 93 e1 00 	sts	0x00E1, r24
    234c:	06 c0       	rjmp	.+12     	; 0x235a <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	90 93 e4 00 	sts	0x00E4, r25
    2356:	80 93 e3 00 	sts	0x00E3, r24
		break;
	}
}
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <EXTI_Enable>:
void EXTI_Enable(EXTI_Interrupt_t interrupt)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <EXTI_Enable+0x6>
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt)
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	3b 83       	std	Y+3, r19	; 0x03
    2380:	2a 83       	std	Y+2, r18	; 0x02
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	91 05       	cpc	r25, r1
    238a:	89 f0       	breq	.+34     	; 0x23ae <EXTI_Enable+0x44>
    238c:	2a 81       	ldd	r18, Y+2	; 0x02
    238e:	3b 81       	ldd	r19, Y+3	; 0x03
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	a1 f0       	breq	.+40     	; 0x23be <EXTI_Enable+0x54>
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	b9 f4       	brne	.+46     	; 0x23cc <EXTI_Enable+0x62>
	{
		case EX_INT0 :
			SET_BIT(GICR,INT0);
    239e:	ab e5       	ldi	r26, 0x5B	; 91
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	eb e5       	ldi	r30, 0x5B	; 91
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 64       	ori	r24, 0x40	; 64
    23aa:	8c 93       	st	X, r24
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <EXTI_Enable+0x62>
			break;
		case EX_INT1 :
			SET_BIT(GICR,INT1);
    23ae:	ab e5       	ldi	r26, 0x5B	; 91
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	eb e5       	ldi	r30, 0x5B	; 91
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 68       	ori	r24, 0x80	; 128
    23ba:	8c 93       	st	X, r24
    23bc:	07 c0       	rjmp	.+14     	; 0x23cc <EXTI_Enable+0x62>
			break;
		case EX_INT2 :
			SET_BIT(GICR,INT2);
    23be:	ab e5       	ldi	r26, 0x5B	; 91
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	eb e5       	ldi	r30, 0x5B	; 91
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	80 62       	ori	r24, 0x20	; 32
    23ca:	8c 93       	st	X, r24
			break;
	}
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <EXTI_Disable>:
void EXTI_Disable(EXTI_Interrupt_t interrupt)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <EXTI_Disable+0x6>
    23de:	0f 92       	push	r0
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3b 83       	std	Y+3, r19	; 0x03
    23ee:	2a 83       	std	Y+2, r18	; 0x02
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	91 05       	cpc	r25, r1
    23f8:	89 f0       	breq	.+34     	; 0x241c <EXTI_Disable+0x44>
    23fa:	2a 81       	ldd	r18, Y+2	; 0x02
    23fc:	3b 81       	ldd	r19, Y+3	; 0x03
    23fe:	22 30       	cpi	r18, 0x02	; 2
    2400:	31 05       	cpc	r19, r1
    2402:	a1 f0       	breq	.+40     	; 0x242c <EXTI_Disable+0x54>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	b9 f4       	brne	.+46     	; 0x243a <EXTI_Disable+0x62>
	{
		case EX_INT0 :
		CLEAR_BIT(GICR,INT0);
    240c:	ab e5       	ldi	r26, 0x5B	; 91
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	eb e5       	ldi	r30, 0x5B	; 91
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	8f 7b       	andi	r24, 0xBF	; 191
    2418:	8c 93       	st	X, r24
    241a:	0f c0       	rjmp	.+30     	; 0x243a <EXTI_Disable+0x62>
		break;
		case EX_INT1 :
		CLEAR_BIT(GICR,INT1);
    241c:	ab e5       	ldi	r26, 0x5B	; 91
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	eb e5       	ldi	r30, 0x5B	; 91
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	8f 77       	andi	r24, 0x7F	; 127
    2428:	8c 93       	st	X, r24
    242a:	07 c0       	rjmp	.+14     	; 0x243a <EXTI_Disable+0x62>
		break;
		case EX_INT2 :
		CLEAR_BIT(GICR,INT2);
    242c:	ab e5       	ldi	r26, 0x5B	; 91
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb e5       	ldi	r30, 0x5B	; 91
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 7d       	andi	r24, 0xDF	; 223
    2438:	8c 93       	st	X, r24
		break;
	}
	
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <EXTI_TriggerEdge>:
void EXTI_TriggerEdge(EXTI_Interrupt_t interrupt , Trigger_Edge_t Edge)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	2a 97       	sbiw	r28, 0x0a	; 10
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt)
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	3a 87       	std	Y+10, r19	; 0x0a
    2466:	29 87       	std	Y+9, r18	; 0x09
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	91 05       	cpc	r25, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <EXTI_TriggerEdge+0x2e>
    2472:	66 c0       	rjmp	.+204    	; 0x2540 <EXTI_TriggerEdge+0xfa>
    2474:	29 85       	ldd	r18, Y+9	; 0x09
    2476:	3a 85       	ldd	r19, Y+10	; 0x0a
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <EXTI_TriggerEdge+0x3a>
    247e:	bb c0       	rjmp	.+374    	; 0x25f6 <EXTI_TriggerEdge+0x1b0>
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	09 f0       	breq	.+2      	; 0x248a <EXTI_TriggerEdge+0x44>
    2488:	dd c0       	rjmp	.+442    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
	{
		case EX_INT0 :
			switch(Edge)
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	38 87       	std	Y+8, r19	; 0x08
    2492:	2f 83       	std	Y+7, r18	; 0x07
    2494:	8f 81       	ldd	r24, Y+7	; 0x07
    2496:	98 85       	ldd	r25, Y+8	; 0x08
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	91 05       	cpc	r25, r1
    249c:	21 f1       	breq	.+72     	; 0x24e6 <EXTI_TriggerEdge+0xa0>
    249e:	2f 81       	ldd	r18, Y+7	; 0x07
    24a0:	38 85       	ldd	r19, Y+8	; 0x08
    24a2:	22 30       	cpi	r18, 0x02	; 2
    24a4:	31 05       	cpc	r19, r1
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <EXTI_TriggerEdge+0x6c>
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
    24aa:	98 85       	ldd	r25, Y+8	; 0x08
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	61 f0       	breq	.+24     	; 0x24c8 <EXTI_TriggerEdge+0x82>
    24b0:	c9 c0       	rjmp	.+402    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
    24b2:	2f 81       	ldd	r18, Y+7	; 0x07
    24b4:	38 85       	ldd	r19, Y+8	; 0x08
    24b6:	22 30       	cpi	r18, 0x02	; 2
    24b8:	31 05       	cpc	r19, r1
    24ba:	21 f1       	breq	.+72     	; 0x2504 <EXTI_TriggerEdge+0xbe>
    24bc:	8f 81       	ldd	r24, Y+7	; 0x07
    24be:	98 85       	ldd	r25, Y+8	; 0x08
    24c0:	83 30       	cpi	r24, 0x03	; 3
    24c2:	91 05       	cpc	r25, r1
    24c4:	71 f1       	breq	.+92     	; 0x2522 <EXTI_TriggerEdge+0xdc>
    24c6:	be c0       	rjmp	.+380    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
			{
				case LOW_LEVEL :
				CLEAR_BIT(MCUCR,ISC00);
    24c8:	a5 e5       	ldi	r26, 0x55	; 85
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e5 e5       	ldi	r30, 0x55	; 85
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8e 7f       	andi	r24, 0xFE	; 254
    24d4:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC01);
    24d6:	a5 e5       	ldi	r26, 0x55	; 85
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e5 e5       	ldi	r30, 0x55	; 85
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8d 7f       	andi	r24, 0xFD	; 253
    24e2:	8c 93       	st	X, r24
    24e4:	af c0       	rjmp	.+350    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case ANY_LOGIC_CHANGE :
				SET_BIT(MCUCR,ISC00);
    24e6:	a5 e5       	ldi	r26, 0x55	; 85
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e5       	ldi	r30, 0x55	; 85
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	81 60       	ori	r24, 0x01	; 1
    24f2:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC01);
    24f4:	a5 e5       	ldi	r26, 0x55	; 85
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e5 e5       	ldi	r30, 0x55	; 85
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8d 7f       	andi	r24, 0xFD	; 253
    2500:	8c 93       	st	X, r24
    2502:	a0 c0       	rjmp	.+320    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case FALLING_EDGE :
				CLEAR_BIT(MCUCR,ISC00);
    2504:	a5 e5       	ldi	r26, 0x55	; 85
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e5 e5       	ldi	r30, 0x55	; 85
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    2512:	a5 e5       	ldi	r26, 0x55	; 85
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e5 e5       	ldi	r30, 0x55	; 85
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	82 60       	ori	r24, 0x02	; 2
    251e:	8c 93       	st	X, r24
    2520:	91 c0       	rjmp	.+290    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case RISING_EDGE :
				SET_BIT(MCUCR,ISC00);
    2522:	a5 e5       	ldi	r26, 0x55	; 85
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e5 e5       	ldi	r30, 0x55	; 85
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	81 60       	ori	r24, 0x01	; 1
    252e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    2530:	a5 e5       	ldi	r26, 0x55	; 85
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e5 e5       	ldi	r30, 0x55	; 85
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	82 60       	ori	r24, 0x02	; 2
    253c:	8c 93       	st	X, r24
    253e:	82 c0       	rjmp	.+260    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
			}
			break;
		case EX_INT1 :
			switch(Edge)
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	3e 83       	std	Y+6, r19	; 0x06
    2548:	2d 83       	std	Y+5, r18	; 0x05
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	91 05       	cpc	r25, r1
    2552:	21 f1       	breq	.+72     	; 0x259c <EXTI_TriggerEdge+0x156>
    2554:	2d 81       	ldd	r18, Y+5	; 0x05
    2556:	3e 81       	ldd	r19, Y+6	; 0x06
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	2c f4       	brge	.+10     	; 0x2568 <EXTI_TriggerEdge+0x122>
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	61 f0       	breq	.+24     	; 0x257e <EXTI_TriggerEdge+0x138>
    2566:	6e c0       	rjmp	.+220    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
    2568:	2d 81       	ldd	r18, Y+5	; 0x05
    256a:	3e 81       	ldd	r19, Y+6	; 0x06
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	21 f1       	breq	.+72     	; 0x25ba <EXTI_TriggerEdge+0x174>
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	91 05       	cpc	r25, r1
    257a:	71 f1       	breq	.+92     	; 0x25d8 <EXTI_TriggerEdge+0x192>
    257c:	63 c0       	rjmp	.+198    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
			{
				case LOW_LEVEL :
				CLEAR_BIT(MCUCR,ISC10);
    257e:	a5 e5       	ldi	r26, 0x55	; 85
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e5 e5       	ldi	r30, 0x55	; 85
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	8b 7f       	andi	r24, 0xFB	; 251
    258a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    258c:	a5 e5       	ldi	r26, 0x55	; 85
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e5 e5       	ldi	r30, 0x55	; 85
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	87 7f       	andi	r24, 0xF7	; 247
    2598:	8c 93       	st	X, r24
    259a:	54 c0       	rjmp	.+168    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case ANY_LOGIC_CHANGE :
				SET_BIT(MCUCR,ISC10);
    259c:	a5 e5       	ldi	r26, 0x55	; 85
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e5 e5       	ldi	r30, 0x55	; 85
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	84 60       	ori	r24, 0x04	; 4
    25a8:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    25aa:	a5 e5       	ldi	r26, 0x55	; 85
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e5 e5       	ldi	r30, 0x55	; 85
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	87 7f       	andi	r24, 0xF7	; 247
    25b6:	8c 93       	st	X, r24
    25b8:	45 c0       	rjmp	.+138    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case FALLING_EDGE :
				CLEAR_BIT(MCUCR,ISC10);
    25ba:	a5 e5       	ldi	r26, 0x55	; 85
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e5       	ldi	r30, 0x55	; 85
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8b 7f       	andi	r24, 0xFB	; 251
    25c6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    25c8:	a5 e5       	ldi	r26, 0x55	; 85
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e5       	ldi	r30, 0x55	; 85
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	88 60       	ori	r24, 0x08	; 8
    25d4:	8c 93       	st	X, r24
    25d6:	36 c0       	rjmp	.+108    	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
				case RISING_EDGE :
				SET_BIT(MCUCR,ISC10);
    25d8:	a5 e5       	ldi	r26, 0x55	; 85
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e5 e5       	ldi	r30, 0x55	; 85
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	84 60       	ori	r24, 0x04	; 4
    25e4:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    25e6:	a5 e5       	ldi	r26, 0x55	; 85
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e5 e5       	ldi	r30, 0x55	; 85
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	88 60       	ori	r24, 0x08	; 8
    25f2:	8c 93       	st	X, r24
    25f4:	27 c0       	rjmp	.+78     	; 0x2644 <EXTI_TriggerEdge+0x1fe>
				break;
			}
			break;
		case EX_INT2 :
			switch(Edge)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3c 83       	std	Y+4, r19	; 0x04
    25fe:	2b 83       	std	Y+3, r18	; 0x03
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	82 30       	cpi	r24, 0x02	; 2
    2606:	91 05       	cpc	r25, r1
    2608:	31 f0       	breq	.+12     	; 0x2616 <EXTI_TriggerEdge+0x1d0>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	23 30       	cpi	r18, 0x03	; 3
    2610:	31 05       	cpc	r19, r1
    2612:	49 f0       	breq	.+18     	; 0x2626 <EXTI_TriggerEdge+0x1e0>
    2614:	10 c0       	rjmp	.+32     	; 0x2636 <EXTI_TriggerEdge+0x1f0>
			{
				case FALLING_EDGE :
					CLEAR_BIT(MCUCSR,ISC2);
    2616:	a4 e5       	ldi	r26, 0x54	; 84
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e4 e5       	ldi	r30, 0x54	; 84
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	8f 7b       	andi	r24, 0xBF	; 191
    2622:	8c 93       	st	X, r24
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <EXTI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE :
					SET_BIT(MCUCSR,ISC2);
    2626:	a4 e5       	ldi	r26, 0x54	; 84
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e4 e5       	ldi	r30, 0x54	; 84
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	80 64       	ori	r24, 0x40	; 64
    2632:	8c 93       	st	X, r24
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <EXTI_TriggerEdge+0x1fe>
					break;
				default:
					CLEAR_BIT(MCUCSR,ISC2);
    2636:	a4 e5       	ldi	r26, 0x54	; 84
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e4 e5       	ldi	r30, 0x54	; 84
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8f 7b       	andi	r24, 0xBF	; 191
    2642:	8c 93       	st	X, r24
					break;
			}
			break;
	}
}
    2644:	2a 96       	adiw	r28, 0x0a	; 10
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <__vector_1>:
/*******************************ISR********************************/
ISR(INT0_vect)
{
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	2f 93       	push	r18
    2662:	3f 93       	push	r19
    2664:	4f 93       	push	r20
    2666:	5f 93       	push	r21
    2668:	6f 93       	push	r22
    266a:	7f 93       	push	r23
    266c:	8f 93       	push	r24
    266e:	9f 93       	push	r25
    2670:	af 93       	push	r26
    2672:	bf 93       	push	r27
    2674:	ef 93       	push	r30
    2676:	ff 93       	push	r31
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	if (INT0_Fptr!=NULL)
    2680:	80 91 df 00 	lds	r24, 0x00DF
    2684:	90 91 e0 00 	lds	r25, 0x00E0
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	29 f0       	breq	.+10     	; 0x2696 <__vector_1+0x40>
	{
		INT0_Fptr();
    268c:	e0 91 df 00 	lds	r30, 0x00DF
    2690:	f0 91 e0 00 	lds	r31, 0x00E0
    2694:	09 95       	icall
	}
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	0f 90       	pop	r0
    26b8:	1f 90       	pop	r1
    26ba:	18 95       	reti

000026bc <__vector_2>:
ISR(INT1_vect)
{
    26bc:	1f 92       	push	r1
    26be:	0f 92       	push	r0
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	0f 92       	push	r0
    26c4:	11 24       	eor	r1, r1
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	ef 93       	push	r30
    26dc:	ff 93       	push	r31
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULL)
    26e6:	80 91 e1 00 	lds	r24, 0x00E1
    26ea:	90 91 e2 00 	lds	r25, 0x00E2
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	29 f0       	breq	.+10     	; 0x26fc <__vector_2+0x40>
	{
		INT1_Fptr();
    26f2:	e0 91 e1 00 	lds	r30, 0x00E1
    26f6:	f0 91 e2 00 	lds	r31, 0x00E2
    26fa:	09 95       	icall
	}
}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	ff 91       	pop	r31
    2702:	ef 91       	pop	r30
    2704:	bf 91       	pop	r27
    2706:	af 91       	pop	r26
    2708:	9f 91       	pop	r25
    270a:	8f 91       	pop	r24
    270c:	7f 91       	pop	r23
    270e:	6f 91       	pop	r22
    2710:	5f 91       	pop	r21
    2712:	4f 91       	pop	r20
    2714:	3f 91       	pop	r19
    2716:	2f 91       	pop	r18
    2718:	0f 90       	pop	r0
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	0f 90       	pop	r0
    271e:	1f 90       	pop	r1
    2720:	18 95       	reti

00002722 <__vector_3>:
ISR(INT2_vect)
{
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULL)
    274c:	80 91 e3 00 	lds	r24, 0x00E3
    2750:	90 91 e4 00 	lds	r25, 0x00E4
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	29 f0       	breq	.+10     	; 0x2762 <__vector_3+0x40>
	{
		INT2_Fptr();
    2758:	e0 91 e3 00 	lds	r30, 0x00E3
    275c:	f0 91 e4 00 	lds	r31, 0x00E4
    2760:	09 95       	icall
	}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	ff 91       	pop	r31
    2768:	ef 91       	pop	r30
    276a:	bf 91       	pop	r27
    276c:	af 91       	pop	r26
    276e:	9f 91       	pop	r25
    2770:	8f 91       	pop	r24
    2772:	7f 91       	pop	r23
    2774:	6f 91       	pop	r22
    2776:	5f 91       	pop	r21
    2778:	4f 91       	pop	r20
    277a:	3f 91       	pop	r19
    277c:	2f 91       	pop	r18
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <DIO_Write_Pin_Dir>:
 *  Author: karim
 */ 

#include "DIO.h"
void DIO_Write_Pin_Dir( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t Direction ) 
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <DIO_Write_Pin_Dir+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <DIO_Write_Pin_Dir+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	6a 83       	std	Y+2, r22	; 0x02
    279a:	4b 83       	std	Y+3, r20	; 0x03
	switch( PortNumber )
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	3d 83       	std	Y+5, r19	; 0x05
    27a4:	2c 83       	std	Y+4, r18	; 0x04
    27a6:	8c 81       	ldd	r24, Y+4	; 0x04
    27a8:	9d 81       	ldd	r25, Y+5	; 0x05
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	91 05       	cpc	r25, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <DIO_Write_Pin_Dir+0x2a>
    27b0:	47 c0       	rjmp	.+142    	; 0x2840 <DIO_Write_Pin_Dir+0xb8>
    27b2:	2c 81       	ldd	r18, Y+4	; 0x04
    27b4:	3d 81       	ldd	r19, Y+5	; 0x05
    27b6:	22 30       	cpi	r18, 0x02	; 2
    27b8:	31 05       	cpc	r19, r1
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <DIO_Write_Pin_Dir+0x3e>
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	71 f0       	breq	.+28     	; 0x27e0 <DIO_Write_Pin_Dir+0x58>
    27c4:	cb c0       	rjmp	.+406    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	22 30       	cpi	r18, 0x02	; 2
    27cc:	31 05       	cpc	r19, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <DIO_Write_Pin_Dir+0x4a>
    27d0:	67 c0       	rjmp	.+206    	; 0x28a0 <DIO_Write_Pin_Dir+0x118>
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	83 30       	cpi	r24, 0x03	; 3
    27d8:	91 05       	cpc	r25, r1
    27da:	09 f4       	brne	.+2      	; 0x27de <DIO_Write_Pin_Dir+0x56>
    27dc:	91 c0       	rjmp	.+290    	; 0x2900 <DIO_Write_Pin_Dir+0x178>
    27de:	be c0       	rjmp	.+380    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
	{
		case PORT_A :
		if ( Direction == OUT )
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	a1 f4       	brne	.+40     	; 0x280e <DIO_Write_Pin_Dir+0x86>
		{
			DDRA |= (1<<PinNumber) ;
    27e6:	aa e3       	ldi	r26, 0x3A	; 58
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ea e3       	ldi	r30, 0x3A	; 58
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	48 2f       	mov	r20, r24
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_Write_Pin_Dir+0x7c>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_Write_Pin_Dir+0x78>
    2808:	84 2b       	or	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	a7 c0       	rjmp	.+334    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		}
		else if ( Direction == IN )
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	88 23       	and	r24, r24
    2812:	09 f0       	breq	.+2      	; 0x2816 <DIO_Write_Pin_Dir+0x8e>
    2814:	a3 c0       	rjmp	.+326    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			DDRA &= ~(1<<PinNumber) ;
    2816:	aa e3       	ldi	r26, 0x3A	; 58
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ea e3       	ldi	r30, 0x3A	; 58
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	48 2f       	mov	r20, r24
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	02 2e       	mov	r0, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <DIO_Write_Pin_Dir+0xac>
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	0a 94       	dec	r0
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <DIO_Write_Pin_Dir+0xa8>
    2838:	80 95       	com	r24
    283a:	84 23       	and	r24, r20
    283c:	8c 93       	st	X, r24
    283e:	8e c0       	rjmp	.+284    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( Direction == OUT )
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	a1 f4       	brne	.+40     	; 0x286e <DIO_Write_Pin_Dir+0xe6>
		{
			DDRB |= (1<<PinNumber) ;
    2846:	a7 e3       	ldi	r26, 0x37	; 55
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e7 e3       	ldi	r30, 0x37	; 55
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	48 2f       	mov	r20, r24
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 2e       	mov	r0, r18
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <DIO_Write_Pin_Dir+0xdc>
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	0a 94       	dec	r0
    2866:	e2 f7       	brpl	.-8      	; 0x2860 <DIO_Write_Pin_Dir+0xd8>
    2868:	84 2b       	or	r24, r20
    286a:	8c 93       	st	X, r24
    286c:	77 c0       	rjmp	.+238    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		}
		else if ( Direction == IN )
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	88 23       	and	r24, r24
    2872:	09 f0       	breq	.+2      	; 0x2876 <DIO_Write_Pin_Dir+0xee>
    2874:	73 c0       	rjmp	.+230    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			DDRB &= ~(1<<PinNumber) ;
    2876:	a7 e3       	ldi	r26, 0x37	; 55
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e7 e3       	ldi	r30, 0x37	; 55
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	48 2f       	mov	r20, r24
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 2e       	mov	r0, r18
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <DIO_Write_Pin_Dir+0x10c>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	0a 94       	dec	r0
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <DIO_Write_Pin_Dir+0x108>
    2898:	80 95       	com	r24
    289a:	84 23       	and	r24, r20
    289c:	8c 93       	st	X, r24
    289e:	5e c0       	rjmp	.+188    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( Direction == OUT )
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	a1 f4       	brne	.+40     	; 0x28ce <DIO_Write_Pin_Dir+0x146>
		{
			DDRC |= (1<<PinNumber) ;
    28a6:	a4 e3       	ldi	r26, 0x34	; 52
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e4 e3       	ldi	r30, 0x34	; 52
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <DIO_Write_Pin_Dir+0x13c>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <DIO_Write_Pin_Dir+0x138>
    28c8:	84 2b       	or	r24, r20
    28ca:	8c 93       	st	X, r24
    28cc:	47 c0       	rjmp	.+142    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		}
		else if ( Direction == IN )
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	88 23       	and	r24, r24
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <DIO_Write_Pin_Dir+0x14e>
    28d4:	43 c0       	rjmp	.+134    	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			DDRC &= ~(1<<PinNumber) ;
    28d6:	a4 e3       	ldi	r26, 0x34	; 52
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e4 e3       	ldi	r30, 0x34	; 52
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	48 2f       	mov	r20, r24
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <DIO_Write_Pin_Dir+0x16c>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <DIO_Write_Pin_Dir+0x168>
    28f8:	80 95       	com	r24
    28fa:	84 23       	and	r24, r20
    28fc:	8c 93       	st	X, r24
    28fe:	2e c0       	rjmp	.+92     	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( Direction == OUT )
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	a1 f4       	brne	.+40     	; 0x292e <DIO_Write_Pin_Dir+0x1a6>
		{
			DDRD |= (1<<PinNumber) ;
    2906:	a1 e3       	ldi	r26, 0x31	; 49
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e1 e3       	ldi	r30, 0x31	; 49
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 2e       	mov	r0, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <DIO_Write_Pin_Dir+0x19c>
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	0a 94       	dec	r0
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <DIO_Write_Pin_Dir+0x198>
    2928:	84 2b       	or	r24, r20
    292a:	8c 93       	st	X, r24
    292c:	17 c0       	rjmp	.+46     	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		}
		else if ( Direction == IN )
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	88 23       	and	r24, r24
    2932:	a1 f4       	brne	.+40     	; 0x295c <DIO_Write_Pin_Dir+0x1d4>
		{
			DDRD &= ~(1<<PinNumber) ;
    2934:	a1 e3       	ldi	r26, 0x31	; 49
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e1 e3       	ldi	r30, 0x31	; 49
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	48 2f       	mov	r20, r24
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	02 2e       	mov	r0, r18
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <DIO_Write_Pin_Dir+0x1ca>
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <DIO_Write_Pin_Dir+0x1c6>
    2956:	80 95       	com	r24
    2958:	84 23       	and	r24, r20
    295a:	8c 93       	st	X, r24
		{
			//	Error Handling
		}
		break ;
	}
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <DIO_Write_Port_Dir>:
void DIO_Write_Port_Dir( GPIO_PORT_t PortNumber , uint8_t Direction ) 
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <DIO_Write_Port_Dir+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <DIO_Write_Port_Dir+0x8>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNumber)
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	3c 83       	std	Y+4, r19	; 0x04
    2984:	2b 83       	std	Y+3, r18	; 0x03
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	91 05       	cpc	r25, r1
    298e:	09 f1       	breq	.+66     	; 0x29d2 <DIO_Write_Port_Dir+0x66>
    2990:	2b 81       	ldd	r18, Y+3	; 0x03
    2992:	3c 81       	ldd	r19, Y+4	; 0x04
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	2c f4       	brge	.+10     	; 0x29a4 <DIO_Write_Port_Dir+0x38>
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	61 f0       	breq	.+24     	; 0x29ba <DIO_Write_Port_Dir+0x4e>
    29a2:	3a c0       	rjmp	.+116    	; 0x2a18 <DIO_Write_Port_Dir+0xac>
    29a4:	2b 81       	ldd	r18, Y+3	; 0x03
    29a6:	3c 81       	ldd	r19, Y+4	; 0x04
    29a8:	22 30       	cpi	r18, 0x02	; 2
    29aa:	31 05       	cpc	r19, r1
    29ac:	f1 f0       	breq	.+60     	; 0x29ea <DIO_Write_Port_Dir+0x7e>
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	83 30       	cpi	r24, 0x03	; 3
    29b4:	91 05       	cpc	r25, r1
    29b6:	29 f1       	breq	.+74     	; 0x2a02 <DIO_Write_Port_Dir+0x96>
    29b8:	2f c0       	rjmp	.+94     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
	{
		case PORT_A : 
			if(Direction==OUT)
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	29 f4       	brne	.+10     	; 0x29ca <DIO_Write_Port_Dir+0x5e>
			{
				DDRA = 0XFF ;
    29c0:	ea e3       	ldi	r30, 0x3A	; 58
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	8f ef       	ldi	r24, 0xFF	; 255
    29c6:	80 83       	st	Z, r24
    29c8:	27 c0       	rjmp	.+78     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			else
			{
				DDRA = 0X00 ;
    29ca:	ea e3       	ldi	r30, 0x3A	; 58
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	10 82       	st	Z, r1
    29d0:	23 c0       	rjmp	.+70     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
		break ;
		case PORT_B :
			if(Direction==OUT)
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	29 f4       	brne	.+10     	; 0x29e2 <DIO_Write_Port_Dir+0x76>
			{
				DDRB = 0XFF ;
    29d8:	e7 e3       	ldi	r30, 0x37	; 55
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	80 83       	st	Z, r24
    29e0:	1b c0       	rjmp	.+54     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			else
			{
				DDRB = 0X00 ;
    29e2:	e7 e3       	ldi	r30, 0x37	; 55
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	10 82       	st	Z, r1
    29e8:	17 c0       	rjmp	.+46     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			break ;
		case PORT_C :
		if(Direction==OUT)
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	29 f4       	brne	.+10     	; 0x29fa <DIO_Write_Port_Dir+0x8e>
			{
				DDRC = 0XFF ;
    29f0:	e4 e3       	ldi	r30, 0x34	; 52
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	80 83       	st	Z, r24
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			else
			{
				DDRC = 0X00 ;
    29fa:	e4 e3       	ldi	r30, 0x34	; 52
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	10 82       	st	Z, r1
    2a00:	0b c0       	rjmp	.+22     	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			break ;
		case PORT_D :
			if(Direction==OUT)
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	29 f4       	brne	.+10     	; 0x2a12 <DIO_Write_Port_Dir+0xa6>
			{
				DDRD = 0XFF ;
    2a08:	e1 e3       	ldi	r30, 0x31	; 49
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	80 83       	st	Z, r24
    2a10:	03 c0       	rjmp	.+6      	; 0x2a18 <DIO_Write_Port_Dir+0xac>
			}
			else
			{
				DDRD = 0X00 ;
    2a12:	e1 e3       	ldi	r30, 0x31	; 49
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	10 82       	st	Z, r1
			}
		break ;
	}
}
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <DIO_Write_Pin>:

void DIO_Write_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t value  )
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <DIO_Write_Pin+0x6>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <DIO_Write_Pin+0x8>
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	89 83       	std	Y+1, r24	; 0x01
    2a36:	6a 83       	std	Y+2, r22	; 0x02
    2a38:	4b 83       	std	Y+3, r20	; 0x03
	switch( PortNumber )
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	3d 83       	std	Y+5, r19	; 0x05
    2a42:	2c 83       	std	Y+4, r18	; 0x04
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	9d 81       	ldd	r25, Y+5	; 0x05
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <DIO_Write_Pin+0x2a>
    2a4e:	47 c0       	rjmp	.+142    	; 0x2ade <DIO_Write_Pin+0xb8>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	2c f4       	brge	.+10     	; 0x2a64 <DIO_Write_Pin+0x3e>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	71 f0       	breq	.+28     	; 0x2a7e <DIO_Write_Pin+0x58>
    2a62:	cb c0       	rjmp	.+406    	; 0x2bfa <DIO_Write_Pin+0x1d4>
    2a64:	2c 81       	ldd	r18, Y+4	; 0x04
    2a66:	3d 81       	ldd	r19, Y+5	; 0x05
    2a68:	22 30       	cpi	r18, 0x02	; 2
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <DIO_Write_Pin+0x4a>
    2a6e:	67 c0       	rjmp	.+206    	; 0x2b3e <DIO_Write_Pin+0x118>
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	83 30       	cpi	r24, 0x03	; 3
    2a76:	91 05       	cpc	r25, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <DIO_Write_Pin+0x56>
    2a7a:	91 c0       	rjmp	.+290    	; 0x2b9e <DIO_Write_Pin+0x178>
    2a7c:	be c0       	rjmp	.+380    	; 0x2bfa <DIO_Write_Pin+0x1d4>
	{
		case PORT_A :
		if ( value == HIGH )
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	a1 f4       	brne	.+40     	; 0x2aac <DIO_Write_Pin+0x86>
		{
			PORTA |= (1<<PinNumber) ;
    2a84:	ab e3       	ldi	r26, 0x3B	; 59
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	eb e3       	ldi	r30, 0x3B	; 59
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_Write_Pin+0x7c>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_Write_Pin+0x78>
    2aa6:	84 2b       	or	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	a7 c0       	rjmp	.+334    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		}
		else if ( value == LOW )
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <DIO_Write_Pin+0x8e>
    2ab2:	a3 c0       	rjmp	.+326    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			PORTA &= ~(1<<PinNumber) ;
    2ab4:	ab e3       	ldi	r26, 0x3B	; 59
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	eb e3       	ldi	r30, 0x3B	; 59
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	48 2f       	mov	r20, r24
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	02 2e       	mov	r0, r18
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <DIO_Write_Pin+0xac>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	0a 94       	dec	r0
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <DIO_Write_Pin+0xa8>
    2ad6:	80 95       	com	r24
    2ad8:	84 23       	and	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	8e c0       	rjmp	.+284    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	a1 f4       	brne	.+40     	; 0x2b0c <DIO_Write_Pin+0xe6>
		{
			PORTB |= (1<<PinNumber) ;
    2ae4:	a8 e3       	ldi	r26, 0x38	; 56
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e8 e3       	ldi	r30, 0x38	; 56
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	02 2e       	mov	r0, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <DIO_Write_Pin+0xdc>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	0a 94       	dec	r0
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <DIO_Write_Pin+0xd8>
    2b06:	84 2b       	or	r24, r20
    2b08:	8c 93       	st	X, r24
    2b0a:	77 c0       	rjmp	.+238    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		}
		else if ( value == LOW )
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	88 23       	and	r24, r24
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <DIO_Write_Pin+0xee>
    2b12:	73 c0       	rjmp	.+230    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			PORTB &= ~(1<<PinNumber) ;
    2b14:	a8 e3       	ldi	r26, 0x38	; 56
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e8 e3       	ldi	r30, 0x38	; 56
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	48 2f       	mov	r20, r24
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	02 2e       	mov	r0, r18
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <DIO_Write_Pin+0x10c>
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	0a 94       	dec	r0
    2b34:	e2 f7       	brpl	.-8      	; 0x2b2e <DIO_Write_Pin+0x108>
    2b36:	80 95       	com	r24
    2b38:	84 23       	and	r24, r20
    2b3a:	8c 93       	st	X, r24
    2b3c:	5e c0       	rjmp	.+188    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	a1 f4       	brne	.+40     	; 0x2b6c <DIO_Write_Pin+0x146>
		{
			PORTC |= (1<<PinNumber) ;
    2b44:	a5 e3       	ldi	r26, 0x35	; 53
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e5 e3       	ldi	r30, 0x35	; 53
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	48 2f       	mov	r20, r24
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <DIO_Write_Pin+0x13c>
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	0a 94       	dec	r0
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <DIO_Write_Pin+0x138>
    2b66:	84 2b       	or	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	47 c0       	rjmp	.+142    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		}
		else if ( value == LOW )
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	88 23       	and	r24, r24
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <DIO_Write_Pin+0x14e>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			PORTC &= ~(1<<PinNumber) ;
    2b74:	a5 e3       	ldi	r26, 0x35	; 53
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e5 e3       	ldi	r30, 0x35	; 53
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	48 2f       	mov	r20, r24
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	02 2e       	mov	r0, r18
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <DIO_Write_Pin+0x16c>
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	0a 94       	dec	r0
    2b94:	e2 f7       	brpl	.-8      	; 0x2b8e <DIO_Write_Pin+0x168>
    2b96:	80 95       	com	r24
    2b98:	84 23       	and	r24, r20
    2b9a:	8c 93       	st	X, r24
    2b9c:	2e c0       	rjmp	.+92     	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	a1 f4       	brne	.+40     	; 0x2bcc <DIO_Write_Pin+0x1a6>
		{
			PORTD |= (1<<PinNumber) ;
    2ba4:	a2 e3       	ldi	r26, 0x32	; 50
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e2 e3       	ldi	r30, 0x32	; 50
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	48 2f       	mov	r20, r24
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	02 2e       	mov	r0, r18
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <DIO_Write_Pin+0x19c>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	0a 94       	dec	r0
    2bc4:	e2 f7       	brpl	.-8      	; 0x2bbe <DIO_Write_Pin+0x198>
    2bc6:	84 2b       	or	r24, r20
    2bc8:	8c 93       	st	X, r24
    2bca:	17 c0       	rjmp	.+46     	; 0x2bfa <DIO_Write_Pin+0x1d4>
		}
		else if ( value == LOW )
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	88 23       	and	r24, r24
    2bd0:	a1 f4       	brne	.+40     	; 0x2bfa <DIO_Write_Pin+0x1d4>
		{
			PORTD &= ~(1<<PinNumber) ;
    2bd2:	a2 e3       	ldi	r26, 0x32	; 50
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e2 e3       	ldi	r30, 0x32	; 50
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	48 2f       	mov	r20, r24
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	02 2e       	mov	r0, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_Write_Pin+0x1ca>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	0a 94       	dec	r0
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_Write_Pin+0x1c6>
    2bf4:	80 95       	com	r24
    2bf6:	84 23       	and	r24, r20
    2bf8:	8c 93       	st	X, r24
		{
			//	Error Handling
		}
		break ;
	}
}
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <DIO_Write_Port>:
void DIO_Write_Port( GPIO_PORT_t PortNumber , uint8_t value  ) 
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <DIO_Write_Port+0x6>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <DIO_Write_Port+0x8>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNumber)
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3c 83       	std	Y+4, r19	; 0x04
    2c22:	2b 83       	std	Y+3, r18	; 0x03
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	d1 f0       	breq	.+52     	; 0x2c62 <DIO_Write_Port+0x58>
    2c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c30:	3c 81       	ldd	r19, Y+4	; 0x04
    2c32:	22 30       	cpi	r18, 0x02	; 2
    2c34:	31 05       	cpc	r19, r1
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <DIO_Write_Port+0x38>
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	61 f0       	breq	.+24     	; 0x2c58 <DIO_Write_Port+0x4e>
    2c40:	1e c0       	rjmp	.+60     	; 0x2c7e <DIO_Write_Port+0x74>
    2c42:	2b 81       	ldd	r18, Y+3	; 0x03
    2c44:	3c 81       	ldd	r19, Y+4	; 0x04
    2c46:	22 30       	cpi	r18, 0x02	; 2
    2c48:	31 05       	cpc	r19, r1
    2c4a:	81 f0       	breq	.+32     	; 0x2c6c <DIO_Write_Port+0x62>
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	91 05       	cpc	r25, r1
    2c54:	81 f0       	breq	.+32     	; 0x2c76 <DIO_Write_Port+0x6c>
    2c56:	13 c0       	rjmp	.+38     	; 0x2c7e <DIO_Write_Port+0x74>
	{
		case PORT_A :
		PORTA = value ;
    2c58:	eb e3       	ldi	r30, 0x3B	; 59
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	80 83       	st	Z, r24
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <DIO_Write_Port+0x74>
		break ;
		case PORT_B :
		PORTA = value ;
    2c62:	eb e3       	ldi	r30, 0x3B	; 59
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	80 83       	st	Z, r24
    2c6a:	09 c0       	rjmp	.+18     	; 0x2c7e <DIO_Write_Port+0x74>
		break ;
		case PORT_C :
		PORTA = value ;
    2c6c:	eb e3       	ldi	r30, 0x3B	; 59
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	80 83       	st	Z, r24
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <DIO_Write_Port+0x74>
		break ;
		case PORT_D :
		PORTA = value ;
    2c76:	eb e3       	ldi	r30, 0x3B	; 59
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	80 83       	st	Z, r24
		default:
		// Error Handler
		break ; 
	}
		
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	08 95       	ret

00002c8c <DIO_Read>:
void DIO_Read( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t* value  )
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <DIO_Read+0x6>
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <DIO_Read+0x8>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <DIO_Read+0xa>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	6a 83       	std	Y+2, r22	; 0x02
    2c9e:	5c 83       	std	Y+4, r21	; 0x04
    2ca0:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortNumber)
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	3e 83       	std	Y+6, r19	; 0x06
    2caa:	2d 83       	std	Y+5, r18	; 0x05
    2cac:	4d 81       	ldd	r20, Y+5	; 0x05
    2cae:	5e 81       	ldd	r21, Y+6	; 0x06
    2cb0:	41 30       	cpi	r20, 0x01	; 1
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	c1 f1       	breq	.+112    	; 0x2d26 <DIO_Read+0x9a>
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	34 f4       	brge	.+12     	; 0x2ccc <DIO_Read+0x40>
    2cc0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc4:	21 15       	cp	r18, r1
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	71 f0       	breq	.+28     	; 0x2ce6 <DIO_Read+0x5a>
    2cca:	8c c0       	rjmp	.+280    	; 0x2de4 <DIO_Read+0x158>
    2ccc:	4d 81       	ldd	r20, Y+5	; 0x05
    2cce:	5e 81       	ldd	r21, Y+6	; 0x06
    2cd0:	42 30       	cpi	r20, 0x02	; 2
    2cd2:	51 05       	cpc	r21, r1
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <DIO_Read+0x4c>
    2cd6:	47 c0       	rjmp	.+142    	; 0x2d66 <DIO_Read+0xda>
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	83 30       	cpi	r24, 0x03	; 3
    2cde:	91 05       	cpc	r25, r1
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <DIO_Read+0x58>
    2ce2:	61 c0       	rjmp	.+194    	; 0x2da6 <DIO_Read+0x11a>
    2ce4:	7f c0       	rjmp	.+254    	; 0x2de4 <DIO_Read+0x158>
	{
		case PORT_A :
		*(value) = (PINA &(1<<PinNumber))>>PinNumber ;
    2ce6:	e9 e3       	ldi	r30, 0x39	; 57
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	48 2f       	mov	r20, r24
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <DIO_Read+0x74>
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	2a 95       	dec	r18
    2d02:	e2 f7       	brpl	.-8      	; 0x2cfc <DIO_Read+0x70>
    2d04:	9a 01       	movw	r18, r20
    2d06:	28 23       	and	r18, r24
    2d08:	39 23       	and	r19, r25
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a9 01       	movw	r20, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_Read+0x8c>
    2d14:	55 95       	asr	r21
    2d16:	47 95       	ror	r20
    2d18:	8a 95       	dec	r24
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_Read+0x88>
    2d1c:	ca 01       	movw	r24, r20
    2d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d20:	fc 81       	ldd	r31, Y+4	; 0x04
    2d22:	80 83       	st	Z, r24
    2d24:	5f c0       	rjmp	.+190    	; 0x2de4 <DIO_Read+0x158>
		break ;
		case PORT_B :
		*(value) = (PINB &(1<<PinNumber))>>PinNumber ;
    2d26:	e6 e3       	ldi	r30, 0x36	; 54
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_Read+0xb4>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	2a 95       	dec	r18
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DIO_Read+0xb0>
    2d44:	9a 01       	movw	r18, r20
    2d46:	28 23       	and	r18, r24
    2d48:	39 23       	and	r19, r25
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a9 01       	movw	r20, r18
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <DIO_Read+0xcc>
    2d54:	55 95       	asr	r21
    2d56:	47 95       	ror	r20
    2d58:	8a 95       	dec	r24
    2d5a:	e2 f7       	brpl	.-8      	; 0x2d54 <DIO_Read+0xc8>
    2d5c:	ca 01       	movw	r24, r20
    2d5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d60:	fc 81       	ldd	r31, Y+4	; 0x04
    2d62:	80 83       	st	Z, r24
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <DIO_Read+0x158>
		break;
		case PORT_C :
		*(value) = (PINC &(1<<PinNumber))>>PinNumber ;
    2d66:	e3 e3       	ldi	r30, 0x33	; 51
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	48 2f       	mov	r20, r24
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <DIO_Read+0xf4>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	2a 95       	dec	r18
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <DIO_Read+0xf0>
    2d84:	9a 01       	movw	r18, r20
    2d86:	28 23       	and	r18, r24
    2d88:	39 23       	and	r19, r25
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	a9 01       	movw	r20, r18
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <DIO_Read+0x10c>
    2d94:	55 95       	asr	r21
    2d96:	47 95       	ror	r20
    2d98:	8a 95       	dec	r24
    2d9a:	e2 f7       	brpl	.-8      	; 0x2d94 <DIO_Read+0x108>
    2d9c:	ca 01       	movw	r24, r20
    2d9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2da0:	fc 81       	ldd	r31, Y+4	; 0x04
    2da2:	80 83       	st	Z, r24
    2da4:	1f c0       	rjmp	.+62     	; 0x2de4 <DIO_Read+0x158>
		break;
		case PORT_D :
		*(value) = (PIND &(1<<PinNumber))>>PinNumber ;
    2da6:	e0 e3       	ldi	r30, 0x30	; 48
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	48 2f       	mov	r20, r24
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <DIO_Read+0x134>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	2a 95       	dec	r18
    2dc2:	e2 f7       	brpl	.-8      	; 0x2dbc <DIO_Read+0x130>
    2dc4:	9a 01       	movw	r18, r20
    2dc6:	28 23       	and	r18, r24
    2dc8:	39 23       	and	r19, r25
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a9 01       	movw	r20, r18
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <DIO_Read+0x14c>
    2dd4:	55 95       	asr	r21
    2dd6:	47 95       	ror	r20
    2dd8:	8a 95       	dec	r24
    2dda:	e2 f7       	brpl	.-8      	; 0x2dd4 <DIO_Read+0x148>
    2ddc:	ca 01       	movw	r24, r20
    2dde:	eb 81       	ldd	r30, Y+3	; 0x03
    2de0:	fc 81       	ldd	r31, Y+4	; 0x04
    2de2:	80 83       	st	Z, r24
		break;
		
	}
}
    2de4:	26 96       	adiw	r28, 0x06	; 6
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <DIO_Toggle_Pin>:

void DIO_Toggle_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber  )
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <DIO_Toggle_Pin+0x6>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <DIO_Toggle_Pin+0x8>
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNumber)
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3c 83       	std	Y+4, r19	; 0x04
    2e0e:	2b 83       	std	Y+3, r18	; 0x03
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	91 05       	cpc	r25, r1
    2e18:	49 f1       	breq	.+82     	; 0x2e6c <DIO_Toggle_Pin+0x76>
    2e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1e:	22 30       	cpi	r18, 0x02	; 2
    2e20:	31 05       	cpc	r19, r1
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <DIO_Toggle_Pin+0x38>
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	9c 81       	ldd	r25, Y+4	; 0x04
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	61 f0       	breq	.+24     	; 0x2e44 <DIO_Toggle_Pin+0x4e>
    2e2c:	5a c0       	rjmp	.+180    	; 0x2ee2 <DIO_Toggle_Pin+0xec>
    2e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e30:	3c 81       	ldd	r19, Y+4	; 0x04
    2e32:	22 30       	cpi	r18, 0x02	; 2
    2e34:	31 05       	cpc	r19, r1
    2e36:	71 f1       	breq	.+92     	; 0x2e94 <DIO_Toggle_Pin+0x9e>
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	83 30       	cpi	r24, 0x03	; 3
    2e3e:	91 05       	cpc	r25, r1
    2e40:	e9 f1       	breq	.+122    	; 0x2ebc <DIO_Toggle_Pin+0xc6>
    2e42:	4f c0       	rjmp	.+158    	; 0x2ee2 <DIO_Toggle_Pin+0xec>
	{
		case PORT_A :
		PORTA ^= (1<<PinNumber);
    2e44:	ab e3       	ldi	r26, 0x3B	; 59
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	eb e3       	ldi	r30, 0x3B	; 59
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 2e       	mov	r0, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <DIO_Toggle_Pin+0x6c>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	0a 94       	dec	r0
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <DIO_Toggle_Pin+0x68>
    2e66:	84 27       	eor	r24, r20
    2e68:	8c 93       	st	X, r24
    2e6a:	3b c0       	rjmp	.+118    	; 0x2ee2 <DIO_Toggle_Pin+0xec>
		break ;
		case PORT_B :
		PORTB ^= (1<<PinNumber);
    2e6c:	a8 e3       	ldi	r26, 0x38	; 56
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e8 e3       	ldi	r30, 0x38	; 56
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	48 2f       	mov	r20, r24
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	02 2e       	mov	r0, r18
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <DIO_Toggle_Pin+0x94>
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	0a 94       	dec	r0
    2e8c:	e2 f7       	brpl	.-8      	; 0x2e86 <DIO_Toggle_Pin+0x90>
    2e8e:	84 27       	eor	r24, r20
    2e90:	8c 93       	st	X, r24
    2e92:	27 c0       	rjmp	.+78     	; 0x2ee2 <DIO_Toggle_Pin+0xec>
		break ;
		case PORT_C :
		PORTC ^= (1<<PinNumber);
    2e94:	a5 e3       	ldi	r26, 0x35	; 53
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e5 e3       	ldi	r30, 0x35	; 53
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	48 2f       	mov	r20, r24
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	02 2e       	mov	r0, r18
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <DIO_Toggle_Pin+0xbc>
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	0a 94       	dec	r0
    2eb4:	e2 f7       	brpl	.-8      	; 0x2eae <DIO_Toggle_Pin+0xb8>
    2eb6:	84 27       	eor	r24, r20
    2eb8:	8c 93       	st	X, r24
    2eba:	13 c0       	rjmp	.+38     	; 0x2ee2 <DIO_Toggle_Pin+0xec>
		break ;
		case PORT_D :
		PORTD ^= (1<<PinNumber);
    2ebc:	a2 e3       	ldi	r26, 0x32	; 50
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e2 e3       	ldi	r30, 0x32	; 50
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	48 2f       	mov	r20, r24
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 2e       	mov	r0, r18
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <DIO_Toggle_Pin+0xe4>
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	0a 94       	dec	r0
    2edc:	e2 f7       	brpl	.-8      	; 0x2ed6 <DIO_Toggle_Pin+0xe0>
    2ede:	84 27       	eor	r24, r20
    2ee0:	8c 93       	st	X, r24
		break ;
	}
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <DIO_Toggle_Port>:
void DIO_Toggle_Port( GPIO_PORT_t PortNumber )
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <DIO_Toggle_Port+0x6>
    2ef6:	0f 92       	push	r0
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	89 83       	std	Y+1, r24	; 0x01
	switch(PortNumber)
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	3b 83       	std	Y+3, r19	; 0x03
    2f06:	2a 83       	std	Y+2, r18	; 0x02
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	91 05       	cpc	r25, r1
    2f10:	e9 f0       	breq	.+58     	; 0x2f4c <DIO_Toggle_Port+0x5c>
    2f12:	2a 81       	ldd	r18, Y+2	; 0x02
    2f14:	3b 81       	ldd	r19, Y+3	; 0x03
    2f16:	22 30       	cpi	r18, 0x02	; 2
    2f18:	31 05       	cpc	r19, r1
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <DIO_Toggle_Port+0x36>
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	61 f0       	breq	.+24     	; 0x2f3c <DIO_Toggle_Port+0x4c>
    2f24:	2a c0       	rjmp	.+84     	; 0x2f7a <DIO_Toggle_Port+0x8a>
    2f26:	2a 81       	ldd	r18, Y+2	; 0x02
    2f28:	3b 81       	ldd	r19, Y+3	; 0x03
    2f2a:	22 30       	cpi	r18, 0x02	; 2
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	b1 f0       	breq	.+44     	; 0x2f5c <DIO_Toggle_Port+0x6c>
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	83 30       	cpi	r24, 0x03	; 3
    2f36:	91 05       	cpc	r25, r1
    2f38:	c9 f0       	breq	.+50     	; 0x2f6c <DIO_Toggle_Port+0x7c>
    2f3a:	1f c0       	rjmp	.+62     	; 0x2f7a <DIO_Toggle_Port+0x8a>
	{
		case PORT_A : 
		PORTA =~PORTA ; 
    2f3c:	ab e3       	ldi	r26, 0x3B	; 59
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	eb e3       	ldi	r30, 0x3B	; 59
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	80 95       	com	r24
    2f48:	8c 93       	st	X, r24
    2f4a:	17 c0       	rjmp	.+46     	; 0x2f7a <DIO_Toggle_Port+0x8a>
		break;
		case PORT_B :
		PORTB =~PORTB ;
    2f4c:	a8 e3       	ldi	r26, 0x38	; 56
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e8 e3       	ldi	r30, 0x38	; 56
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	80 95       	com	r24
    2f58:	8c 93       	st	X, r24
    2f5a:	0f c0       	rjmp	.+30     	; 0x2f7a <DIO_Toggle_Port+0x8a>
		break;
		case PORT_C :
		PORTC =~PORTC ;
    2f5c:	a5 e3       	ldi	r26, 0x35	; 53
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e5 e3       	ldi	r30, 0x35	; 53
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	80 95       	com	r24
    2f68:	8c 93       	st	X, r24
    2f6a:	07 c0       	rjmp	.+14     	; 0x2f7a <DIO_Toggle_Port+0x8a>
		break;
		case PORT_D :
		PORTD =~PORTD ;
    2f6c:	a2 e3       	ldi	r26, 0x32	; 50
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e2 e3       	ldi	r30, 0x32	; 50
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	80 95       	com	r24
    2f78:	8c 93       	st	X, r24
		break;
	}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <ADC_INIT>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Setting prescaler , adjustment and reference voltage. **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_INIT()
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	0f 92       	push	r0
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = NO_Error ;	
    2f90:	19 82       	std	Y+1, r1	; 0x01
	{
		INTERNAL_VOLTAGE ;							
	}
	#elif AD_REF_VOLT == AVCC_REF
	{
		AVCC_VOLTAGE ;
    2f92:	a7 e2       	ldi	r26, 0x27	; 39
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	e7 e2       	ldi	r30, 0x27	; 39
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	80 64       	ori	r24, 0x40	; 64
    2f9e:	8c 93       	st	X, r24
	{
	}
	#endif
	#if ADC_ADJ == RIGHT_ADJ
	{
		RIGHT_ADJUSTMENT	;						
    2fa0:	a7 e2       	ldi	r26, 0x27	; 39
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e7 e2       	ldi	r30, 0x27	; 39
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	8f 7d       	andi	r24, 0xDF	; 223
    2fac:	8c 93       	st	X, r24
	#else
	{
	}
#endif

	ENABLE_ADC;
    2fae:	a6 e2       	ldi	r26, 0x26	; 38
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e6 e2       	ldi	r30, 0x26	; 38
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	8c 93       	st	X, r24

	return Local_ErrorState ; 
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <ADC_Start>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Starting of ADC Conversion					        **/
/*****************************************************************************/
/*****************************************************************************/
 ES_t ADC_Start()
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = NO_Error ;
    2fd0:	19 82       	std	Y+1, r1	; 0x01
	
	START_CONVERSION	;						 
    2fd2:	a6 e2       	ldi	r26, 0x26	; 38
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e6 e2       	ldi	r30, 0x26	; 38
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 64       	ori	r24, 0x40	; 64
    2fde:	8c 93       	st	X, r24
	
	return Local_ErrorState ;
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <ADC_PollingSystem>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Polling on rising ADC flag, then clear it.            **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_PollingSystem() 
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	0f 92       	push	r0
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = NO_Error ;
    2ff4:	19 82       	std	Y+1, r1	; 0x01
	
	while(((ADCSRA>>4)&1)==0);
    2ff6:	e6 e2       	ldi	r30, 0x26	; 38
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	82 95       	swap	r24
    2ffe:	8f 70       	andi	r24, 0x0F	; 15
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	81 70       	andi	r24, 0x01	; 1
    3006:	90 70       	andi	r25, 0x00	; 0
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	a9 f3       	breq	.-22     	; 0x2ff6 <ADC_PollingSystem+0xc>
	CLEAR_FLAG	;						
    300c:	a6 e2       	ldi	r26, 0x26	; 38
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e6 e2       	ldi	r30, 0x26	; 38
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 61       	ori	r24, 0x10	; 16
    3018:	8c 93       	st	X, r24
	
	return Local_ErrorState ;
    301a:	89 81       	ldd	r24, Y+1	; 0x01
}
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <ADC_ReadHighValue>:
/**	Arguments       : Address of Variable which will Carry ADC Value.       **/
/**	Functionality   : Reading the highest 8 bit of ADC resolution register. **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_ReadHighValue(uint16_t* copy_Value) 
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	00 d0       	rcall	.+0      	; 0x302a <ADC_ReadHighValue+0x6>
    302a:	0f 92       	push	r0
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	9b 83       	std	Y+3, r25	; 0x03
    3032:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = NO_Error ;
    3034:	19 82       	std	Y+1, r1	; 0x01
		*copy_Value = ADCL>>6 ;
		*copy_Value |= ADCH<<2 ;
	}
	#elif ADC_ADJ == RIGHT_ADJ
	{
		*copy_Value = ADCL ;
    3036:	e4 e2       	ldi	r30, 0x24	; 36
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	ea 81       	ldd	r30, Y+2	; 0x02
    3042:	fb 81       	ldd	r31, Y+3	; 0x03
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
		*copy_Value |= (ADCH<<8) ;
    3048:	ea 81       	ldd	r30, Y+2	; 0x02
    304a:	fb 81       	ldd	r31, Y+3	; 0x03
    304c:	20 81       	ld	r18, Z
    304e:	31 81       	ldd	r19, Z+1	; 0x01
    3050:	e5 e2       	ldi	r30, 0x25	; 37
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	98 2f       	mov	r25, r24
    305c:	88 27       	eor	r24, r24
    305e:	82 2b       	or	r24, r18
    3060:	93 2b       	or	r25, r19
    3062:	ea 81       	ldd	r30, Y+2	; 0x02
    3064:	fb 81       	ldd	r31, Y+3	; 0x03
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
	#else
	{
	}
	#endif
	
	return Local_ErrorState ;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <ADC_Read>:
/**	Arguments       : Address of Variable which will Carry ADC Value.       **/
/**	Functionality   : Reading All ADC resolution register.                  **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_Read(uint16_t* copy_value) 
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <ADC_Read+0x6>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = NO_Error ;
    3088:	19 82       	std	Y+1, r1	; 0x01
	{
		*copy_value = ADCL ;
	}
	#elif ADC_ADJ == RIGHT_ADJ
	{
		*copy_value = ADCL ;
    308a:	e4 e2       	ldi	r30, 0x24	; 36
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	88 2f       	mov	r24, r24
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	ea 81       	ldd	r30, Y+2	; 0x02
    3096:	fb 81       	ldd	r31, Y+3	; 0x03
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
		*copy_value |= ((uint16_t)ADCH<<8) ;
    309c:	ea 81       	ldd	r30, Y+2	; 0x02
    309e:	fb 81       	ldd	r31, Y+3	; 0x03
    30a0:	20 81       	ld	r18, Z
    30a2:	31 81       	ldd	r19, Z+1	; 0x01
    30a4:	e5 e2       	ldi	r30, 0x25	; 37
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	98 2f       	mov	r25, r24
    30b0:	88 27       	eor	r24, r24
    30b2:	82 2b       	or	r24, r18
    30b4:	93 2b       	or	r25, r19
    30b6:	ea 81       	ldd	r30, Y+2	; 0x02
    30b8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
	#else
	{
	}
	#endif	
	
	return Local_ErrorState ;
    30be:	89 81       	ldd	r24, Y+1	; 0x01
}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <ADC_CallBack>:
/**	Arguments       : ptr to a void func having generic ptr & this generic. **/
/**	Functionality   : Starting of ADC Conversion.                           **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_CallBack(void(*Copy_PtrFun)(uint16_t*),uint16_t* copy_AppParameter) 
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <ADC_CallBack+0x6>
    30d2:	00 d0       	rcall	.+0      	; 0x30d4 <ADC_CallBack+0x8>
    30d4:	0f 92       	push	r0
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	9b 83       	std	Y+3, r25	; 0x03
    30dc:	8a 83       	std	Y+2, r24	; 0x02
    30de:	7d 83       	std	Y+5, r23	; 0x05
    30e0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_ErrorState = NO_Error ;
    30e2:	19 82       	std	Y+1, r1	; 0x01
	
	if (Copy_PtrFun != NULL)
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	61 f0       	breq	.+24     	; 0x3104 <ADC_CallBack+0x38>
	{
		ADC_GptrFun = Copy_PtrFun ;
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	9b 81       	ldd	r25, Y+3	; 0x03
    30f0:	90 93 e6 00 	sts	0x00E6, r25
    30f4:	80 93 e5 00 	sts	0x00E5, r24
		ADCGptrParameter = copy_AppParameter ;  
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	90 93 e8 00 	sts	0x00E8, r25
    3100:	80 93 e7 00 	sts	0x00E7, r24
	}
	return Local_ErrorState ;
    3104:	89 81       	ldd	r24, Y+1	; 0x01
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <ADC_Select_Channel>:
/**	Arguments       : Number of ADC Channel.                                **/
/**	Functionality   : Selecting of ADC Channel.                             **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_Select_Channel(Channel_Id_e Chacnnel_Id) 
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <ADC_Select_Channel+0x6>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = NO_Error ;
    3122:	19 82       	std	Y+1, r1	; 0x01
	
	ADMUX &=~ 0x1F ; 
    3124:	a7 e2       	ldi	r26, 0x27	; 39
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e7 e2       	ldi	r30, 0x27	; 39
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	80 7e       	andi	r24, 0xE0	; 224
    3130:	8c 93       	st	X, r24
	
	ADMUX |= Chacnnel_Id ;
    3132:	a7 e2       	ldi	r26, 0x27	; 39
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e7 e2       	ldi	r30, 0x27	; 39
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	90 81       	ld	r25, Z
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	89 2b       	or	r24, r25
    3140:	8c 93       	st	X, r24
		
	return Local_ErrorState ;
    3142:	89 81       	ldd	r24, Y+1	; 0x01
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <ADC_Enable_Triggring_Mode>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Enabling the ADC Trigger.                             **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_Enable_Triggring_Mode(uint8_t copy_TriggeringSource) 
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <ADC_Enable_Triggring_Mode+0x6>
    3154:	00 d0       	rcall	.+0      	; 0x3156 <ADC_Enable_Triggring_Mode+0x8>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = NO_Error ;
    315c:	19 82       	std	Y+1, r1	; 0x01
	
	DISABLE_TRIGGER ;
    315e:	a6 e2       	ldi	r26, 0x26	; 38
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e6 e2       	ldi	r30, 0x26	; 38
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	8c 93       	st	X, r24
	
	switch(copy_TriggeringSource)
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	3c 83       	std	Y+4, r19	; 0x04
    3174:	2b 83       	std	Y+3, r18	; 0x03
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	85 31       	cpi	r24, 0x15	; 21
    317c:	91 05       	cpc	r25, r1
    317e:	31 f0       	breq	.+12     	; 0x318c <ADC_Enable_Triggring_Mode+0x3e>
    3180:	2b 81       	ldd	r18, Y+3	; 0x03
    3182:	3c 81       	ldd	r19, Y+4	; 0x04
    3184:	22 32       	cpi	r18, 0x22	; 34
    3186:	31 05       	cpc	r19, r1
    3188:	b9 f0       	breq	.+46     	; 0x31b8 <ADC_Enable_Triggring_Mode+0x6a>
    318a:	2b c0       	rjmp	.+86     	; 0x31e2 <ADC_Enable_Triggring_Mode+0x94>
	{
		case FREE_RUNNIG : 
			SFIOR &=~ (1<<5) ;
    318c:	a0 e5       	ldi	r26, 0x50	; 80
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e0 e5       	ldi	r30, 0x50	; 80
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	8f 7d       	andi	r24, 0xDF	; 223
    3198:	8c 93       	st	X, r24
			SFIOR &=~ (1<<6) ;
    319a:	a0 e5       	ldi	r26, 0x50	; 80
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e0 e5       	ldi	r30, 0x50	; 80
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	8f 7b       	andi	r24, 0xBF	; 191
    31a6:	8c 93       	st	X, r24
			SFIOR &=~ (1<<7) ;
    31a8:	a0 e5       	ldi	r26, 0x50	; 80
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e0 e5       	ldi	r30, 0x50	; 80
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 77       	andi	r24, 0x7F	; 127
    31b4:	8c 93       	st	X, r24
    31b6:	15 c0       	rjmp	.+42     	; 0x31e2 <ADC_Enable_Triggring_Mode+0x94>
			break ;
		case EXTI0_TRIG : 
			SFIOR &=~ (1<<5) ;
    31b8:	a0 e5       	ldi	r26, 0x50	; 80
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e0 e5       	ldi	r30, 0x50	; 80
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 7d       	andi	r24, 0xDF	; 223
    31c4:	8c 93       	st	X, r24
			SFIOR |= (1<<6) ;
    31c6:	a0 e5       	ldi	r26, 0x50	; 80
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	e0 e5       	ldi	r30, 0x50	; 80
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	80 64       	ori	r24, 0x40	; 64
    31d2:	8c 93       	st	X, r24
			SFIOR &=~ (1<<7) ;
    31d4:	a0 e5       	ldi	r26, 0x50	; 80
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e0 e5       	ldi	r30, 0x50	; 80
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8f 77       	andi	r24, 0x7F	; 127
    31e0:	8c 93       	st	X, r24
			break ; 
			default:break ; 
	}
	
	ENABLE_TRIGGER	;							 
    31e2:	a6 e2       	ldi	r26, 0x26	; 38
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e6 e2       	ldi	r30, 0x26	; 38
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	80 62       	ori	r24, 0x20	; 32
    31ee:	8c 93       	st	X, r24
	
	return Local_ErrorState ;
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <ADC_Disable_Triggring_Mode>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Disabling the ADC Trigger.                            **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_Disable_Triggring_Mode() 
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	0f 92       	push	r0
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = NO_Error ;
    320a:	19 82       	std	Y+1, r1	; 0x01
	
	DISABLE_TRIGGER; 
    320c:	a6 e2       	ldi	r26, 0x26	; 38
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e6 e2       	ldi	r30, 0x26	; 38
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	8f 7d       	andi	r24, 0xDF	; 223
    3218:	8c 93       	st	X, r24
	
	return Local_ErrorState ;
    321a:	89 81       	ldd	r24, Y+1	; 0x01
}
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <ADC_EnableInterruptMode>:
/**	Arguments       : void.                                                 **/
/**	Functionality   : Enabling the ADC Interrupt.                           **/
/*****************************************************************************/
/*****************************************************************************/
ES_t ADC_EnableInterruptMode() 
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = NO_Error ;
    322e:	19 82       	std	Y+1, r1	; 0x01
	
	ENABLE_ADC_INTERRUPT ; 							 
    3230:	a6 e2       	ldi	r26, 0x26	; 38
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e6 e2       	ldi	r30, 0x26	; 38
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	88 60       	ori	r24, 0x08	; 8
    323c:	8c 93       	st	X, r24
	
	return Local_ErrorState ;
    323e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3240:	0f 90       	pop	r0
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <__vector_16>:
ISR(ADC_vect)
{
    3248:	1f 92       	push	r1
    324a:	0f 92       	push	r0
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	0f 92       	push	r0
    3250:	11 24       	eor	r1, r1
    3252:	2f 93       	push	r18
    3254:	3f 93       	push	r19
    3256:	4f 93       	push	r20
    3258:	5f 93       	push	r21
    325a:	6f 93       	push	r22
    325c:	7f 93       	push	r23
    325e:	8f 93       	push	r24
    3260:	9f 93       	push	r25
    3262:	af 93       	push	r26
    3264:	bf 93       	push	r27
    3266:	ef 93       	push	r30
    3268:	ff 93       	push	r31
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
	if (ADC_GptrFun != NULL)
    3272:	80 91 e5 00 	lds	r24, 0x00E5
    3276:	90 91 e6 00 	lds	r25, 0x00E6
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	49 f0       	breq	.+18     	; 0x3290 <__vector_16+0x48>
	{
		ADC_GptrFun(ADCGptrParameter) ; 
    327e:	e0 91 e5 00 	lds	r30, 0x00E5
    3282:	f0 91 e6 00 	lds	r31, 0x00E6
    3286:	80 91 e7 00 	lds	r24, 0x00E7
    328a:	90 91 e8 00 	lds	r25, 0x00E8
    328e:	09 95       	icall
	}
}
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <Fun_ICU>:

static volatile uint8_t c = 0 , c1 = 0  , c2 = 0 , flag = 0 ; 
static volatile uint16_t t1 = 0  , t2 = 0 ;

static void Fun_ICU ()
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
	if (flag == 0 )
    32be:	80 91 ec 00 	lds	r24, 0x00EC
    32c2:	88 23       	and	r24, r24
    32c4:	89 f4       	brne	.+34     	; 0x32e8 <Fun_ICU+0x32>
	{
		c = 0 ;
    32c6:	10 92 e9 00 	sts	0x00E9, r1
		t1 = ICR1 ; 
    32ca:	e6 e4       	ldi	r30, 0x46	; 70
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	90 93 ee 00 	sts	0x00EE, r25
    32d6:	80 93 ed 00 	sts	0x00ED, r24
		flag = 1 ; 
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	80 93 ec 00 	sts	0x00EC, r24
		Timer1_voidICEdgeSelect(_FALLING_EDGE) ; 
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
    32e6:	16 c0       	rjmp	.+44     	; 0x3314 <Fun_ICU+0x5e>
	}
	else if ( flag == 1 )
    32e8:	80 91 ec 00 	lds	r24, 0x00EC
    32ec:	81 30       	cpi	r24, 0x01	; 1
    32ee:	91 f4       	brne	.+36     	; 0x3314 <Fun_ICU+0x5e>
	{
		t2 = ICR1 ; 
    32f0:	e6 e4       	ldi	r30, 0x46	; 70
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	90 93 f0 00 	sts	0x00F0, r25
    32fc:	80 93 ef 00 	sts	0x00EF, r24
		flag = 2 ; 
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	80 93 ec 00 	sts	0x00EC, r24
		Timer1_voidICEdgeSelect(_RISING_EDGE) ; 
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
		Timer1_voidOVFDisableInterrupt() ; 
    330c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <Timer1_voidOVFDisableInterrupt>
		Timer1_voidCaptureEventDisableInterrupt();
    3310:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Timer1_voidCaptureEventDisableInterrupt>
	}
}
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <Fun_OVF>:
static void Fun_OVF()
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
	c++ ; 
    3322:	80 91 e9 00 	lds	r24, 0x00E9
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	80 93 e9 00 	sts	0x00E9, r24
}
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <Ultrasonic_VoidInit>:
void Ultrasonic_VoidInit() 
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
	/************************************************************************/
	/* Timer1_init --------> NOrmal mode OC1A , OC1B Disconnect                                                                     */
	/************************************************************************/
	
	Timer1_voidCaptureEventSetCallBack(Fun_ICU) ; 
    333a:	8b e5       	ldi	r24, 0x5B	; 91
    333c:	99 e1       	ldi	r25, 0x19	; 25
    333e:	0e 94 94 0b 	call	0x1728	; 0x1728 <Timer1_voidCaptureEventSetCallBack>
	Timer1_voidOVFSetCallBack(Fun_OVF) ;
    3342:	8d e8       	ldi	r24, 0x8D	; 141
    3344:	99 e1       	ldi	r25, 0x19	; 25
    3346:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Timer1_voidOVFSetCallBack>
}
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <Ultrasonic_u8Start>:
void Ultrasonic_u8Start(uint8_t PORT_TR, uint8_t TR_Pin )
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	6a 97       	sbiw	r28, 0x1a	; 26
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	89 8f       	std	Y+25, r24	; 0x19
    3366:	6a 8f       	std	Y+26, r22	; 0x1a
	if (flag==0)
    3368:	80 91 ec 00 	lds	r24, 0x00EC
    336c:	88 23       	and	r24, r24
    336e:	09 f0       	breq	.+2      	; 0x3372 <Ultrasonic_u8Start+0x22>
    3370:	dd c0       	rjmp	.+442    	; 0x352c <Ultrasonic_u8Start+0x1dc>
	{
		c1 = c ;
    3372:	80 91 e9 00 	lds	r24, 0x00E9
    3376:	80 93 ea 00 	sts	0x00EA, r24
		DIO_Write_Pin_Dir(PORT_TR,TR_Pin,OUT);
    337a:	89 8d       	ldd	r24, Y+25	; 0x19
    337c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    337e:	41 e0       	ldi	r20, 0x01	; 1
    3380:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
		DIO_Write_Pin_Dir(Ultrasonic_ECHO_PORT,Ultrasonic_ECHO_PIN,OUT);
    3384:	83 e0       	ldi	r24, 0x03	; 3
    3386:	66 e0       	ldi	r22, 0x06	; 6
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
		DIO_Write_Pin(PORT_TR,TR_Pin,HIGH) ;
    338e:	89 8d       	ldd	r24, Y+25	; 0x19
    3390:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a0 ea       	ldi	r26, 0xA0	; 160
    339e:	b1 e4       	ldi	r27, 0x41	; 65
    33a0:	8d 8b       	std	Y+21, r24	; 0x15
    33a2:	9e 8b       	std	Y+22, r25	; 0x16
    33a4:	af 8b       	std	Y+23, r26	; 0x17
    33a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	2b ea       	ldi	r18, 0xAB	; 171
    33b2:	3a ea       	ldi	r19, 0xAA	; 170
    33b4:	4a e2       	ldi	r20, 0x2A	; 42
    33b6:	50 e4       	ldi	r21, 0x40	; 64
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	89 8b       	std	Y+17, r24	; 0x11
    33c2:	9a 8b       	std	Y+18, r25	; 0x12
    33c4:	ab 8b       	std	Y+19, r26	; 0x13
    33c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33c8:	69 89       	ldd	r22, Y+17	; 0x11
    33ca:	7a 89       	ldd	r23, Y+18	; 0x12
    33cc:	8b 89       	ldd	r24, Y+19	; 0x13
    33ce:	9c 89       	ldd	r25, Y+20	; 0x14
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	1c f4       	brge	.+6      	; 0x33e6 <Ultrasonic_u8Start+0x96>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	88 8b       	std	Y+16, r24	; 0x10
    33e4:	91 c0       	rjmp	.+290    	; 0x3508 <Ultrasonic_u8Start+0x1b8>
	else if (__tmp > 255)
    33e6:	69 89       	ldd	r22, Y+17	; 0x11
    33e8:	7a 89       	ldd	r23, Y+18	; 0x12
    33ea:	8b 89       	ldd	r24, Y+19	; 0x13
    33ec:	9c 89       	ldd	r25, Y+20	; 0x14
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4f e7       	ldi	r20, 0x7F	; 127
    33f4:	53 e4       	ldi	r21, 0x43	; 67
    33f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33fa:	18 16       	cp	r1, r24
    33fc:	0c f0       	brlt	.+2      	; 0x3400 <Ultrasonic_u8Start+0xb0>
    33fe:	7b c0       	rjmp	.+246    	; 0x34f6 <Ultrasonic_u8Start+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    3400:	6d 89       	ldd	r22, Y+21	; 0x15
    3402:	7e 89       	ldd	r23, Y+22	; 0x16
    3404:	8f 89       	ldd	r24, Y+23	; 0x17
    3406:	98 8d       	ldd	r25, Y+24	; 0x18
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	4a e7       	ldi	r20, 0x7A	; 122
    340e:	54 e4       	ldi	r21, 0x44	; 68
    3410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8c 87       	std	Y+12, r24	; 0x0c
    341a:	9d 87       	std	Y+13, r25	; 0x0d
    341c:	ae 87       	std	Y+14, r26	; 0x0e
    341e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3420:	6c 85       	ldd	r22, Y+12	; 0x0c
    3422:	7d 85       	ldd	r23, Y+13	; 0x0d
    3424:	8e 85       	ldd	r24, Y+14	; 0x0e
    3426:	9f 85       	ldd	r25, Y+15	; 0x0f
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4a ef       	ldi	r20, 0xFA	; 250
    342e:	54 e4       	ldi	r21, 0x44	; 68
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	88 87       	std	Y+8, r24	; 0x08
    343a:	99 87       	std	Y+9, r25	; 0x09
    343c:	aa 87       	std	Y+10, r26	; 0x0a
    343e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3440:	68 85       	ldd	r22, Y+8	; 0x08
    3442:	79 85       	ldd	r23, Y+9	; 0x09
    3444:	8a 85       	ldd	r24, Y+10	; 0x0a
    3446:	9b 85       	ldd	r25, Y+11	; 0x0b
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	2c f4       	brge	.+10     	; 0x3462 <Ultrasonic_u8Start+0x112>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9f 83       	std	Y+7, r25	; 0x07
    345e:	8e 83       	std	Y+6, r24	; 0x06
    3460:	3f c0       	rjmp	.+126    	; 0x34e0 <Ultrasonic_u8Start+0x190>
	else if (__tmp > 65535)
    3462:	68 85       	ldd	r22, Y+8	; 0x08
    3464:	79 85       	ldd	r23, Y+9	; 0x09
    3466:	8a 85       	ldd	r24, Y+10	; 0x0a
    3468:	9b 85       	ldd	r25, Y+11	; 0x0b
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	4c f5       	brge	.+82     	; 0x34cc <Ultrasonic_u8Start+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347a:	6c 85       	ldd	r22, Y+12	; 0x0c
    347c:	7d 85       	ldd	r23, Y+13	; 0x0d
    347e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3480:	9f 85       	ldd	r25, Y+15	; 0x0f
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9f 83       	std	Y+7, r25	; 0x07
    34a0:	8e 83       	std	Y+6, r24	; 0x06
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <Ultrasonic_u8Start+0x172>
    34a4:	88 ec       	ldi	r24, 0xC8	; 200
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9d 83       	std	Y+5, r25	; 0x05
    34aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <Ultrasonic_u8Start+0x160>
    34b4:	9d 83       	std	Y+5, r25	; 0x05
    34b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ba:	9f 81       	ldd	r25, Y+7	; 0x07
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9f 83       	std	Y+7, r25	; 0x07
    34c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <Ultrasonic_u8Start+0x154>
    34ca:	24 c0       	rjmp	.+72     	; 0x3514 <Ultrasonic_u8Start+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	68 85       	ldd	r22, Y+8	; 0x08
    34ce:	79 85       	ldd	r23, Y+9	; 0x09
    34d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    34d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9f 83       	std	Y+7, r25	; 0x07
    34de:	8e 83       	std	Y+6, r24	; 0x06
    34e0:	8e 81       	ldd	r24, Y+6	; 0x06
    34e2:	9f 81       	ldd	r25, Y+7	; 0x07
    34e4:	9b 83       	std	Y+3, r25	; 0x03
    34e6:	8a 83       	std	Y+2, r24	; 0x02
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	9b 81       	ldd	r25, Y+3	; 0x03
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <Ultrasonic_u8Start+0x19c>
    34f0:	9b 83       	std	Y+3, r25	; 0x03
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	0f c0       	rjmp	.+30     	; 0x3514 <Ultrasonic_u8Start+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34f6:	69 89       	ldd	r22, Y+17	; 0x11
    34f8:	7a 89       	ldd	r23, Y+18	; 0x12
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	9c 89       	ldd	r25, Y+20	; 0x14
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	88 8b       	std	Y+16, r24	; 0x10
    3508:	88 89       	ldd	r24, Y+16	; 0x10
    350a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	8a 95       	dec	r24
    3510:	f1 f7       	brne	.-4      	; 0x350e <Ultrasonic_u8Start+0x1be>
    3512:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(20) ;
		DIO_Write_Pin(PORT_TR,TR_Pin,LOW) ;
    3514:	89 8d       	ldd	r24, Y+25	; 0x19
    3516:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		Timer1_voidICEdgeSelect(_RISING_EDGE);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
		Timer1_voidOVFEnableInterrupt();
    3524:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_voidOVFEnableInterrupt>
		Timer1_voidCaptureEventEnableInterrupt();
    3528:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Timer1_voidCaptureEventEnableInterrupt>
	}
}
    352c:	6a 96       	adiw	r28, 0x1a	; 26
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <Ultrasonic_VoidReadDistanceNoBlock>:
uint8_t Ultrasonic_VoidReadDistanceNoBlock(uint8_t* Distance )
{
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	00 d0       	rcall	.+0      	; 0x3548 <Ultrasonic_VoidReadDistanceNoBlock+0xa>
    3548:	00 d0       	rcall	.+0      	; 0x354a <Ultrasonic_VoidReadDistanceNoBlock+0xc>
    354a:	0f 92       	push	r0
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	9c 83       	std	Y+4, r25	; 0x04
    3552:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t Time = 0 ;
    3554:	1a 82       	std	Y+2, r1	; 0x02
    3556:	19 82       	std	Y+1, r1	; 0x01
	if (flag==2)
    3558:	80 91 ec 00 	lds	r24, 0x00EC
    355c:	82 30       	cpi	r24, 0x02	; 2
    355e:	09 f0       	breq	.+2      	; 0x3562 <Ultrasonic_VoidReadDistanceNoBlock+0x24>
    3560:	3f c0       	rjmp	.+126    	; 0x35e0 <Ultrasonic_VoidReadDistanceNoBlock+0xa2>
	{
		c2 = c ;
    3562:	80 91 e9 00 	lds	r24, 0x00E9
    3566:	80 93 eb 00 	sts	0x00EB, r24
		Time = t2 - t1 +((uint32_t)(c2-c1)*65535) ;
    356a:	20 91 ef 00 	lds	r18, 0x00EF
    356e:	30 91 f0 00 	lds	r19, 0x00F0
    3572:	80 91 ed 00 	lds	r24, 0x00ED
    3576:	90 91 ee 00 	lds	r25, 0x00EE
    357a:	89 01       	movw	r16, r18
    357c:	08 1b       	sub	r16, r24
    357e:	19 0b       	sbc	r17, r25
    3580:	80 91 eb 00 	lds	r24, 0x00EB
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	80 91 ea 00 	lds	r24, 0x00EA
    358c:	88 2f       	mov	r24, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	a9 01       	movw	r20, r18
    3592:	48 1b       	sub	r20, r24
    3594:	59 0b       	sbc	r21, r25
    3596:	ca 01       	movw	r24, r20
    3598:	aa 27       	eor	r26, r26
    359a:	97 fd       	sbrc	r25, 7
    359c:	a0 95       	com	r26
    359e:	ba 2f       	mov	r27, r26
    35a0:	2f ef       	ldi	r18, 0xFF	; 255
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	80 0f       	add	r24, r16
    35b6:	91 1f       	adc	r25, r17
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	89 83       	std	Y+1, r24	; 0x01
		*Distance = Time / 58 ;
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	2a e3       	ldi	r18, 0x3A	; 58
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	b9 01       	movw	r22, r18
    35c6:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__udivmodhi4>
    35ca:	cb 01       	movw	r24, r22
    35cc:	eb 81       	ldd	r30, Y+3	; 0x03
    35ce:	fc 81       	ldd	r31, Y+4	; 0x04
    35d0:	80 83       	st	Z, r24
		Timer1_voidOVFEnableInterrupt();
    35d2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_voidOVFEnableInterrupt>
		flag=0 ;
    35d6:	10 92 ec 00 	sts	0x00EC, r1
		return 1 ;
    35da:	51 e0       	ldi	r21, 0x01	; 1
    35dc:	5d 83       	std	Y+5, r21	; 0x05
    35de:	01 c0       	rjmp	.+2      	; 0x35e2 <Ultrasonic_VoidReadDistanceNoBlock+0xa4>
	}
	return 0 ;
    35e0:	1d 82       	std	Y+5, r1	; 0x05
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	08 95       	ret

000035f8 <Ultrasonic_VoidReadDistance>:
void Ultrasonic_VoidReadDistance(uint8_t*Distance ,uint8_t PORT_TR ,uint8_t TR_Pin) 
{
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	6e 97       	sbiw	r28, 0x1e	; 30
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	9c 8f       	std	Y+28, r25	; 0x1c
    3612:	8b 8f       	std	Y+27, r24	; 0x1b
    3614:	6d 8f       	std	Y+29, r22	; 0x1d
    3616:	4e 8f       	std	Y+30, r20	; 0x1e
	uint16_t Loc_Time = 0 ; 
    3618:	1a 8e       	std	Y+26, r1	; 0x1a
    361a:	19 8e       	std	Y+25, r1	; 0x19
	
	DIO_Write_Pin_Dir(PORT_TR,TR_Pin,OUT);
    361c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    361e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(Ultrasonic_ECHO_PORT,Ultrasonic_ECHO_PIN,OUT);
    3626:	83 e0       	ldi	r24, 0x03	; 3
    3628:	66 e0       	ldi	r22, 0x06	; 6
    362a:	41 e0       	ldi	r20, 0x01	; 1
    362c:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	
	DIO_Write_Pin(PORT_TR,TR_Pin,HIGH) ; 
    3630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3632:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	a0 ea       	ldi	r26, 0xA0	; 160
    3640:	b1 e4       	ldi	r27, 0x41	; 65
    3642:	8d 8b       	std	Y+21, r24	; 0x15
    3644:	9e 8b       	std	Y+22, r25	; 0x16
    3646:	af 8b       	std	Y+23, r26	; 0x17
    3648:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    364a:	6d 89       	ldd	r22, Y+21	; 0x15
    364c:	7e 89       	ldd	r23, Y+22	; 0x16
    364e:	8f 89       	ldd	r24, Y+23	; 0x17
    3650:	98 8d       	ldd	r25, Y+24	; 0x18
    3652:	2b ea       	ldi	r18, 0xAB	; 171
    3654:	3a ea       	ldi	r19, 0xAA	; 170
    3656:	4a e2       	ldi	r20, 0x2A	; 42
    3658:	50 e4       	ldi	r21, 0x40	; 64
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	89 8b       	std	Y+17, r24	; 0x11
    3664:	9a 8b       	std	Y+18, r25	; 0x12
    3666:	ab 8b       	std	Y+19, r26	; 0x13
    3668:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    366a:	69 89       	ldd	r22, Y+17	; 0x11
    366c:	7a 89       	ldd	r23, Y+18	; 0x12
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e8       	ldi	r20, 0x80	; 128
    3678:	5f e3       	ldi	r21, 0x3F	; 63
    367a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367e:	88 23       	and	r24, r24
    3680:	1c f4       	brge	.+6      	; 0x3688 <Ultrasonic_VoidReadDistance+0x90>
		__ticks = 1;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	88 8b       	std	Y+16, r24	; 0x10
    3686:	91 c0       	rjmp	.+290    	; 0x37aa <Ultrasonic_VoidReadDistance+0x1b2>
	else if (__tmp > 255)
    3688:	69 89       	ldd	r22, Y+17	; 0x11
    368a:	7a 89       	ldd	r23, Y+18	; 0x12
    368c:	8b 89       	ldd	r24, Y+19	; 0x13
    368e:	9c 89       	ldd	r25, Y+20	; 0x14
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	4f e7       	ldi	r20, 0x7F	; 127
    3696:	53 e4       	ldi	r21, 0x43	; 67
    3698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369c:	18 16       	cp	r1, r24
    369e:	0c f0       	brlt	.+2      	; 0x36a2 <Ultrasonic_VoidReadDistance+0xaa>
    36a0:	7b c0       	rjmp	.+246    	; 0x3798 <Ultrasonic_VoidReadDistance+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    36a2:	6d 89       	ldd	r22, Y+21	; 0x15
    36a4:	7e 89       	ldd	r23, Y+22	; 0x16
    36a6:	8f 89       	ldd	r24, Y+23	; 0x17
    36a8:	98 8d       	ldd	r25, Y+24	; 0x18
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	4a e7       	ldi	r20, 0x7A	; 122
    36b0:	54 e4       	ldi	r21, 0x44	; 68
    36b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	8c 87       	std	Y+12, r24	; 0x0c
    36bc:	9d 87       	std	Y+13, r25	; 0x0d
    36be:	ae 87       	std	Y+14, r26	; 0x0e
    36c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    36c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    36c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    36c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	4a ef       	ldi	r20, 0xFA	; 250
    36d0:	54 e4       	ldi	r21, 0x44	; 68
    36d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	88 87       	std	Y+8, r24	; 0x08
    36dc:	99 87       	std	Y+9, r25	; 0x09
    36de:	aa 87       	std	Y+10, r26	; 0x0a
    36e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36e2:	68 85       	ldd	r22, Y+8	; 0x08
    36e4:	79 85       	ldd	r23, Y+9	; 0x09
    36e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e8       	ldi	r20, 0x80	; 128
    36f0:	5f e3       	ldi	r21, 0x3F	; 63
    36f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f6:	88 23       	and	r24, r24
    36f8:	2c f4       	brge	.+10     	; 0x3704 <Ultrasonic_VoidReadDistance+0x10c>
		__ticks = 1;
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	9f 83       	std	Y+7, r25	; 0x07
    3700:	8e 83       	std	Y+6, r24	; 0x06
    3702:	3f c0       	rjmp	.+126    	; 0x3782 <Ultrasonic_VoidReadDistance+0x18a>
	else if (__tmp > 65535)
    3704:	68 85       	ldd	r22, Y+8	; 0x08
    3706:	79 85       	ldd	r23, Y+9	; 0x09
    3708:	8a 85       	ldd	r24, Y+10	; 0x0a
    370a:	9b 85       	ldd	r25, Y+11	; 0x0b
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	3f ef       	ldi	r19, 0xFF	; 255
    3710:	4f e7       	ldi	r20, 0x7F	; 127
    3712:	57 e4       	ldi	r21, 0x47	; 71
    3714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3718:	18 16       	cp	r1, r24
    371a:	4c f5       	brge	.+82     	; 0x376e <Ultrasonic_VoidReadDistance+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371c:	6c 85       	ldd	r22, Y+12	; 0x0c
    371e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3720:	8e 85       	ldd	r24, Y+14	; 0x0e
    3722:	9f 85       	ldd	r25, Y+15	; 0x0f
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e2       	ldi	r20, 0x20	; 32
    372a:	51 e4       	ldi	r21, 0x41	; 65
    372c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	bc 01       	movw	r22, r24
    3736:	cd 01       	movw	r24, r26
    3738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9f 83       	std	Y+7, r25	; 0x07
    3742:	8e 83       	std	Y+6, r24	; 0x06
    3744:	0f c0       	rjmp	.+30     	; 0x3764 <Ultrasonic_VoidReadDistance+0x16c>
    3746:	88 ec       	ldi	r24, 0xC8	; 200
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	9d 83       	std	Y+5, r25	; 0x05
    374c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    374e:	8c 81       	ldd	r24, Y+4	; 0x04
    3750:	9d 81       	ldd	r25, Y+5	; 0x05
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <Ultrasonic_VoidReadDistance+0x15a>
    3756:	9d 83       	std	Y+5, r25	; 0x05
    3758:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375a:	8e 81       	ldd	r24, Y+6	; 0x06
    375c:	9f 81       	ldd	r25, Y+7	; 0x07
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	9f 83       	std	Y+7, r25	; 0x07
    3762:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3764:	8e 81       	ldd	r24, Y+6	; 0x06
    3766:	9f 81       	ldd	r25, Y+7	; 0x07
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	69 f7       	brne	.-38     	; 0x3746 <Ultrasonic_VoidReadDistance+0x14e>
    376c:	24 c0       	rjmp	.+72     	; 0x37b6 <Ultrasonic_VoidReadDistance+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376e:	68 85       	ldd	r22, Y+8	; 0x08
    3770:	79 85       	ldd	r23, Y+9	; 0x09
    3772:	8a 85       	ldd	r24, Y+10	; 0x0a
    3774:	9b 85       	ldd	r25, Y+11	; 0x0b
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9f 83       	std	Y+7, r25	; 0x07
    3780:	8e 83       	std	Y+6, r24	; 0x06
    3782:	8e 81       	ldd	r24, Y+6	; 0x06
    3784:	9f 81       	ldd	r25, Y+7	; 0x07
    3786:	9b 83       	std	Y+3, r25	; 0x03
    3788:	8a 83       	std	Y+2, r24	; 0x02
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	9b 81       	ldd	r25, Y+3	; 0x03
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <Ultrasonic_VoidReadDistance+0x196>
    3792:	9b 83       	std	Y+3, r25	; 0x03
    3794:	8a 83       	std	Y+2, r24	; 0x02
    3796:	0f c0       	rjmp	.+30     	; 0x37b6 <Ultrasonic_VoidReadDistance+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3798:	69 89       	ldd	r22, Y+17	; 0x11
    379a:	7a 89       	ldd	r23, Y+18	; 0x12
    379c:	8b 89       	ldd	r24, Y+19	; 0x13
    379e:	9c 89       	ldd	r25, Y+20	; 0x14
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	88 8b       	std	Y+16, r24	; 0x10
    37aa:	88 89       	ldd	r24, Y+16	; 0x10
    37ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	8a 95       	dec	r24
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <Ultrasonic_VoidReadDistance+0x1b8>
    37b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20) ; 
	DIO_Write_Pin(PORT_TR,TR_Pin,LOW) ;
    37b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37b8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    37ba:	40 e0       	ldi	r20, 0x00	; 0
    37bc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	
	Timer1_voidICEdgeSelect(_RISING_EDGE);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 90 09 	call	0x1320	; 0x1320 <Timer1_voidICEdgeSelect>
	c1 = c ;
    37c6:	80 91 e9 00 	lds	r24, 0x00E9
    37ca:	80 93 ea 00 	sts	0x00EA, r24
	flag=0 ; 
    37ce:	10 92 ec 00 	sts	0x00EC, r1
	Timer1_voidOVFEnableInterrupt();
    37d2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_voidOVFEnableInterrupt>
	Timer1_voidCaptureEventEnableInterrupt();
    37d6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Timer1_voidCaptureEventEnableInterrupt>
	sei() ; 
    37da:	78 94       	sei
	while(flag<2);
    37dc:	80 91 ec 00 	lds	r24, 0x00EC
    37e0:	82 30       	cpi	r24, 0x02	; 2
    37e2:	e0 f3       	brcs	.-8      	; 0x37dc <Ultrasonic_VoidReadDistance+0x1e4>
	c2 = c ; 
    37e4:	80 91 e9 00 	lds	r24, 0x00E9
    37e8:	80 93 eb 00 	sts	0x00EB, r24
	Loc_Time = t2 - t1 + (c2-c1)*65535UL ; 
    37ec:	20 91 ef 00 	lds	r18, 0x00EF
    37f0:	30 91 f0 00 	lds	r19, 0x00F0
    37f4:	80 91 ed 00 	lds	r24, 0x00ED
    37f8:	90 91 ee 00 	lds	r25, 0x00EE
    37fc:	89 01       	movw	r16, r18
    37fe:	08 1b       	sub	r16, r24
    3800:	19 0b       	sbc	r17, r25
    3802:	80 91 eb 00 	lds	r24, 0x00EB
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	80 91 ea 00 	lds	r24, 0x00EA
    380e:	88 2f       	mov	r24, r24
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a9 01       	movw	r20, r18
    3814:	48 1b       	sub	r20, r24
    3816:	59 0b       	sbc	r21, r25
    3818:	ca 01       	movw	r24, r20
    381a:	aa 27       	eor	r26, r26
    381c:	97 fd       	sbrc	r25, 7
    381e:	a0 95       	com	r26
    3820:	ba 2f       	mov	r27, r26
    3822:	2f ef       	ldi	r18, 0xFF	; 255
    3824:	3f ef       	ldi	r19, 0xFF	; 255
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	bc 01       	movw	r22, r24
    382c:	cd 01       	movw	r24, r26
    382e:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__mulsi3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	80 0f       	add	r24, r16
    3838:	91 1f       	adc	r25, r17
    383a:	9a 8f       	std	Y+26, r25	; 0x1a
    383c:	89 8f       	std	Y+25, r24	; 0x19
	*Distance = Loc_Time / 58 ; 	
    383e:	89 8d       	ldd	r24, Y+25	; 0x19
    3840:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3842:	2a e3       	ldi	r18, 0x3A	; 58
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	b9 01       	movw	r22, r18
    3848:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__udivmodhi4>
    384c:	cb 01       	movw	r24, r22
    384e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3850:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3852:	80 83       	st	Z, r24
	Timer1_voidCaptureEventDisableInterrupt();
    3854:	0e 94 de 0a 	call	0x15bc	; 0x15bc <Timer1_voidCaptureEventDisableInterrupt>
}
    3858:	6e 96       	adiw	r28, 0x1e	; 30
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	08 95       	ret

0000386e <Stepper_Motor_Init>:
 *  Author: karim
 */ 
#include "Stepper_Motor_Interface.h"

void Stepper_Motor_Init() 
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	e8 97       	sbiw	r28, 0x38	; 56
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
	DIO_Write_Pin_Dir(STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0,OUT) ; 
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(STEPPER_MOTOR_PORT1,STEPPER_MOTOR_PIN1,OUT) ;
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	61 e0       	ldi	r22, 0x01	; 1
    3890:	41 e0       	ldi	r20, 0x01	; 1
    3892:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(STEPPER_MOTOR_PORT2,STEPPER_MOTOR_PIN2,OUT) ;
    3896:	82 e0       	ldi	r24, 0x02	; 2
    3898:	62 e0       	ldi	r22, 0x02	; 2
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(STEPPER_MOTOR_PORT3,STEPPER_MOTOR_PIN3,OUT) ;
    38a0:	82 e0       	ldi	r24, 0x02	; 2
    38a2:	63 e0       	ldi	r22, 0x03	; 3
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	
	#if STEPPER_MOTOR_MODE == STEPPER_MOTOR_FULL_STEP	
	
	DIO_Write_Pin(STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0, HIGH);
    38aa:	82 e0       	ldi	r24, 0x02	; 2
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	a8 ec       	ldi	r26, 0xC8	; 200
    38ba:	b2 e4       	ldi	r27, 0x42	; 66
    38bc:	8d ab       	std	Y+53, r24	; 0x35
    38be:	9e ab       	std	Y+54, r25	; 0x36
    38c0:	af ab       	std	Y+55, r26	; 0x37
    38c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c4:	6d a9       	ldd	r22, Y+53	; 0x35
    38c6:	7e a9       	ldd	r23, Y+54	; 0x36
    38c8:	8f a9       	ldd	r24, Y+55	; 0x37
    38ca:	98 ad       	ldd	r25, Y+56	; 0x38
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	4a ef       	ldi	r20, 0xFA	; 250
    38d2:	54 e4       	ldi	r21, 0x44	; 68
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	89 ab       	std	Y+49, r24	; 0x31
    38de:	9a ab       	std	Y+50, r25	; 0x32
    38e0:	ab ab       	std	Y+51, r26	; 0x33
    38e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38e4:	69 a9       	ldd	r22, Y+49	; 0x31
    38e6:	7a a9       	ldd	r23, Y+50	; 0x32
    38e8:	8b a9       	ldd	r24, Y+51	; 0x33
    38ea:	9c a9       	ldd	r25, Y+52	; 0x34
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	40 e8       	ldi	r20, 0x80	; 128
    38f2:	5f e3       	ldi	r21, 0x3F	; 63
    38f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f8:	88 23       	and	r24, r24
    38fa:	2c f4       	brge	.+10     	; 0x3906 <Stepper_Motor_Init+0x98>
		__ticks = 1;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	98 ab       	std	Y+48, r25	; 0x30
    3902:	8f a7       	std	Y+47, r24	; 0x2f
    3904:	3f c0       	rjmp	.+126    	; 0x3984 <Stepper_Motor_Init+0x116>
	else if (__tmp > 65535)
    3906:	69 a9       	ldd	r22, Y+49	; 0x31
    3908:	7a a9       	ldd	r23, Y+50	; 0x32
    390a:	8b a9       	ldd	r24, Y+51	; 0x33
    390c:	9c a9       	ldd	r25, Y+52	; 0x34
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	3f ef       	ldi	r19, 0xFF	; 255
    3912:	4f e7       	ldi	r20, 0x7F	; 127
    3914:	57 e4       	ldi	r21, 0x47	; 71
    3916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    391a:	18 16       	cp	r1, r24
    391c:	4c f5       	brge	.+82     	; 0x3970 <Stepper_Motor_Init+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391e:	6d a9       	ldd	r22, Y+53	; 0x35
    3920:	7e a9       	ldd	r23, Y+54	; 0x36
    3922:	8f a9       	ldd	r24, Y+55	; 0x37
    3924:	98 ad       	ldd	r25, Y+56	; 0x38
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e2       	ldi	r20, 0x20	; 32
    392c:	51 e4       	ldi	r21, 0x41	; 65
    392e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	98 ab       	std	Y+48, r25	; 0x30
    3944:	8f a7       	std	Y+47, r24	; 0x2f
    3946:	0f c0       	rjmp	.+30     	; 0x3966 <Stepper_Motor_Init+0xf8>
    3948:	88 ec       	ldi	r24, 0xC8	; 200
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9e a7       	std	Y+46, r25	; 0x2e
    394e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3950:	8d a5       	ldd	r24, Y+45	; 0x2d
    3952:	9e a5       	ldd	r25, Y+46	; 0x2e
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	f1 f7       	brne	.-4      	; 0x3954 <Stepper_Motor_Init+0xe6>
    3958:	9e a7       	std	Y+46, r25	; 0x2e
    395a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395c:	8f a5       	ldd	r24, Y+47	; 0x2f
    395e:	98 a9       	ldd	r25, Y+48	; 0x30
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	98 ab       	std	Y+48, r25	; 0x30
    3964:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3966:	8f a5       	ldd	r24, Y+47	; 0x2f
    3968:	98 a9       	ldd	r25, Y+48	; 0x30
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	69 f7       	brne	.-38     	; 0x3948 <Stepper_Motor_Init+0xda>
    396e:	14 c0       	rjmp	.+40     	; 0x3998 <Stepper_Motor_Init+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3970:	69 a9       	ldd	r22, Y+49	; 0x31
    3972:	7a a9       	ldd	r23, Y+50	; 0x32
    3974:	8b a9       	ldd	r24, Y+51	; 0x33
    3976:	9c a9       	ldd	r25, Y+52	; 0x34
    3978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	98 ab       	std	Y+48, r25	; 0x30
    3982:	8f a7       	std	Y+47, r24	; 0x2f
    3984:	8f a5       	ldd	r24, Y+47	; 0x2f
    3986:	98 a9       	ldd	r25, Y+48	; 0x30
    3988:	9c a7       	std	Y+44, r25	; 0x2c
    398a:	8b a7       	std	Y+43, r24	; 0x2b
    398c:	8b a5       	ldd	r24, Y+43	; 0x2b
    398e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <Stepper_Motor_Init+0x122>
    3994:	9c a7       	std	Y+44, r25	; 0x2c
    3996:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	DIO_Write_Pin(STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0, LOW);
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	
	DIO_Write_Pin(STEPPER_MOTOR_PORT1,STEPPER_MOTOR_PIN1, HIGH);
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	61 e0       	ldi	r22, 0x01	; 1
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	a8 ec       	ldi	r26, 0xC8	; 200
    39b2:	b2 e4       	ldi	r27, 0x42	; 66
    39b4:	8f a3       	std	Y+39, r24	; 0x27
    39b6:	98 a7       	std	Y+40, r25	; 0x28
    39b8:	a9 a7       	std	Y+41, r26	; 0x29
    39ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39bc:	6f a1       	ldd	r22, Y+39	; 0x27
    39be:	78 a5       	ldd	r23, Y+40	; 0x28
    39c0:	89 a5       	ldd	r24, Y+41	; 0x29
    39c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	4a ef       	ldi	r20, 0xFA	; 250
    39ca:	54 e4       	ldi	r21, 0x44	; 68
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8b a3       	std	Y+35, r24	; 0x23
    39d6:	9c a3       	std	Y+36, r25	; 0x24
    39d8:	ad a3       	std	Y+37, r26	; 0x25
    39da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39dc:	6b a1       	ldd	r22, Y+35	; 0x23
    39de:	7c a1       	ldd	r23, Y+36	; 0x24
    39e0:	8d a1       	ldd	r24, Y+37	; 0x25
    39e2:	9e a1       	ldd	r25, Y+38	; 0x26
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f0:	88 23       	and	r24, r24
    39f2:	2c f4       	brge	.+10     	; 0x39fe <Stepper_Motor_Init+0x190>
		__ticks = 1;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9a a3       	std	Y+34, r25	; 0x22
    39fa:	89 a3       	std	Y+33, r24	; 0x21
    39fc:	3f c0       	rjmp	.+126    	; 0x3a7c <Stepper_Motor_Init+0x20e>
	else if (__tmp > 65535)
    39fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3a00:	7c a1       	ldd	r23, Y+36	; 0x24
    3a02:	8d a1       	ldd	r24, Y+37	; 0x25
    3a04:	9e a1       	ldd	r25, Y+38	; 0x26
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	3f ef       	ldi	r19, 0xFF	; 255
    3a0a:	4f e7       	ldi	r20, 0x7F	; 127
    3a0c:	57 e4       	ldi	r21, 0x47	; 71
    3a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a12:	18 16       	cp	r1, r24
    3a14:	4c f5       	brge	.+82     	; 0x3a68 <Stepper_Motor_Init+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a16:	6f a1       	ldd	r22, Y+39	; 0x27
    3a18:	78 a5       	ldd	r23, Y+40	; 0x28
    3a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e2       	ldi	r20, 0x20	; 32
    3a24:	51 e4       	ldi	r21, 0x41	; 65
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9a a3       	std	Y+34, r25	; 0x22
    3a3c:	89 a3       	std	Y+33, r24	; 0x21
    3a3e:	0f c0       	rjmp	.+30     	; 0x3a5e <Stepper_Motor_Init+0x1f0>
    3a40:	88 ec       	ldi	r24, 0xC8	; 200
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	98 a3       	std	Y+32, r25	; 0x20
    3a46:	8f 8f       	std	Y+31, r24	; 0x1f
    3a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a4a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <Stepper_Motor_Init+0x1de>
    3a50:	98 a3       	std	Y+32, r25	; 0x20
    3a52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a54:	89 a1       	ldd	r24, Y+33	; 0x21
    3a56:	9a a1       	ldd	r25, Y+34	; 0x22
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	9a a3       	std	Y+34, r25	; 0x22
    3a5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a60:	9a a1       	ldd	r25, Y+34	; 0x22
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	69 f7       	brne	.-38     	; 0x3a40 <Stepper_Motor_Init+0x1d2>
    3a66:	14 c0       	rjmp	.+40     	; 0x3a90 <Stepper_Motor_Init+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a68:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9a a3       	std	Y+34, r25	; 0x22
    3a7a:	89 a3       	std	Y+33, r24	; 0x21
    3a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a80:	9e 8f       	std	Y+30, r25	; 0x1e
    3a82:	8d 8f       	std	Y+29, r24	; 0x1d
    3a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <Stepper_Motor_Init+0x21a>
    3a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	DIO_Write_Pin(STEPPER_MOTOR_PORT1,STEPPER_MOTOR_PIN1, LOW);
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	61 e0       	ldi	r22, 0x01	; 1
    3a94:	40 e0       	ldi	r20, 0x00	; 0
    3a96:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	
	DIO_Write_Pin(STEPPER_MOTOR_PORT2,STEPPER_MOTOR_PIN2, HIGH);
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
    3a9c:	62 e0       	ldi	r22, 0x02	; 2
    3a9e:	41 e0       	ldi	r20, 0x01	; 1
    3aa0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	a8 ec       	ldi	r26, 0xC8	; 200
    3aaa:	b2 e4       	ldi	r27, 0x42	; 66
    3aac:	89 8f       	std	Y+25, r24	; 0x19
    3aae:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ab2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	4a ef       	ldi	r20, 0xFA	; 250
    3ac2:	54 e4       	ldi	r21, 0x44	; 68
    3ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	8d 8b       	std	Y+21, r24	; 0x15
    3ace:	9e 8b       	std	Y+22, r25	; 0x16
    3ad0:	af 8b       	std	Y+23, r26	; 0x17
    3ad2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    3ada:	98 8d       	ldd	r25, Y+24	; 0x18
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e8       	ldi	r20, 0x80	; 128
    3ae2:	5f e3       	ldi	r21, 0x3F	; 63
    3ae4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ae8:	88 23       	and	r24, r24
    3aea:	2c f4       	brge	.+10     	; 0x3af6 <Stepper_Motor_Init+0x288>
		__ticks = 1;
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	9c 8b       	std	Y+20, r25	; 0x14
    3af2:	8b 8b       	std	Y+19, r24	; 0x13
    3af4:	3f c0       	rjmp	.+126    	; 0x3b74 <Stepper_Motor_Init+0x306>
	else if (__tmp > 65535)
    3af6:	6d 89       	ldd	r22, Y+21	; 0x15
    3af8:	7e 89       	ldd	r23, Y+22	; 0x16
    3afa:	8f 89       	ldd	r24, Y+23	; 0x17
    3afc:	98 8d       	ldd	r25, Y+24	; 0x18
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	3f ef       	ldi	r19, 0xFF	; 255
    3b02:	4f e7       	ldi	r20, 0x7F	; 127
    3b04:	57 e4       	ldi	r21, 0x47	; 71
    3b06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b0a:	18 16       	cp	r1, r24
    3b0c:	4c f5       	brge	.+82     	; 0x3b60 <Stepper_Motor_Init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e2       	ldi	r20, 0x20	; 32
    3b1c:	51 e4       	ldi	r21, 0x41	; 65
    3b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	9c 8b       	std	Y+20, r25	; 0x14
    3b34:	8b 8b       	std	Y+19, r24	; 0x13
    3b36:	0f c0       	rjmp	.+30     	; 0x3b56 <Stepper_Motor_Init+0x2e8>
    3b38:	88 ec       	ldi	r24, 0xC8	; 200
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	9a 8b       	std	Y+18, r25	; 0x12
    3b3e:	89 8b       	std	Y+17, r24	; 0x11
    3b40:	89 89       	ldd	r24, Y+17	; 0x11
    3b42:	9a 89       	ldd	r25, Y+18	; 0x12
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <Stepper_Motor_Init+0x2d6>
    3b48:	9a 8b       	std	Y+18, r25	; 0x12
    3b4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	9c 8b       	std	Y+20, r25	; 0x14
    3b54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b56:	8b 89       	ldd	r24, Y+19	; 0x13
    3b58:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	69 f7       	brne	.-38     	; 0x3b38 <Stepper_Motor_Init+0x2ca>
    3b5e:	14 c0       	rjmp	.+40     	; 0x3b88 <Stepper_Motor_Init+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b60:	6d 89       	ldd	r22, Y+21	; 0x15
    3b62:	7e 89       	ldd	r23, Y+22	; 0x16
    3b64:	8f 89       	ldd	r24, Y+23	; 0x17
    3b66:	98 8d       	ldd	r25, Y+24	; 0x18
    3b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9c 89       	ldd	r25, Y+20	; 0x14
    3b78:	98 8b       	std	Y+16, r25	; 0x10
    3b7a:	8f 87       	std	Y+15, r24	; 0x0f
    3b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b7e:	98 89       	ldd	r25, Y+16	; 0x10
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <Stepper_Motor_Init+0x312>
    3b84:	98 8b       	std	Y+16, r25	; 0x10
    3b86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	DIO_Write_Pin(STEPPER_MOTOR_PORT2,STEPPER_MOTOR_PIN2, LOW);
    3b88:	82 e0       	ldi	r24, 0x02	; 2
    3b8a:	62 e0       	ldi	r22, 0x02	; 2
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>

	DIO_Write_Pin(STEPPER_MOTOR_PORT3,STEPPER_MOTOR_PIN3, HIGH);
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	63 e0       	ldi	r22, 0x03	; 3
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ba2:	b2 e4       	ldi	r27, 0x42	; 66
    3ba4:	8b 87       	std	Y+11, r24	; 0x0b
    3ba6:	9c 87       	std	Y+12, r25	; 0x0c
    3ba8:	ad 87       	std	Y+13, r26	; 0x0d
    3baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a ef       	ldi	r20, 0xFA	; 250
    3bba:	54 e4       	ldi	r21, 0x44	; 68
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8f 83       	std	Y+7, r24	; 0x07
    3bc6:	98 87       	std	Y+8, r25	; 0x08
    3bc8:	a9 87       	std	Y+9, r26	; 0x09
    3bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bce:	78 85       	ldd	r23, Y+8	; 0x08
    3bd0:	89 85       	ldd	r24, Y+9	; 0x09
    3bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f e3       	ldi	r21, 0x3F	; 63
    3bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be0:	88 23       	and	r24, r24
    3be2:	2c f4       	brge	.+10     	; 0x3bee <Stepper_Motor_Init+0x380>
		__ticks = 1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9e 83       	std	Y+6, r25	; 0x06
    3bea:	8d 83       	std	Y+5, r24	; 0x05
    3bec:	3f c0       	rjmp	.+126    	; 0x3c6c <Stepper_Motor_Init+0x3fe>
	else if (__tmp > 65535)
    3bee:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf0:	78 85       	ldd	r23, Y+8	; 0x08
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c02:	18 16       	cp	r1, r24
    3c04:	4c f5       	brge	.+82     	; 0x3c58 <Stepper_Motor_Init+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e2       	ldi	r20, 0x20	; 32
    3c14:	51 e4       	ldi	r21, 0x41	; 65
    3c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9e 83       	std	Y+6, r25	; 0x06
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <Stepper_Motor_Init+0x3e0>
    3c30:	88 ec       	ldi	r24, 0xC8	; 200
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <Stepper_Motor_Init+0x3ce>
    3c40:	9c 83       	std	Y+4, r25	; 0x04
    3c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c50:	9e 81       	ldd	r25, Y+6	; 0x06
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <Stepper_Motor_Init+0x3c2>
    3c56:	14 c0       	rjmp	.+40     	; 0x3c80 <Stepper_Motor_Init+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c58:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5a:	78 85       	ldd	r23, Y+8	; 0x08
    3c5c:	89 85       	ldd	r24, Y+9	; 0x09
    3c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9e 83       	std	Y+6, r25	; 0x06
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <Stepper_Motor_Init+0x40a>
    3c7c:	9a 83       	std	Y+2, r25	; 0x02
    3c7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	DIO_Write_Pin(STEPPER_MOTOR_PORT3,STEPPER_MOTOR_PIN3, LOW);
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	63 e0       	ldi	r22, 0x03	; 3
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin(STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0, HIGH); // 1001
	_delay_ms(100);
	DIO_Write_Pin(STEPPER_MOTOR_PORT3,STEPPER_MOTOR_PIN3, LOW);  // 0001

#endif
}
    3c8a:	e8 96       	adiw	r28, 0x38	; 56
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <Stepper_Motor_GoForward>:

void Stepper_Motor_GoForward() 
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	ea 97       	sbiw	r28, 0x3a	; 58
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
	// Turn One Side CCW
	for (int j=0; j<48; j++)
    3cb0:	1a ae       	std	Y+58, r1	; 0x3a
    3cb2:	19 ae       	std	Y+57, r1	; 0x39
    3cb4:	1d c2       	rjmp	.+1082   	; 0x40f0 <Stepper_Motor_GoForward+0x454>
	{
		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , LOW   ) ;
    3cb6:	82 e0       	ldi	r24, 0x02	; 2
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH  ) ;
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	61 e0       	ldi	r22, 0x01	; 1
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
    3cca:	82 e0       	ldi	r24, 0x02	; 2
    3ccc:	62 e0       	ldi	r22, 0x02	; 2
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH  ) ;
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	63 e0       	ldi	r22, 0x03	; 3
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a0 e0       	ldi	r26, 0x00	; 0
    3ce4:	b0 e4       	ldi	r27, 0x40	; 64
    3ce6:	8d ab       	std	Y+53, r24	; 0x35
    3ce8:	9e ab       	std	Y+54, r25	; 0x36
    3cea:	af ab       	std	Y+55, r26	; 0x37
    3cec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	6d a9       	ldd	r22, Y+53	; 0x35
    3cf0:	7e a9       	ldd	r23, Y+54	; 0x36
    3cf2:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf4:	98 ad       	ldd	r25, Y+56	; 0x38
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a ef       	ldi	r20, 0xFA	; 250
    3cfc:	54 e4       	ldi	r21, 0x44	; 68
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	89 ab       	std	Y+49, r24	; 0x31
    3d08:	9a ab       	std	Y+50, r25	; 0x32
    3d0a:	ab ab       	std	Y+51, r26	; 0x33
    3d0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d0e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d10:	7a a9       	ldd	r23, Y+50	; 0x32
    3d12:	8b a9       	ldd	r24, Y+51	; 0x33
    3d14:	9c a9       	ldd	r25, Y+52	; 0x34
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <Stepper_Motor_GoForward+0x94>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	98 ab       	std	Y+48, r25	; 0x30
    3d2c:	8f a7       	std	Y+47, r24	; 0x2f
    3d2e:	3f c0       	rjmp	.+126    	; 0x3dae <Stepper_Motor_GoForward+0x112>
	else if (__tmp > 65535)
    3d30:	69 a9       	ldd	r22, Y+49	; 0x31
    3d32:	7a a9       	ldd	r23, Y+50	; 0x32
    3d34:	8b a9       	ldd	r24, Y+51	; 0x33
    3d36:	9c a9       	ldd	r25, Y+52	; 0x34
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	4c f5       	brge	.+82     	; 0x3d9a <Stepper_Motor_GoForward+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	6d a9       	ldd	r22, Y+53	; 0x35
    3d4a:	7e a9       	ldd	r23, Y+54	; 0x36
    3d4c:	8f a9       	ldd	r24, Y+55	; 0x37
    3d4e:	98 ad       	ldd	r25, Y+56	; 0x38
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	98 ab       	std	Y+48, r25	; 0x30
    3d6e:	8f a7       	std	Y+47, r24	; 0x2f
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <Stepper_Motor_GoForward+0xf4>
    3d72:	88 ec       	ldi	r24, 0xC8	; 200
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9e a7       	std	Y+46, r25	; 0x2e
    3d78:	8d a7       	std	Y+45, r24	; 0x2d
    3d7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <Stepper_Motor_GoForward+0xe2>
    3d82:	9e a7       	std	Y+46, r25	; 0x2e
    3d84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d88:	98 a9       	ldd	r25, Y+48	; 0x30
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	98 ab       	std	Y+48, r25	; 0x30
    3d8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d92:	98 a9       	ldd	r25, Y+48	; 0x30
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <Stepper_Motor_GoForward+0xd6>
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <Stepper_Motor_GoForward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3da0:	9c a9       	ldd	r25, Y+52	; 0x34
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	98 ab       	std	Y+48, r25	; 0x30
    3dac:	8f a7       	std	Y+47, r24	; 0x2f
    3dae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3db0:	98 a9       	ldd	r25, Y+48	; 0x30
    3db2:	9c a7       	std	Y+44, r25	; 0x2c
    3db4:	8b a7       	std	Y+43, r24	; 0x2b
    3db6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3db8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <Stepper_Motor_GoForward+0x11e>
    3dbe:	9c a7       	std	Y+44, r25	; 0x2c
    3dc0:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH  ) ;
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	41 e0       	ldi	r20, 0x01	; 1
    3dc8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , LOW   ) ;
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	62 e0       	ldi	r22, 0x02	; 2
    3dda:	41 e0       	ldi	r20, 0x01	; 1
    3ddc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH  ) ;
    3de0:	82 e0       	ldi	r24, 0x02	; 2
    3de2:	63 e0       	ldi	r22, 0x03	; 3
    3de4:	41 e0       	ldi	r20, 0x01	; 1
    3de6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	a0 e0       	ldi	r26, 0x00	; 0
    3df0:	b0 e4       	ldi	r27, 0x40	; 64
    3df2:	8f a3       	std	Y+39, r24	; 0x27
    3df4:	98 a7       	std	Y+40, r25	; 0x28
    3df6:	a9 a7       	std	Y+41, r26	; 0x29
    3df8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfa:	6f a1       	ldd	r22, Y+39	; 0x27
    3dfc:	78 a5       	ldd	r23, Y+40	; 0x28
    3dfe:	89 a5       	ldd	r24, Y+41	; 0x29
    3e00:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	4a ef       	ldi	r20, 0xFA	; 250
    3e08:	54 e4       	ldi	r21, 0x44	; 68
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	8b a3       	std	Y+35, r24	; 0x23
    3e14:	9c a3       	std	Y+36, r25	; 0x24
    3e16:	ad a3       	std	Y+37, r26	; 0x25
    3e18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e20:	9e a1       	ldd	r25, Y+38	; 0x26
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e8       	ldi	r20, 0x80	; 128
    3e28:	5f e3       	ldi	r21, 0x3F	; 63
    3e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2e:	88 23       	and	r24, r24
    3e30:	2c f4       	brge	.+10     	; 0x3e3c <Stepper_Motor_GoForward+0x1a0>
		__ticks = 1;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	9a a3       	std	Y+34, r25	; 0x22
    3e38:	89 a3       	std	Y+33, r24	; 0x21
    3e3a:	3f c0       	rjmp	.+126    	; 0x3eba <Stepper_Motor_GoForward+0x21e>
	else if (__tmp > 65535)
    3e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e40:	8d a1       	ldd	r24, Y+37	; 0x25
    3e42:	9e a1       	ldd	r25, Y+38	; 0x26
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	3f ef       	ldi	r19, 0xFF	; 255
    3e48:	4f e7       	ldi	r20, 0x7F	; 127
    3e4a:	57 e4       	ldi	r21, 0x47	; 71
    3e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e50:	18 16       	cp	r1, r24
    3e52:	4c f5       	brge	.+82     	; 0x3ea6 <Stepper_Motor_GoForward+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e54:	6f a1       	ldd	r22, Y+39	; 0x27
    3e56:	78 a5       	ldd	r23, Y+40	; 0x28
    3e58:	89 a5       	ldd	r24, Y+41	; 0x29
    3e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e2       	ldi	r20, 0x20	; 32
    3e62:	51 e4       	ldi	r21, 0x41	; 65
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	9a a3       	std	Y+34, r25	; 0x22
    3e7a:	89 a3       	std	Y+33, r24	; 0x21
    3e7c:	0f c0       	rjmp	.+30     	; 0x3e9c <Stepper_Motor_GoForward+0x200>
    3e7e:	88 ec       	ldi	r24, 0xC8	; 200
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	98 a3       	std	Y+32, r25	; 0x20
    3e84:	8f 8f       	std	Y+31, r24	; 0x1f
    3e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e88:	98 a1       	ldd	r25, Y+32	; 0x20
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <Stepper_Motor_GoForward+0x1ee>
    3e8e:	98 a3       	std	Y+32, r25	; 0x20
    3e90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e92:	89 a1       	ldd	r24, Y+33	; 0x21
    3e94:	9a a1       	ldd	r25, Y+34	; 0x22
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	9a a3       	std	Y+34, r25	; 0x22
    3e9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	69 f7       	brne	.-38     	; 0x3e7e <Stepper_Motor_GoForward+0x1e2>
    3ea4:	14 c0       	rjmp	.+40     	; 0x3ece <Stepper_Motor_GoForward+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    3eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    3eac:	9e a1       	ldd	r25, Y+38	; 0x26
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9a a3       	std	Y+34, r25	; 0x22
    3eb8:	89 a3       	std	Y+33, r24	; 0x21
    3eba:	89 a1       	ldd	r24, Y+33	; 0x21
    3ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ebe:	9e 8f       	std	Y+30, r25	; 0x1e
    3ec0:	8d 8f       	std	Y+29, r24	; 0x1d
    3ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ec4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <Stepper_Motor_GoForward+0x22a>
    3eca:	9e 8f       	std	Y+30, r25	; 0x1e
    3ecc:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH  ) ;
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH  ) ;
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	61 e0       	ldi	r22, 0x01	; 1
    3edc:	41 e0       	ldi	r20, 0x01	; 1
    3ede:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , LOW   ) ;
    3ee2:	82 e0       	ldi	r24, 0x02	; 2
    3ee4:	62 e0       	ldi	r22, 0x02	; 2
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH  ) ;
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	63 e0       	ldi	r22, 0x03	; 3
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	a0 e0       	ldi	r26, 0x00	; 0
    3efc:	b0 e4       	ldi	r27, 0x40	; 64
    3efe:	89 8f       	std	Y+25, r24	; 0x19
    3f00:	9a 8f       	std	Y+26, r25	; 0x1a
    3f02:	ab 8f       	std	Y+27, r26	; 0x1b
    3f04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f06:	69 8d       	ldd	r22, Y+25	; 0x19
    3f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	4a ef       	ldi	r20, 0xFA	; 250
    3f14:	54 e4       	ldi	r21, 0x44	; 68
    3f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	8d 8b       	std	Y+21, r24	; 0x15
    3f20:	9e 8b       	std	Y+22, r25	; 0x16
    3f22:	af 8b       	std	Y+23, r26	; 0x17
    3f24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f26:	6d 89       	ldd	r22, Y+21	; 0x15
    3f28:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e8       	ldi	r20, 0x80	; 128
    3f34:	5f e3       	ldi	r21, 0x3F	; 63
    3f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f3a:	88 23       	and	r24, r24
    3f3c:	2c f4       	brge	.+10     	; 0x3f48 <Stepper_Motor_GoForward+0x2ac>
		__ticks = 1;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9c 8b       	std	Y+20, r25	; 0x14
    3f44:	8b 8b       	std	Y+19, r24	; 0x13
    3f46:	3f c0       	rjmp	.+126    	; 0x3fc6 <Stepper_Motor_GoForward+0x32a>
	else if (__tmp > 65535)
    3f48:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f e7       	ldi	r20, 0x7F	; 127
    3f56:	57 e4       	ldi	r21, 0x47	; 71
    3f58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f5c:	18 16       	cp	r1, r24
    3f5e:	4c f5       	brge	.+82     	; 0x3fb2 <Stepper_Motor_GoForward+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f60:	69 8d       	ldd	r22, Y+25	; 0x19
    3f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e2       	ldi	r20, 0x20	; 32
    3f6e:	51 e4       	ldi	r21, 0x41	; 65
    3f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	bc 01       	movw	r22, r24
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9c 8b       	std	Y+20, r25	; 0x14
    3f86:	8b 8b       	std	Y+19, r24	; 0x13
    3f88:	0f c0       	rjmp	.+30     	; 0x3fa8 <Stepper_Motor_GoForward+0x30c>
    3f8a:	88 ec       	ldi	r24, 0xC8	; 200
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	9a 8b       	std	Y+18, r25	; 0x12
    3f90:	89 8b       	std	Y+17, r24	; 0x11
    3f92:	89 89       	ldd	r24, Y+17	; 0x11
    3f94:	9a 89       	ldd	r25, Y+18	; 0x12
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <Stepper_Motor_GoForward+0x2fa>
    3f9a:	9a 8b       	std	Y+18, r25	; 0x12
    3f9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	9c 8b       	std	Y+20, r25	; 0x14
    3fa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3faa:	9c 89       	ldd	r25, Y+20	; 0x14
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	69 f7       	brne	.-38     	; 0x3f8a <Stepper_Motor_GoForward+0x2ee>
    3fb0:	14 c0       	rjmp	.+40     	; 0x3fda <Stepper_Motor_GoForward+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9c 8b       	std	Y+20, r25	; 0x14
    3fc4:	8b 8b       	std	Y+19, r24	; 0x13
    3fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fca:	98 8b       	std	Y+16, r25	; 0x10
    3fcc:	8f 87       	std	Y+15, r24	; 0x0f
    3fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd0:	98 89       	ldd	r25, Y+16	; 0x10
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <Stepper_Motor_GoForward+0x336>
    3fd6:	98 8b       	std	Y+16, r25	; 0x10
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH  ) ;
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH  ) ;
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	61 e0       	ldi	r22, 0x01	; 1
    3fe8:	41 e0       	ldi	r20, 0x01	; 1
    3fea:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	62 e0       	ldi	r22, 0x02	; 2
    3ff2:	41 e0       	ldi	r20, 0x01	; 1
    3ff4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , LOW   ) ;
    3ff8:	82 e0       	ldi	r24, 0x02	; 2
    3ffa:	63 e0       	ldi	r22, 0x03	; 3
    3ffc:	40 e0       	ldi	r20, 0x00	; 0
    3ffe:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	a0 e0       	ldi	r26, 0x00	; 0
    4008:	b0 e4       	ldi	r27, 0x40	; 64
    400a:	8b 87       	std	Y+11, r24	; 0x0b
    400c:	9c 87       	std	Y+12, r25	; 0x0c
    400e:	ad 87       	std	Y+13, r26	; 0x0d
    4010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4012:	6b 85       	ldd	r22, Y+11	; 0x0b
    4014:	7c 85       	ldd	r23, Y+12	; 0x0c
    4016:	8d 85       	ldd	r24, Y+13	; 0x0d
    4018:	9e 85       	ldd	r25, Y+14	; 0x0e
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	4a ef       	ldi	r20, 0xFA	; 250
    4020:	54 e4       	ldi	r21, 0x44	; 68
    4022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	8f 83       	std	Y+7, r24	; 0x07
    402c:	98 87       	std	Y+8, r25	; 0x08
    402e:	a9 87       	std	Y+9, r26	; 0x09
    4030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4032:	6f 81       	ldd	r22, Y+7	; 0x07
    4034:	78 85       	ldd	r23, Y+8	; 0x08
    4036:	89 85       	ldd	r24, Y+9	; 0x09
    4038:	9a 85       	ldd	r25, Y+10	; 0x0a
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e8       	ldi	r20, 0x80	; 128
    4040:	5f e3       	ldi	r21, 0x3F	; 63
    4042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4046:	88 23       	and	r24, r24
    4048:	2c f4       	brge	.+10     	; 0x4054 <Stepper_Motor_GoForward+0x3b8>
		__ticks = 1;
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9e 83       	std	Y+6, r25	; 0x06
    4050:	8d 83       	std	Y+5, r24	; 0x05
    4052:	3f c0       	rjmp	.+126    	; 0x40d2 <Stepper_Motor_GoForward+0x436>
	else if (__tmp > 65535)
    4054:	6f 81       	ldd	r22, Y+7	; 0x07
    4056:	78 85       	ldd	r23, Y+8	; 0x08
    4058:	89 85       	ldd	r24, Y+9	; 0x09
    405a:	9a 85       	ldd	r25, Y+10	; 0x0a
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	3f ef       	ldi	r19, 0xFF	; 255
    4060:	4f e7       	ldi	r20, 0x7F	; 127
    4062:	57 e4       	ldi	r21, 0x47	; 71
    4064:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4068:	18 16       	cp	r1, r24
    406a:	4c f5       	brge	.+82     	; 0x40be <Stepper_Motor_GoForward+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    406c:	6b 85       	ldd	r22, Y+11	; 0x0b
    406e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4070:	8d 85       	ldd	r24, Y+13	; 0x0d
    4072:	9e 85       	ldd	r25, Y+14	; 0x0e
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	51 e4       	ldi	r21, 0x41	; 65
    407c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	bc 01       	movw	r22, r24
    4086:	cd 01       	movw	r24, r26
    4088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	9e 83       	std	Y+6, r25	; 0x06
    4092:	8d 83       	std	Y+5, r24	; 0x05
    4094:	0f c0       	rjmp	.+30     	; 0x40b4 <Stepper_Motor_GoForward+0x418>
    4096:	88 ec       	ldi	r24, 0xC8	; 200
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
    409e:	8b 81       	ldd	r24, Y+3	; 0x03
    40a0:	9c 81       	ldd	r25, Y+4	; 0x04
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <Stepper_Motor_GoForward+0x406>
    40a6:	9c 83       	std	Y+4, r25	; 0x04
    40a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
    40ac:	9e 81       	ldd	r25, Y+6	; 0x06
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b4:	8d 81       	ldd	r24, Y+5	; 0x05
    40b6:	9e 81       	ldd	r25, Y+6	; 0x06
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	69 f7       	brne	.-38     	; 0x4096 <Stepper_Motor_GoForward+0x3fa>
    40bc:	14 c0       	rjmp	.+40     	; 0x40e6 <Stepper_Motor_GoForward+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40be:	6f 81       	ldd	r22, Y+7	; 0x07
    40c0:	78 85       	ldd	r23, Y+8	; 0x08
    40c2:	89 85       	ldd	r24, Y+9	; 0x09
    40c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	9e 83       	std	Y+6, r25	; 0x06
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	8d 81       	ldd	r24, Y+5	; 0x05
    40d4:	9e 81       	ldd	r25, Y+6	; 0x06
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	9a 81       	ldd	r25, Y+2	; 0x02
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <Stepper_Motor_GoForward+0x442>
    40e2:	9a 83       	std	Y+2, r25	; 0x02
    40e4:	89 83       	std	Y+1, r24	; 0x01
}

void Stepper_Motor_GoForward() 
{
	// Turn One Side CCW
	for (int j=0; j<48; j++)
    40e6:	89 ad       	ldd	r24, Y+57	; 0x39
    40e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    40ea:	01 96       	adiw	r24, 0x01	; 1
    40ec:	9a af       	std	Y+58, r25	; 0x3a
    40ee:	89 af       	std	Y+57, r24	; 0x39
    40f0:	89 ad       	ldd	r24, Y+57	; 0x39
    40f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    40f4:	80 33       	cpi	r24, 0x30	; 48
    40f6:	91 05       	cpc	r25, r1
    40f8:	0c f4       	brge	.+2      	; 0x40fc <Stepper_Motor_GoForward+0x460>
    40fa:	dd cd       	rjmp	.-1094   	; 0x3cb6 <Stepper_Motor_GoForward+0x1a>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , LOW   ) ;

		_delay_ms( 2 ) ;
	}
}
    40fc:	ea 96       	adiw	r28, 0x3a	; 58
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <Stepper_Motor_GoBackward>:
void Stepper_Motor_GoBackward() 
{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	ea 97       	sbiw	r28, 0x3a	; 58
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
	// Turn The Other Side CCW
	for (int j=0 ; j<48 ; j++)
    4122:	1a ae       	std	Y+58, r1	; 0x3a
    4124:	19 ae       	std	Y+57, r1	; 0x39
    4126:	1d c2       	rjmp	.+1082   	; 0x4562 <Stepper_Motor_GoBackward+0x454>
	{
		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH   ) ;
    4128:	82 e0       	ldi	r24, 0x02	; 2
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	41 e0       	ldi	r20, 0x01	; 1
    412e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH  ) ;
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	61 e0       	ldi	r22, 0x01	; 1
    4136:	41 e0       	ldi	r20, 0x01	; 1
    4138:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
    413c:	82 e0       	ldi	r24, 0x02	; 2
    413e:	62 e0       	ldi	r22, 0x02	; 2
    4140:	41 e0       	ldi	r20, 0x01	; 1
    4142:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , LOW  ) ;
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	63 e0       	ldi	r22, 0x03	; 3
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	a0 e0       	ldi	r26, 0x00	; 0
    4156:	b0 e4       	ldi	r27, 0x40	; 64
    4158:	8d ab       	std	Y+53, r24	; 0x35
    415a:	9e ab       	std	Y+54, r25	; 0x36
    415c:	af ab       	std	Y+55, r26	; 0x37
    415e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4160:	6d a9       	ldd	r22, Y+53	; 0x35
    4162:	7e a9       	ldd	r23, Y+54	; 0x36
    4164:	8f a9       	ldd	r24, Y+55	; 0x37
    4166:	98 ad       	ldd	r25, Y+56	; 0x38
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	4a ef       	ldi	r20, 0xFA	; 250
    416e:	54 e4       	ldi	r21, 0x44	; 68
    4170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	89 ab       	std	Y+49, r24	; 0x31
    417a:	9a ab       	std	Y+50, r25	; 0x32
    417c:	ab ab       	std	Y+51, r26	; 0x33
    417e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4180:	69 a9       	ldd	r22, Y+49	; 0x31
    4182:	7a a9       	ldd	r23, Y+50	; 0x32
    4184:	8b a9       	ldd	r24, Y+51	; 0x33
    4186:	9c a9       	ldd	r25, Y+52	; 0x34
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e8       	ldi	r20, 0x80	; 128
    418e:	5f e3       	ldi	r21, 0x3F	; 63
    4190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4194:	88 23       	and	r24, r24
    4196:	2c f4       	brge	.+10     	; 0x41a2 <Stepper_Motor_GoBackward+0x94>
		__ticks = 1;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	98 ab       	std	Y+48, r25	; 0x30
    419e:	8f a7       	std	Y+47, r24	; 0x2f
    41a0:	3f c0       	rjmp	.+126    	; 0x4220 <Stepper_Motor_GoBackward+0x112>
	else if (__tmp > 65535)
    41a2:	69 a9       	ldd	r22, Y+49	; 0x31
    41a4:	7a a9       	ldd	r23, Y+50	; 0x32
    41a6:	8b a9       	ldd	r24, Y+51	; 0x33
    41a8:	9c a9       	ldd	r25, Y+52	; 0x34
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	3f ef       	ldi	r19, 0xFF	; 255
    41ae:	4f e7       	ldi	r20, 0x7F	; 127
    41b0:	57 e4       	ldi	r21, 0x47	; 71
    41b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b6:	18 16       	cp	r1, r24
    41b8:	4c f5       	brge	.+82     	; 0x420c <Stepper_Motor_GoBackward+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ba:	6d a9       	ldd	r22, Y+53	; 0x35
    41bc:	7e a9       	ldd	r23, Y+54	; 0x36
    41be:	8f a9       	ldd	r24, Y+55	; 0x37
    41c0:	98 ad       	ldd	r25, Y+56	; 0x38
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e2       	ldi	r20, 0x20	; 32
    41c8:	51 e4       	ldi	r21, 0x41	; 65
    41ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	bc 01       	movw	r22, r24
    41d4:	cd 01       	movw	r24, r26
    41d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41da:	dc 01       	movw	r26, r24
    41dc:	cb 01       	movw	r24, r22
    41de:	98 ab       	std	Y+48, r25	; 0x30
    41e0:	8f a7       	std	Y+47, r24	; 0x2f
    41e2:	0f c0       	rjmp	.+30     	; 0x4202 <Stepper_Motor_GoBackward+0xf4>
    41e4:	88 ec       	ldi	r24, 0xC8	; 200
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	9e a7       	std	Y+46, r25	; 0x2e
    41ea:	8d a7       	std	Y+45, r24	; 0x2d
    41ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    41ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	f1 f7       	brne	.-4      	; 0x41f0 <Stepper_Motor_GoBackward+0xe2>
    41f4:	9e a7       	std	Y+46, r25	; 0x2e
    41f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41fa:	98 a9       	ldd	r25, Y+48	; 0x30
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	98 ab       	std	Y+48, r25	; 0x30
    4200:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4202:	8f a5       	ldd	r24, Y+47	; 0x2f
    4204:	98 a9       	ldd	r25, Y+48	; 0x30
    4206:	00 97       	sbiw	r24, 0x00	; 0
    4208:	69 f7       	brne	.-38     	; 0x41e4 <Stepper_Motor_GoBackward+0xd6>
    420a:	14 c0       	rjmp	.+40     	; 0x4234 <Stepper_Motor_GoBackward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420c:	69 a9       	ldd	r22, Y+49	; 0x31
    420e:	7a a9       	ldd	r23, Y+50	; 0x32
    4210:	8b a9       	ldd	r24, Y+51	; 0x33
    4212:	9c a9       	ldd	r25, Y+52	; 0x34
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	98 ab       	std	Y+48, r25	; 0x30
    421e:	8f a7       	std	Y+47, r24	; 0x2f
    4220:	8f a5       	ldd	r24, Y+47	; 0x2f
    4222:	98 a9       	ldd	r25, Y+48	; 0x30
    4224:	9c a7       	std	Y+44, r25	; 0x2c
    4226:	8b a7       	std	Y+43, r24	; 0x2b
    4228:	8b a5       	ldd	r24, Y+43	; 0x2b
    422a:	9c a5       	ldd	r25, Y+44	; 0x2c
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	f1 f7       	brne	.-4      	; 0x422c <Stepper_Motor_GoBackward+0x11e>
    4230:	9c a7       	std	Y+44, r25	; 0x2c
    4232:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH  ) ;
    4234:	82 e0       	ldi	r24, 0x02	; 2
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH   ) ;
    423e:	82 e0       	ldi	r24, 0x02	; 2
    4240:	61 e0       	ldi	r22, 0x01	; 1
    4242:	41 e0       	ldi	r20, 0x01	; 1
    4244:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , LOW  ) ;
    4248:	82 e0       	ldi	r24, 0x02	; 2
    424a:	62 e0       	ldi	r22, 0x02	; 2
    424c:	40 e0       	ldi	r20, 0x00	; 0
    424e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH  ) ;
    4252:	82 e0       	ldi	r24, 0x02	; 2
    4254:	63 e0       	ldi	r22, 0x03	; 3
    4256:	41 e0       	ldi	r20, 0x01	; 1
    4258:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	a0 e0       	ldi	r26, 0x00	; 0
    4262:	b0 e4       	ldi	r27, 0x40	; 64
    4264:	8f a3       	std	Y+39, r24	; 0x27
    4266:	98 a7       	std	Y+40, r25	; 0x28
    4268:	a9 a7       	std	Y+41, r26	; 0x29
    426a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    426c:	6f a1       	ldd	r22, Y+39	; 0x27
    426e:	78 a5       	ldd	r23, Y+40	; 0x28
    4270:	89 a5       	ldd	r24, Y+41	; 0x29
    4272:	9a a5       	ldd	r25, Y+42	; 0x2a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a ef       	ldi	r20, 0xFA	; 250
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	8b a3       	std	Y+35, r24	; 0x23
    4286:	9c a3       	std	Y+36, r25	; 0x24
    4288:	ad a3       	std	Y+37, r26	; 0x25
    428a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    428c:	6b a1       	ldd	r22, Y+35	; 0x23
    428e:	7c a1       	ldd	r23, Y+36	; 0x24
    4290:	8d a1       	ldd	r24, Y+37	; 0x25
    4292:	9e a1       	ldd	r25, Y+38	; 0x26
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	2c f4       	brge	.+10     	; 0x42ae <Stepper_Motor_GoBackward+0x1a0>
		__ticks = 1;
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	9a a3       	std	Y+34, r25	; 0x22
    42aa:	89 a3       	std	Y+33, r24	; 0x21
    42ac:	3f c0       	rjmp	.+126    	; 0x432c <Stepper_Motor_GoBackward+0x21e>
	else if (__tmp > 65535)
    42ae:	6b a1       	ldd	r22, Y+35	; 0x23
    42b0:	7c a1       	ldd	r23, Y+36	; 0x24
    42b2:	8d a1       	ldd	r24, Y+37	; 0x25
    42b4:	9e a1       	ldd	r25, Y+38	; 0x26
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	4c f5       	brge	.+82     	; 0x4318 <Stepper_Motor_GoBackward+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c6:	6f a1       	ldd	r22, Y+39	; 0x27
    42c8:	78 a5       	ldd	r23, Y+40	; 0x28
    42ca:	89 a5       	ldd	r24, Y+41	; 0x29
    42cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e2       	ldi	r20, 0x20	; 32
    42d4:	51 e4       	ldi	r21, 0x41	; 65
    42d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	bc 01       	movw	r22, r24
    42e0:	cd 01       	movw	r24, r26
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9a a3       	std	Y+34, r25	; 0x22
    42ec:	89 a3       	std	Y+33, r24	; 0x21
    42ee:	0f c0       	rjmp	.+30     	; 0x430e <Stepper_Motor_GoBackward+0x200>
    42f0:	88 ec       	ldi	r24, 0xC8	; 200
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	98 a3       	std	Y+32, r25	; 0x20
    42f6:	8f 8f       	std	Y+31, r24	; 0x1f
    42f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42fa:	98 a1       	ldd	r25, Y+32	; 0x20
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <Stepper_Motor_GoBackward+0x1ee>
    4300:	98 a3       	std	Y+32, r25	; 0x20
    4302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4304:	89 a1       	ldd	r24, Y+33	; 0x21
    4306:	9a a1       	ldd	r25, Y+34	; 0x22
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	9a a3       	std	Y+34, r25	; 0x22
    430c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430e:	89 a1       	ldd	r24, Y+33	; 0x21
    4310:	9a a1       	ldd	r25, Y+34	; 0x22
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	69 f7       	brne	.-38     	; 0x42f0 <Stepper_Motor_GoBackward+0x1e2>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <Stepper_Motor_GoBackward+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4318:	6b a1       	ldd	r22, Y+35	; 0x23
    431a:	7c a1       	ldd	r23, Y+36	; 0x24
    431c:	8d a1       	ldd	r24, Y+37	; 0x25
    431e:	9e a1       	ldd	r25, Y+38	; 0x26
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9a a3       	std	Y+34, r25	; 0x22
    432a:	89 a3       	std	Y+33, r24	; 0x21
    432c:	89 a1       	ldd	r24, Y+33	; 0x21
    432e:	9a a1       	ldd	r25, Y+34	; 0x22
    4330:	9e 8f       	std	Y+30, r25	; 0x1e
    4332:	8d 8f       	std	Y+29, r24	; 0x1d
    4334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <Stepper_Motor_GoBackward+0x22a>
    433c:	9e 8f       	std	Y+30, r25	; 0x1e
    433e:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , HIGH  ) ;
    4340:	82 e0       	ldi	r24, 0x02	; 2
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	41 e0       	ldi	r20, 0x01	; 1
    4346:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , LOW  ) ;
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	61 e0       	ldi	r22, 0x01	; 1
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH   ) ;
    4354:	82 e0       	ldi	r24, 0x02	; 2
    4356:	62 e0       	ldi	r22, 0x02	; 2
    4358:	41 e0       	ldi	r20, 0x01	; 1
    435a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH  ) ;
    435e:	82 e0       	ldi	r24, 0x02	; 2
    4360:	63 e0       	ldi	r22, 0x03	; 3
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	a0 e0       	ldi	r26, 0x00	; 0
    436e:	b0 e4       	ldi	r27, 0x40	; 64
    4370:	89 8f       	std	Y+25, r24	; 0x19
    4372:	9a 8f       	std	Y+26, r25	; 0x1a
    4374:	ab 8f       	std	Y+27, r26	; 0x1b
    4376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4378:	69 8d       	ldd	r22, Y+25	; 0x19
    437a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    437c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	4a ef       	ldi	r20, 0xFA	; 250
    4386:	54 e4       	ldi	r21, 0x44	; 68
    4388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	8d 8b       	std	Y+21, r24	; 0x15
    4392:	9e 8b       	std	Y+22, r25	; 0x16
    4394:	af 8b       	std	Y+23, r26	; 0x17
    4396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4398:	6d 89       	ldd	r22, Y+21	; 0x15
    439a:	7e 89       	ldd	r23, Y+22	; 0x16
    439c:	8f 89       	ldd	r24, Y+23	; 0x17
    439e:	98 8d       	ldd	r25, Y+24	; 0x18
    43a0:	20 e0       	ldi	r18, 0x00	; 0
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	40 e8       	ldi	r20, 0x80	; 128
    43a6:	5f e3       	ldi	r21, 0x3F	; 63
    43a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ac:	88 23       	and	r24, r24
    43ae:	2c f4       	brge	.+10     	; 0x43ba <Stepper_Motor_GoBackward+0x2ac>
		__ticks = 1;
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9c 8b       	std	Y+20, r25	; 0x14
    43b6:	8b 8b       	std	Y+19, r24	; 0x13
    43b8:	3f c0       	rjmp	.+126    	; 0x4438 <Stepper_Motor_GoBackward+0x32a>
	else if (__tmp > 65535)
    43ba:	6d 89       	ldd	r22, Y+21	; 0x15
    43bc:	7e 89       	ldd	r23, Y+22	; 0x16
    43be:	8f 89       	ldd	r24, Y+23	; 0x17
    43c0:	98 8d       	ldd	r25, Y+24	; 0x18
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	3f ef       	ldi	r19, 0xFF	; 255
    43c6:	4f e7       	ldi	r20, 0x7F	; 127
    43c8:	57 e4       	ldi	r21, 0x47	; 71
    43ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43ce:	18 16       	cp	r1, r24
    43d0:	4c f5       	brge	.+82     	; 0x4424 <Stepper_Motor_GoBackward+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d2:	69 8d       	ldd	r22, Y+25	; 0x19
    43d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e2       	ldi	r20, 0x20	; 32
    43e0:	51 e4       	ldi	r21, 0x41	; 65
    43e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	9c 8b       	std	Y+20, r25	; 0x14
    43f8:	8b 8b       	std	Y+19, r24	; 0x13
    43fa:	0f c0       	rjmp	.+30     	; 0x441a <Stepper_Motor_GoBackward+0x30c>
    43fc:	88 ec       	ldi	r24, 0xC8	; 200
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	9a 8b       	std	Y+18, r25	; 0x12
    4402:	89 8b       	std	Y+17, r24	; 0x11
    4404:	89 89       	ldd	r24, Y+17	; 0x11
    4406:	9a 89       	ldd	r25, Y+18	; 0x12
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <Stepper_Motor_GoBackward+0x2fa>
    440c:	9a 8b       	std	Y+18, r25	; 0x12
    440e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4410:	8b 89       	ldd	r24, Y+19	; 0x13
    4412:	9c 89       	ldd	r25, Y+20	; 0x14
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	9c 8b       	std	Y+20, r25	; 0x14
    4418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    441a:	8b 89       	ldd	r24, Y+19	; 0x13
    441c:	9c 89       	ldd	r25, Y+20	; 0x14
    441e:	00 97       	sbiw	r24, 0x00	; 0
    4420:	69 f7       	brne	.-38     	; 0x43fc <Stepper_Motor_GoBackward+0x2ee>
    4422:	14 c0       	rjmp	.+40     	; 0x444c <Stepper_Motor_GoBackward+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4424:	6d 89       	ldd	r22, Y+21	; 0x15
    4426:	7e 89       	ldd	r23, Y+22	; 0x16
    4428:	8f 89       	ldd	r24, Y+23	; 0x17
    442a:	98 8d       	ldd	r25, Y+24	; 0x18
    442c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	9c 8b       	std	Y+20, r25	; 0x14
    4436:	8b 8b       	std	Y+19, r24	; 0x13
    4438:	8b 89       	ldd	r24, Y+19	; 0x13
    443a:	9c 89       	ldd	r25, Y+20	; 0x14
    443c:	98 8b       	std	Y+16, r25	; 0x10
    443e:	8f 87       	std	Y+15, r24	; 0x0f
    4440:	8f 85       	ldd	r24, Y+15	; 0x0f
    4442:	98 89       	ldd	r25, Y+16	; 0x10
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	f1 f7       	brne	.-4      	; 0x4444 <Stepper_Motor_GoBackward+0x336>
    4448:	98 8b       	std	Y+16, r25	; 0x10
    444a:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms( 2 ) ;

		DIO_Write_Pin( STEPPER_MOTOR_PORT0 , STEPPER_MOTOR_PIN0   , LOW  ) ;
    444c:	82 e0       	ldi	r24, 0x02	; 2
    444e:	60 e0       	ldi	r22, 0x00	; 0
    4450:	40 e0       	ldi	r20, 0x00	; 0
    4452:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT1 , STEPPER_MOTOR_PIN1   , HIGH  ) ;
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	61 e0       	ldi	r22, 0x01	; 1
    445a:	41 e0       	ldi	r20, 0x01	; 1
    445c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
    4460:	82 e0       	ldi	r24, 0x02	; 2
    4462:	62 e0       	ldi	r22, 0x02	; 2
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH   ) ;
    446a:	82 e0       	ldi	r24, 0x02	; 2
    446c:	63 e0       	ldi	r22, 0x03	; 3
    446e:	41 e0       	ldi	r20, 0x01	; 1
    4470:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	a0 e0       	ldi	r26, 0x00	; 0
    447a:	b0 e4       	ldi	r27, 0x40	; 64
    447c:	8b 87       	std	Y+11, r24	; 0x0b
    447e:	9c 87       	std	Y+12, r25	; 0x0c
    4480:	ad 87       	std	Y+13, r26	; 0x0d
    4482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4484:	6b 85       	ldd	r22, Y+11	; 0x0b
    4486:	7c 85       	ldd	r23, Y+12	; 0x0c
    4488:	8d 85       	ldd	r24, Y+13	; 0x0d
    448a:	9e 85       	ldd	r25, Y+14	; 0x0e
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4a ef       	ldi	r20, 0xFA	; 250
    4492:	54 e4       	ldi	r21, 0x44	; 68
    4494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	8f 83       	std	Y+7, r24	; 0x07
    449e:	98 87       	std	Y+8, r25	; 0x08
    44a0:	a9 87       	std	Y+9, r26	; 0x09
    44a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44a4:	6f 81       	ldd	r22, Y+7	; 0x07
    44a6:	78 85       	ldd	r23, Y+8	; 0x08
    44a8:	89 85       	ldd	r24, Y+9	; 0x09
    44aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	40 e8       	ldi	r20, 0x80	; 128
    44b2:	5f e3       	ldi	r21, 0x3F	; 63
    44b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44b8:	88 23       	and	r24, r24
    44ba:	2c f4       	brge	.+10     	; 0x44c6 <Stepper_Motor_GoBackward+0x3b8>
		__ticks = 1;
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	9e 83       	std	Y+6, r25	; 0x06
    44c2:	8d 83       	std	Y+5, r24	; 0x05
    44c4:	3f c0       	rjmp	.+126    	; 0x4544 <Stepper_Motor_GoBackward+0x436>
	else if (__tmp > 65535)
    44c6:	6f 81       	ldd	r22, Y+7	; 0x07
    44c8:	78 85       	ldd	r23, Y+8	; 0x08
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	3f ef       	ldi	r19, 0xFF	; 255
    44d2:	4f e7       	ldi	r20, 0x7F	; 127
    44d4:	57 e4       	ldi	r21, 0x47	; 71
    44d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44da:	18 16       	cp	r1, r24
    44dc:	4c f5       	brge	.+82     	; 0x4530 <Stepper_Motor_GoBackward+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44de:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e2       	ldi	r20, 0x20	; 32
    44ec:	51 e4       	ldi	r21, 0x41	; 65
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	bc 01       	movw	r22, r24
    44f8:	cd 01       	movw	r24, r26
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	9e 83       	std	Y+6, r25	; 0x06
    4504:	8d 83       	std	Y+5, r24	; 0x05
    4506:	0f c0       	rjmp	.+30     	; 0x4526 <Stepper_Motor_GoBackward+0x418>
    4508:	88 ec       	ldi	r24, 0xC8	; 200
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	9c 83       	std	Y+4, r25	; 0x04
    450e:	8b 83       	std	Y+3, r24	; 0x03
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	9c 81       	ldd	r25, Y+4	; 0x04
    4514:	01 97       	sbiw	r24, 0x01	; 1
    4516:	f1 f7       	brne	.-4      	; 0x4514 <Stepper_Motor_GoBackward+0x406>
    4518:	9c 83       	std	Y+4, r25	; 0x04
    451a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451c:	8d 81       	ldd	r24, Y+5	; 0x05
    451e:	9e 81       	ldd	r25, Y+6	; 0x06
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	69 f7       	brne	.-38     	; 0x4508 <Stepper_Motor_GoBackward+0x3fa>
    452e:	14 c0       	rjmp	.+40     	; 0x4558 <Stepper_Motor_GoBackward+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4530:	6f 81       	ldd	r22, Y+7	; 0x07
    4532:	78 85       	ldd	r23, Y+8	; 0x08
    4534:	89 85       	ldd	r24, Y+9	; 0x09
    4536:	9a 85       	ldd	r25, Y+10	; 0x0a
    4538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	9e 83       	std	Y+6, r25	; 0x06
    4542:	8d 83       	std	Y+5, r24	; 0x05
    4544:	8d 81       	ldd	r24, Y+5	; 0x05
    4546:	9e 81       	ldd	r25, Y+6	; 0x06
    4548:	9a 83       	std	Y+2, r25	; 0x02
    454a:	89 83       	std	Y+1, r24	; 0x01
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	9a 81       	ldd	r25, Y+2	; 0x02
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	f1 f7       	brne	.-4      	; 0x4550 <Stepper_Motor_GoBackward+0x442>
    4554:	9a 83       	std	Y+2, r25	; 0x02
    4556:	89 83       	std	Y+1, r24	; 0x01
	}
}
void Stepper_Motor_GoBackward() 
{
	// Turn The Other Side CCW
	for (int j=0 ; j<48 ; j++)
    4558:	89 ad       	ldd	r24, Y+57	; 0x39
    455a:	9a ad       	ldd	r25, Y+58	; 0x3a
    455c:	01 96       	adiw	r24, 0x01	; 1
    455e:	9a af       	std	Y+58, r25	; 0x3a
    4560:	89 af       	std	Y+57, r24	; 0x39
    4562:	89 ad       	ldd	r24, Y+57	; 0x39
    4564:	9a ad       	ldd	r25, Y+58	; 0x3a
    4566:	80 33       	cpi	r24, 0x30	; 48
    4568:	91 05       	cpc	r25, r1
    456a:	0c f4       	brge	.+2      	; 0x456e <Stepper_Motor_GoBackward+0x460>
    456c:	dd cd       	rjmp	.-1094   	; 0x4128 <Stepper_Motor_GoBackward+0x1a>
		DIO_Write_Pin( STEPPER_MOTOR_PORT2 , STEPPER_MOTOR_PIN2 , HIGH  ) ;
		DIO_Write_Pin( STEPPER_MOTOR_PORT3 , STEPPER_MOTOR_PIN3 , HIGH   ) ;

		_delay_ms( 2 ) ;
	}
}
    456e:	ea 96       	adiw	r28, 0x3a	; 58
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	08 95       	ret

00004580 <Stepper_Motor_TurnOff>:
void Stepper_Motor_TurnOff() 
{
    4580:	df 93       	push	r29
    4582:	cf 93       	push	r28
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin( STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0 , HIGH  ) ;
    4588:	82 e0       	ldi	r24, 0x02	; 2
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	41 e0       	ldi	r20, 0x01	; 1
    458e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin(STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0 , HIGH  ) ;
    4592:	82 e0       	ldi	r24, 0x02	; 2
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	41 e0       	ldi	r20, 0x01	; 1
    4598:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin( STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0, HIGH  ) ;
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	60 e0       	ldi	r22, 0x00	; 0
    45a0:	41 e0       	ldi	r20, 0x01	; 1
    45a2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin( STEPPER_MOTOR_PORT0,STEPPER_MOTOR_PIN0, HIGH   ) ;
    45a6:	82 e0       	ldi	r24, 0x02	; 2
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    45b0:	cf 91       	pop	r28
    45b2:	df 91       	pop	r29
    45b4:	08 95       	ret

000045b6 <PIR_voidInit>:
#include "PIR_Sensor_Config.h"
#include "PIR_Sensor_interface.h"


void PIR_voidInit()
{
    45b6:	df 93       	push	r29
    45b8:	cf 93       	push	r28
    45ba:	cd b7       	in	r28, 0x3d	; 61
    45bc:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin_Dir(PIR_OUT_PORT,PIR_OUT_PIN,LOW) ;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	60 e0       	ldi	r22, 0x00	; 0
    45c2:	40 e0       	ldi	r20, 0x00	; 0
    45c4:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
}
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	08 95       	ret

000045ce <PIR_Set_CallBack>:

void PIR_Set_CallBack(void(*PtrFun)(void),void(*PtrNFun)(void))
{
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <PIR_Set_CallBack+0x6>
    45d4:	00 d0       	rcall	.+0      	; 0x45d6 <PIR_Set_CallBack+0x8>
    45d6:	00 d0       	rcall	.+0      	; 0x45d8 <PIR_Set_CallBack+0xa>
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	9b 83       	std	Y+3, r25	; 0x03
    45de:	8a 83       	std	Y+2, r24	; 0x02
    45e0:	7d 83       	std	Y+5, r23	; 0x05
    45e2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Val = 0 ;
    45e4:	19 82       	std	Y+1, r1	; 0x01
	DIO_Read(PIR_OUT_PORT,PIR_OUT_PIN,&Val) ;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	9e 01       	movw	r18, r28
    45ec:	2f 5f       	subi	r18, 0xFF	; 255
    45ee:	3f 4f       	sbci	r19, 0xFF	; 255
    45f0:	a9 01       	movw	r20, r18
    45f2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <DIO_Read>
	if(Val==1)
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	81 30       	cpi	r24, 0x01	; 1
    45fa:	39 f4       	brne	.+14     	; 0x460a <PIR_Set_CallBack+0x3c>
	{
		PtrFun() ;
    45fc:	ea 81       	ldd	r30, Y+2	; 0x02
    45fe:	fb 81       	ldd	r31, Y+3	; 0x03
    4600:	09 95       	icall
		while((PINB&PIR_OUT_PIN)==1) ;
    4602:	e6 e3       	ldi	r30, 0x36	; 54
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	80 81       	ld	r24, Z
    4608:	03 c0       	rjmp	.+6      	; 0x4610 <PIR_Set_CallBack+0x42>
	}
	else
	{
		PtrNFun() ;
    460a:	ec 81       	ldd	r30, Y+4	; 0x04
    460c:	fd 81       	ldd	r31, Y+5	; 0x05
    460e:	09 95       	icall
	}
}
    4610:	26 96       	adiw	r28, 0x06	; 6
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	f8 94       	cli
    4616:	de bf       	out	0x3e, r29	; 62
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	cd bf       	out	0x3d, r28	; 61
    461c:	cf 91       	pop	r28
    461e:	df 91       	pop	r29
    4620:	08 95       	ret

00004622 <LCD_Clear_Screen>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
    4622:	df 93       	push	r29
    4624:	cf 93       	push	r28
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
}
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <LCD_Enable>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	2e 97       	sbiw	r28, 0x0e	; 14
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
	DIO_Write_Pin(PORT_LCD_A,EN_SWITCH,HIGH);
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	63 e0       	ldi	r22, 0x03	; 3
    464e:	41 e0       	ldi	r20, 0x01	; 1
    4650:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	a8 e4       	ldi	r26, 0x48	; 72
    465a:	b2 e4       	ldi	r27, 0x42	; 66
    465c:	8b 87       	std	Y+11, r24	; 0x0b
    465e:	9c 87       	std	Y+12, r25	; 0x0c
    4660:	ad 87       	std	Y+13, r26	; 0x0d
    4662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4664:	6b 85       	ldd	r22, Y+11	; 0x0b
    4666:	7c 85       	ldd	r23, Y+12	; 0x0c
    4668:	8d 85       	ldd	r24, Y+13	; 0x0d
    466a:	9e 85       	ldd	r25, Y+14	; 0x0e
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4a ef       	ldi	r20, 0xFA	; 250
    4672:	54 e4       	ldi	r21, 0x44	; 68
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	8f 83       	std	Y+7, r24	; 0x07
    467e:	98 87       	std	Y+8, r25	; 0x08
    4680:	a9 87       	std	Y+9, r26	; 0x09
    4682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e8       	ldi	r20, 0x80	; 128
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4698:	88 23       	and	r24, r24
    469a:	2c f4       	brge	.+10     	; 0x46a6 <LCD_Enable+0x70>
		__ticks = 1;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	8d 83       	std	Y+5, r24	; 0x05
    46a4:	3f c0       	rjmp	.+126    	; 0x4724 <LCD_Enable+0xee>
	else if (__tmp > 65535)
    46a6:	6f 81       	ldd	r22, Y+7	; 0x07
    46a8:	78 85       	ldd	r23, Y+8	; 0x08
    46aa:	89 85       	ldd	r24, Y+9	; 0x09
    46ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	3f ef       	ldi	r19, 0xFF	; 255
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	57 e4       	ldi	r21, 0x47	; 71
    46b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ba:	18 16       	cp	r1, r24
    46bc:	4c f5       	brge	.+82     	; 0x4710 <LCD_Enable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46be:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	40 e2       	ldi	r20, 0x20	; 32
    46cc:	51 e4       	ldi	r21, 0x41	; 65
    46ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	bc 01       	movw	r22, r24
    46d8:	cd 01       	movw	r24, r26
    46da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	9e 83       	std	Y+6, r25	; 0x06
    46e4:	8d 83       	std	Y+5, r24	; 0x05
    46e6:	0f c0       	rjmp	.+30     	; 0x4706 <LCD_Enable+0xd0>
    46e8:	88 ec       	ldi	r24, 0xC8	; 200
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	9c 81       	ldd	r25, Y+4	; 0x04
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <LCD_Enable+0xbe>
    46f8:	9c 83       	std	Y+4, r25	; 0x04
    46fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fc:	8d 81       	ldd	r24, Y+5	; 0x05
    46fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	9e 83       	std	Y+6, r25	; 0x06
    4704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4706:	8d 81       	ldd	r24, Y+5	; 0x05
    4708:	9e 81       	ldd	r25, Y+6	; 0x06
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	69 f7       	brne	.-38     	; 0x46e8 <LCD_Enable+0xb2>
    470e:	14 c0       	rjmp	.+40     	; 0x4738 <LCD_Enable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4710:	6f 81       	ldd	r22, Y+7	; 0x07
    4712:	78 85       	ldd	r23, Y+8	; 0x08
    4714:	89 85       	ldd	r24, Y+9	; 0x09
    4716:	9a 85       	ldd	r25, Y+10	; 0x0a
    4718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	9e 83       	std	Y+6, r25	; 0x06
    4722:	8d 83       	std	Y+5, r24	; 0x05
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <LCD_Enable+0xfa>
    4734:	9a 83       	std	Y+2, r25	; 0x02
    4736:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	DIO_Write_Pin(PORT_LCD_A,EN_SWITCH,LOW);
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	63 e0       	ldi	r22, 0x03	; 3
    473c:	40 e0       	ldi	r20, 0x00	; 0
    473e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>

}
    4742:	2e 96       	adiw	r28, 0x0e	; 14
    4744:	0f b6       	in	r0, 0x3f	; 63
    4746:	f8 94       	cli
    4748:	de bf       	out	0x3e, r29	; 62
    474a:	0f be       	out	0x3f, r0	; 63
    474c:	cd bf       	out	0x3d, r28	; 61
    474e:	cf 91       	pop	r28
    4750:	df 91       	pop	r29
    4752:	08 95       	ret

00004754 <LCD_Init>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Init()
{
    4754:	0f 93       	push	r16
    4756:	1f 93       	push	r17
    4758:	df 93       	push	r29
    475a:	cf 93       	push	r28
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
    4760:	c6 54       	subi	r28, 0x46	; 70
    4762:	d0 40       	sbci	r29, 0x00	; 0
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	f8 94       	cli
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	0f be       	out	0x3f, r0	; 63
    476c:	cd bf       	out	0x3d, r28	; 61
    476e:	fe 01       	movw	r30, r28
    4770:	ed 5b       	subi	r30, 0xBD	; 189
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 ea       	ldi	r26, 0xA0	; 160
    477a:	b1 e4       	ldi	r27, 0x41	; 65
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	a2 83       	std	Z+2, r26	; 0x02
    4782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4784:	8e 01       	movw	r16, r28
    4786:	01 5c       	subi	r16, 0xC1	; 193
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	fe 01       	movw	r30, r28
    478c:	ed 5b       	subi	r30, 0xBD	; 189
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	60 81       	ld	r22, Z
    4792:	71 81       	ldd	r23, Z+1	; 0x01
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a ef       	ldi	r20, 0xFA	; 250
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	f8 01       	movw	r30, r16
    47aa:	80 83       	st	Z, r24
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	a2 83       	std	Z+2, r26	; 0x02
    47b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47b2:	fe 01       	movw	r30, r28
    47b4:	ff 96       	adiw	r30, 0x3f	; 63
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	40 e8       	ldi	r20, 0x80	; 128
    47c4:	5f e3       	ldi	r21, 0x3F	; 63
    47c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ca:	88 23       	and	r24, r24
    47cc:	2c f4       	brge	.+10     	; 0x47d8 <LCD_Init+0x84>
		__ticks = 1;
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	9e af       	std	Y+62, r25	; 0x3e
    47d4:	8d af       	std	Y+61, r24	; 0x3d
    47d6:	46 c0       	rjmp	.+140    	; 0x4864 <LCD_Init+0x110>
	else if (__tmp > 65535)
    47d8:	fe 01       	movw	r30, r28
    47da:	ff 96       	adiw	r30, 0x3f	; 63
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	93 81       	ldd	r25, Z+3	; 0x03
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	3f ef       	ldi	r19, 0xFF	; 255
    47e8:	4f e7       	ldi	r20, 0x7F	; 127
    47ea:	57 e4       	ldi	r21, 0x47	; 71
    47ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f0:	18 16       	cp	r1, r24
    47f2:	64 f5       	brge	.+88     	; 0x484c <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f4:	fe 01       	movw	r30, r28
    47f6:	ed 5b       	subi	r30, 0xBD	; 189
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e2       	ldi	r20, 0x20	; 32
    4808:	51 e4       	ldi	r21, 0x41	; 65
    480a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	bc 01       	movw	r22, r24
    4814:	cd 01       	movw	r24, r26
    4816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	9e af       	std	Y+62, r25	; 0x3e
    4820:	8d af       	std	Y+61, r24	; 0x3d
    4822:	0f c0       	rjmp	.+30     	; 0x4842 <LCD_Init+0xee>
    4824:	88 ec       	ldi	r24, 0xC8	; 200
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	9c af       	std	Y+60, r25	; 0x3c
    482a:	8b af       	std	Y+59, r24	; 0x3b
    482c:	8b ad       	ldd	r24, Y+59	; 0x3b
    482e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4830:	01 97       	sbiw	r24, 0x01	; 1
    4832:	f1 f7       	brne	.-4      	; 0x4830 <LCD_Init+0xdc>
    4834:	9c af       	std	Y+60, r25	; 0x3c
    4836:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4838:	8d ad       	ldd	r24, Y+61	; 0x3d
    483a:	9e ad       	ldd	r25, Y+62	; 0x3e
    483c:	01 97       	sbiw	r24, 0x01	; 1
    483e:	9e af       	std	Y+62, r25	; 0x3e
    4840:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4842:	8d ad       	ldd	r24, Y+61	; 0x3d
    4844:	9e ad       	ldd	r25, Y+62	; 0x3e
    4846:	00 97       	sbiw	r24, 0x00	; 0
    4848:	69 f7       	brne	.-38     	; 0x4824 <LCD_Init+0xd0>
    484a:	16 c0       	rjmp	.+44     	; 0x4878 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484c:	fe 01       	movw	r30, r28
    484e:	ff 96       	adiw	r30, 0x3f	; 63
    4850:	60 81       	ld	r22, Z
    4852:	71 81       	ldd	r23, Z+1	; 0x01
    4854:	82 81       	ldd	r24, Z+2	; 0x02
    4856:	93 81       	ldd	r25, Z+3	; 0x03
    4858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	9e af       	std	Y+62, r25	; 0x3e
    4862:	8d af       	std	Y+61, r24	; 0x3d
    4864:	8d ad       	ldd	r24, Y+61	; 0x3d
    4866:	9e ad       	ldd	r25, Y+62	; 0x3e
    4868:	9a af       	std	Y+58, r25	; 0x3a
    486a:	89 af       	std	Y+57, r24	; 0x39
    486c:	89 ad       	ldd	r24, Y+57	; 0x39
    486e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	f1 f7       	brne	.-4      	; 0x4870 <LCD_Init+0x11c>
    4874:	9a af       	std	Y+58, r25	; 0x3a
    4876:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20) ;
	
	SET_BIT(LCD_CTRL_DIR,RS_SWITCH);
    4878:	aa e3       	ldi	r26, 0x3A	; 58
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	ea e3       	ldi	r30, 0x3A	; 58
    487e:	f0 e0       	ldi	r31, 0x00	; 0
    4880:	80 81       	ld	r24, Z
    4882:	82 60       	ori	r24, 0x02	; 2
    4884:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_DIR,RW_SWITCH);
    4886:	aa e3       	ldi	r26, 0x3A	; 58
    4888:	b0 e0       	ldi	r27, 0x00	; 0
    488a:	ea e3       	ldi	r30, 0x3A	; 58
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	80 81       	ld	r24, Z
    4890:	84 60       	ori	r24, 0x04	; 4
    4892:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_DIR,EN_SWITCH);
    4894:	aa e3       	ldi	r26, 0x3A	; 58
    4896:	b0 e0       	ldi	r27, 0x00	; 0
    4898:	ea e3       	ldi	r30, 0x3A	; 58
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	80 81       	ld	r24, Z
    489e:	88 60       	ori	r24, 0x08	; 8
    48a0:	8c 93       	st	X, r24

	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
    48a2:	ab e3       	ldi	r26, 0x3B	; 59
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	eb e3       	ldi	r30, 0x3B	; 59
    48a8:	f0 e0       	ldi	r31, 0x00	; 0
    48aa:	80 81       	ld	r24, Z
    48ac:	8d 7f       	andi	r24, 0xFD	; 253
    48ae:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
    48b0:	ab e3       	ldi	r26, 0x3B	; 59
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	eb e3       	ldi	r30, 0x3B	; 59
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	80 81       	ld	r24, Z
    48ba:	8b 7f       	andi	r24, 0xFB	; 251
    48bc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
    48be:	ab e3       	ldi	r26, 0x3B	; 59
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	eb e3       	ldi	r30, 0x3B	; 59
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	80 81       	ld	r24, Z
    48c8:	87 7f       	andi	r24, 0xF7	; 247
    48ca:	8c 93       	st	X, r24
#ifdef EIGHT_BIT_MODE
	SET_REG(LCD_DATA_DIR);
#endif 

#ifdef FOUR_BIT_MODE
	SET_BIT(LCD_DATA_DIR,4);
    48cc:	aa e3       	ldi	r26, 0x3A	; 58
    48ce:	b0 e0       	ldi	r27, 0x00	; 0
    48d0:	ea e3       	ldi	r30, 0x3A	; 58
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	80 81       	ld	r24, Z
    48d6:	80 61       	ori	r24, 0x10	; 16
    48d8:	8c 93       	st	X, r24
	SET_BIT(LCD_DATA_DIR,5);
    48da:	aa e3       	ldi	r26, 0x3A	; 58
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	ea e3       	ldi	r30, 0x3A	; 58
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	80 62       	ori	r24, 0x20	; 32
    48e6:	8c 93       	st	X, r24
	SET_BIT(LCD_DATA_DIR,6);
    48e8:	aa e3       	ldi	r26, 0x3A	; 58
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	ea e3       	ldi	r30, 0x3A	; 58
    48ee:	f0 e0       	ldi	r31, 0x00	; 0
    48f0:	80 81       	ld	r24, Z
    48f2:	80 64       	ori	r24, 0x40	; 64
    48f4:	8c 93       	st	X, r24
	SET_BIT(LCD_DATA_DIR,7);
    48f6:	aa e3       	ldi	r26, 0x3A	; 58
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	ea e3       	ldi	r30, 0x3A	; 58
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	80 68       	ori	r24, 0x80	; 128
    4902:	8c 93       	st	X, r24
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	a0 e7       	ldi	r26, 0x70	; 112
    490a:	b1 e4       	ldi	r27, 0x41	; 65
    490c:	8d ab       	std	Y+53, r24	; 0x35
    490e:	9e ab       	std	Y+54, r25	; 0x36
    4910:	af ab       	std	Y+55, r26	; 0x37
    4912:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4914:	6d a9       	ldd	r22, Y+53	; 0x35
    4916:	7e a9       	ldd	r23, Y+54	; 0x36
    4918:	8f a9       	ldd	r24, Y+55	; 0x37
    491a:	98 ad       	ldd	r25, Y+56	; 0x38
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	4a ef       	ldi	r20, 0xFA	; 250
    4922:	54 e4       	ldi	r21, 0x44	; 68
    4924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4928:	dc 01       	movw	r26, r24
    492a:	cb 01       	movw	r24, r22
    492c:	89 ab       	std	Y+49, r24	; 0x31
    492e:	9a ab       	std	Y+50, r25	; 0x32
    4930:	ab ab       	std	Y+51, r26	; 0x33
    4932:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4934:	69 a9       	ldd	r22, Y+49	; 0x31
    4936:	7a a9       	ldd	r23, Y+50	; 0x32
    4938:	8b a9       	ldd	r24, Y+51	; 0x33
    493a:	9c a9       	ldd	r25, Y+52	; 0x34
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	40 e8       	ldi	r20, 0x80	; 128
    4942:	5f e3       	ldi	r21, 0x3F	; 63
    4944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4948:	88 23       	and	r24, r24
    494a:	2c f4       	brge	.+10     	; 0x4956 <LCD_Init+0x202>
		__ticks = 1;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	98 ab       	std	Y+48, r25	; 0x30
    4952:	8f a7       	std	Y+47, r24	; 0x2f
    4954:	3f c0       	rjmp	.+126    	; 0x49d4 <LCD_Init+0x280>
	else if (__tmp > 65535)
    4956:	69 a9       	ldd	r22, Y+49	; 0x31
    4958:	7a a9       	ldd	r23, Y+50	; 0x32
    495a:	8b a9       	ldd	r24, Y+51	; 0x33
    495c:	9c a9       	ldd	r25, Y+52	; 0x34
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	3f ef       	ldi	r19, 0xFF	; 255
    4962:	4f e7       	ldi	r20, 0x7F	; 127
    4964:	57 e4       	ldi	r21, 0x47	; 71
    4966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    496a:	18 16       	cp	r1, r24
    496c:	4c f5       	brge	.+82     	; 0x49c0 <LCD_Init+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496e:	6d a9       	ldd	r22, Y+53	; 0x35
    4970:	7e a9       	ldd	r23, Y+54	; 0x36
    4972:	8f a9       	ldd	r24, Y+55	; 0x37
    4974:	98 ad       	ldd	r25, Y+56	; 0x38
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e2       	ldi	r20, 0x20	; 32
    497c:	51 e4       	ldi	r21, 0x41	; 65
    497e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	bc 01       	movw	r22, r24
    4988:	cd 01       	movw	r24, r26
    498a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	98 ab       	std	Y+48, r25	; 0x30
    4994:	8f a7       	std	Y+47, r24	; 0x2f
    4996:	0f c0       	rjmp	.+30     	; 0x49b6 <LCD_Init+0x262>
    4998:	88 ec       	ldi	r24, 0xC8	; 200
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	9e a7       	std	Y+46, r25	; 0x2e
    499e:	8d a7       	std	Y+45, r24	; 0x2d
    49a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    49a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	f1 f7       	brne	.-4      	; 0x49a4 <LCD_Init+0x250>
    49a8:	9e a7       	std	Y+46, r25	; 0x2e
    49aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ae:	98 a9       	ldd	r25, Y+48	; 0x30
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	98 ab       	std	Y+48, r25	; 0x30
    49b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49b8:	98 a9       	ldd	r25, Y+48	; 0x30
    49ba:	00 97       	sbiw	r24, 0x00	; 0
    49bc:	69 f7       	brne	.-38     	; 0x4998 <LCD_Init+0x244>
    49be:	14 c0       	rjmp	.+40     	; 0x49e8 <LCD_Init+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c0:	69 a9       	ldd	r22, Y+49	; 0x31
    49c2:	7a a9       	ldd	r23, Y+50	; 0x32
    49c4:	8b a9       	ldd	r24, Y+51	; 0x33
    49c6:	9c a9       	ldd	r25, Y+52	; 0x34
    49c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	98 ab       	std	Y+48, r25	; 0x30
    49d2:	8f a7       	std	Y+47, r24	; 0x2f
    49d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49d6:	98 a9       	ldd	r25, Y+48	; 0x30
    49d8:	9c a7       	std	Y+44, r25	; 0x2c
    49da:	8b a7       	std	Y+43, r24	; 0x2b
    49dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    49de:	9c a5       	ldd	r25, Y+44	; 0x2c
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <LCD_Init+0x28c>
    49e4:	9c a7       	std	Y+44, r25	; 0x2c
    49e6:	8b a7       	std	Y+43, r24	; 0x2b
#endif 
	_delay_ms(15);
	LCD_Clear_Screen();
    49e8:	0e 94 11 23 	call	0x4622	; 0x4622 <LCD_Clear_Screen>
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
#ifdef FOUR_BIT_MODE	

	LCD_Wirte_Cmd(0x20);
    49ec:	80 e2       	ldi	r24, 0x20	; 32
    49ee:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x20);
    49f2:	80 e2       	ldi	r24, 0x20	; 32
    49f4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x80);
    49f8:	80 e8       	ldi	r24, 0x80	; 128
    49fa:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	a0 e8       	ldi	r26, 0x80	; 128
    4a04:	bf e3       	ldi	r27, 0x3F	; 63
    4a06:	8f a3       	std	Y+39, r24	; 0x27
    4a08:	98 a7       	std	Y+40, r25	; 0x28
    4a0a:	a9 a7       	std	Y+41, r26	; 0x29
    4a0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a10:	78 a5       	ldd	r23, Y+40	; 0x28
    4a12:	89 a5       	ldd	r24, Y+41	; 0x29
    4a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	4a ef       	ldi	r20, 0xFA	; 250
    4a1c:	54 e4       	ldi	r21, 0x44	; 68
    4a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	8b a3       	std	Y+35, r24	; 0x23
    4a28:	9c a3       	std	Y+36, r25	; 0x24
    4a2a:	ad a3       	std	Y+37, r26	; 0x25
    4a2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a30:	7c a1       	ldd	r23, Y+36	; 0x24
    4a32:	8d a1       	ldd	r24, Y+37	; 0x25
    4a34:	9e a1       	ldd	r25, Y+38	; 0x26
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e8       	ldi	r20, 0x80	; 128
    4a3c:	5f e3       	ldi	r21, 0x3F	; 63
    4a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a42:	88 23       	and	r24, r24
    4a44:	2c f4       	brge	.+10     	; 0x4a50 <LCD_Init+0x2fc>
		__ticks = 1;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	9a a3       	std	Y+34, r25	; 0x22
    4a4c:	89 a3       	std	Y+33, r24	; 0x21
    4a4e:	3f c0       	rjmp	.+126    	; 0x4ace <LCD_Init+0x37a>
	else if (__tmp > 65535)
    4a50:	6b a1       	ldd	r22, Y+35	; 0x23
    4a52:	7c a1       	ldd	r23, Y+36	; 0x24
    4a54:	8d a1       	ldd	r24, Y+37	; 0x25
    4a56:	9e a1       	ldd	r25, Y+38	; 0x26
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	3f ef       	ldi	r19, 0xFF	; 255
    4a5c:	4f e7       	ldi	r20, 0x7F	; 127
    4a5e:	57 e4       	ldi	r21, 0x47	; 71
    4a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a64:	18 16       	cp	r1, r24
    4a66:	4c f5       	brge	.+82     	; 0x4aba <LCD_Init+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	6f a1       	ldd	r22, Y+39	; 0x27
    4a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    4a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    4a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e2       	ldi	r20, 0x20	; 32
    4a76:	51 e4       	ldi	r21, 0x41	; 65
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	9a a3       	std	Y+34, r25	; 0x22
    4a8e:	89 a3       	std	Y+33, r24	; 0x21
    4a90:	0f c0       	rjmp	.+30     	; 0x4ab0 <LCD_Init+0x35c>
    4a92:	88 ec       	ldi	r24, 0xC8	; 200
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	98 a3       	std	Y+32, r25	; 0x20
    4a98:	8f 8f       	std	Y+31, r24	; 0x1f
    4a9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a9c:	98 a1       	ldd	r25, Y+32	; 0x20
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	f1 f7       	brne	.-4      	; 0x4a9e <LCD_Init+0x34a>
    4aa2:	98 a3       	std	Y+32, r25	; 0x20
    4aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    4aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	9a a3       	std	Y+34, r25	; 0x22
    4aae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	69 f7       	brne	.-38     	; 0x4a92 <LCD_Init+0x33e>
    4ab8:	14 c0       	rjmp	.+40     	; 0x4ae2 <LCD_Init+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aba:	6b a1       	ldd	r22, Y+35	; 0x23
    4abc:	7c a1       	ldd	r23, Y+36	; 0x24
    4abe:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	9a a3       	std	Y+34, r25	; 0x22
    4acc:	89 a3       	std	Y+33, r24	; 0x21
    4ace:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ad4:	8d 8f       	std	Y+29, r24	; 0x1d
    4ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <LCD_Init+0x386>
    4ade:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0xF0);
    4ae8:	80 ef       	ldi	r24, 0xF0	; 240
    4aea:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	a0 e8       	ldi	r26, 0x80	; 128
    4af4:	bf e3       	ldi	r27, 0x3F	; 63
    4af6:	89 8f       	std	Y+25, r24	; 0x19
    4af8:	9a 8f       	std	Y+26, r25	; 0x1a
    4afa:	ab 8f       	std	Y+27, r26	; 0x1b
    4afc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afe:	69 8d       	ldd	r22, Y+25	; 0x19
    4b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	4a ef       	ldi	r20, 0xFA	; 250
    4b0c:	54 e4       	ldi	r21, 0x44	; 68
    4b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	8d 8b       	std	Y+21, r24	; 0x15
    4b18:	9e 8b       	std	Y+22, r25	; 0x16
    4b1a:	af 8b       	std	Y+23, r26	; 0x17
    4b1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    4b20:	7e 89       	ldd	r23, Y+22	; 0x16
    4b22:	8f 89       	ldd	r24, Y+23	; 0x17
    4b24:	98 8d       	ldd	r25, Y+24	; 0x18
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e8       	ldi	r20, 0x80	; 128
    4b2c:	5f e3       	ldi	r21, 0x3F	; 63
    4b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b32:	88 23       	and	r24, r24
    4b34:	2c f4       	brge	.+10     	; 0x4b40 <LCD_Init+0x3ec>
		__ticks = 1;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	9c 8b       	std	Y+20, r25	; 0x14
    4b3c:	8b 8b       	std	Y+19, r24	; 0x13
    4b3e:	3f c0       	rjmp	.+126    	; 0x4bbe <LCD_Init+0x46a>
	else if (__tmp > 65535)
    4b40:	6d 89       	ldd	r22, Y+21	; 0x15
    4b42:	7e 89       	ldd	r23, Y+22	; 0x16
    4b44:	8f 89       	ldd	r24, Y+23	; 0x17
    4b46:	98 8d       	ldd	r25, Y+24	; 0x18
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	3f ef       	ldi	r19, 0xFF	; 255
    4b4c:	4f e7       	ldi	r20, 0x7F	; 127
    4b4e:	57 e4       	ldi	r21, 0x47	; 71
    4b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b54:	18 16       	cp	r1, r24
    4b56:	4c f5       	brge	.+82     	; 0x4baa <LCD_Init+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b58:	69 8d       	ldd	r22, Y+25	; 0x19
    4b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e2       	ldi	r20, 0x20	; 32
    4b66:	51 e4       	ldi	r21, 0x41	; 65
    4b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	9c 8b       	std	Y+20, r25	; 0x14
    4b7e:	8b 8b       	std	Y+19, r24	; 0x13
    4b80:	0f c0       	rjmp	.+30     	; 0x4ba0 <LCD_Init+0x44c>
    4b82:	88 ec       	ldi	r24, 0xC8	; 200
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	9a 8b       	std	Y+18, r25	; 0x12
    4b88:	89 8b       	std	Y+17, r24	; 0x11
    4b8a:	89 89       	ldd	r24, Y+17	; 0x11
    4b8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b8e:	01 97       	sbiw	r24, 0x01	; 1
    4b90:	f1 f7       	brne	.-4      	; 0x4b8e <LCD_Init+0x43a>
    4b92:	9a 8b       	std	Y+18, r25	; 0x12
    4b94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b96:	8b 89       	ldd	r24, Y+19	; 0x13
    4b98:	9c 89       	ldd	r25, Y+20	; 0x14
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	9c 8b       	std	Y+20, r25	; 0x14
    4b9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	69 f7       	brne	.-38     	; 0x4b82 <LCD_Init+0x42e>
    4ba8:	14 c0       	rjmp	.+40     	; 0x4bd2 <LCD_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4baa:	6d 89       	ldd	r22, Y+21	; 0x15
    4bac:	7e 89       	ldd	r23, Y+22	; 0x16
    4bae:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	9c 8b       	std	Y+20, r25	; 0x14
    4bbc:	8b 8b       	std	Y+19, r24	; 0x13
    4bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc2:	98 8b       	std	Y+16, r25	; 0x10
    4bc4:	8f 87       	std	Y+15, r24	; 0x0f
    4bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bc8:	98 89       	ldd	r25, Y+16	; 0x10
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <LCD_Init+0x476>
    4bce:	98 8b       	std	Y+16, r25	; 0x10
    4bd0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x10);
    4bd8:	80 e1       	ldi	r24, 0x10	; 16
    4bda:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	a0 e0       	ldi	r26, 0x00	; 0
    4be4:	b0 e4       	ldi	r27, 0x40	; 64
    4be6:	8b 87       	std	Y+11, r24	; 0x0b
    4be8:	9c 87       	std	Y+12, r25	; 0x0c
    4bea:	ad 87       	std	Y+13, r26	; 0x0d
    4bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	4a ef       	ldi	r20, 0xFA	; 250
    4bfc:	54 e4       	ldi	r21, 0x44	; 68
    4bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	8f 83       	std	Y+7, r24	; 0x07
    4c08:	98 87       	std	Y+8, r25	; 0x08
    4c0a:	a9 87       	std	Y+9, r26	; 0x09
    4c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c10:	78 85       	ldd	r23, Y+8	; 0x08
    4c12:	89 85       	ldd	r24, Y+9	; 0x09
    4c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e8       	ldi	r20, 0x80	; 128
    4c1c:	5f e3       	ldi	r21, 0x3F	; 63
    4c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c22:	88 23       	and	r24, r24
    4c24:	2c f4       	brge	.+10     	; 0x4c30 <LCD_Init+0x4dc>
		__ticks = 1;
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	3f c0       	rjmp	.+126    	; 0x4cae <LCD_Init+0x55a>
	else if (__tmp > 65535)
    4c30:	6f 81       	ldd	r22, Y+7	; 0x07
    4c32:	78 85       	ldd	r23, Y+8	; 0x08
    4c34:	89 85       	ldd	r24, Y+9	; 0x09
    4c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	3f ef       	ldi	r19, 0xFF	; 255
    4c3c:	4f e7       	ldi	r20, 0x7F	; 127
    4c3e:	57 e4       	ldi	r21, 0x47	; 71
    4c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c44:	18 16       	cp	r1, r24
    4c46:	4c f5       	brge	.+82     	; 0x4c9a <LCD_Init+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	40 e2       	ldi	r20, 0x20	; 32
    4c56:	51 e4       	ldi	r21, 0x41	; 65
    4c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	bc 01       	movw	r22, r24
    4c62:	cd 01       	movw	r24, r26
    4c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	9e 83       	std	Y+6, r25	; 0x06
    4c6e:	8d 83       	std	Y+5, r24	; 0x05
    4c70:	0f c0       	rjmp	.+30     	; 0x4c90 <LCD_Init+0x53c>
    4c72:	88 ec       	ldi	r24, 0xC8	; 200
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	9c 83       	std	Y+4, r25	; 0x04
    4c78:	8b 83       	std	Y+3, r24	; 0x03
    4c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7e:	01 97       	sbiw	r24, 0x01	; 1
    4c80:	f1 f7       	brne	.-4      	; 0x4c7e <LCD_Init+0x52a>
    4c82:	9c 83       	std	Y+4, r25	; 0x04
    4c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c86:	8d 81       	ldd	r24, Y+5	; 0x05
    4c88:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	9e 83       	std	Y+6, r25	; 0x06
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c90:	8d 81       	ldd	r24, Y+5	; 0x05
    4c92:	9e 81       	ldd	r25, Y+6	; 0x06
    4c94:	00 97       	sbiw	r24, 0x00	; 0
    4c96:	69 f7       	brne	.-38     	; 0x4c72 <LCD_Init+0x51e>
    4c98:	14 c0       	rjmp	.+40     	; 0x4cc2 <LCD_Init+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9c:	78 85       	ldd	r23, Y+8	; 0x08
    4c9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	9e 83       	std	Y+6, r25	; 0x06
    4cac:	8d 83       	std	Y+5, r24	; 0x05
    4cae:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb2:	9a 83       	std	Y+2, r25	; 0x02
    4cb4:	89 83       	std	Y+1, r24	; 0x01
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <LCD_Init+0x566>
    4cbe:	9a 83       	std	Y+2, r25	; 0x02
    4cc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
// 	LCD_Wirte_Cmd(0x00);	By Default
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	80 93 f1 00 	sts	0x00F1, r24
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
    4cc8:	86 e0       	ldi	r24, 0x06	; 6
    4cca:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
    4cce:	80 e8       	ldi	r24, 0x80	; 128
    4cd0:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
    4cd4:	8f e0       	ldi	r24, 0x0F	; 15
    4cd6:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
}
    4cda:	ca 5b       	subi	r28, 0xBA	; 186
    4cdc:	df 4f       	sbci	r29, 0xFF	; 255
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	cf 91       	pop	r28
    4cea:	df 91       	pop	r29
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	08 95       	ret

00004cf2 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	6d 97       	sbiw	r28, 0x1d	; 29
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write_Pin(PORT_LCD_A,RS_SWITCH,LOW);
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	61 e0       	ldi	r22, 0x01	; 1
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_LCD_A,RW_SWITCH,LOW);
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	62 e0       	ldi	r22, 0x02	; 2
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	
	#ifdef FOUR_BIT_MODE
	

	LCD_DATA = (LCD_DATA&0x0F) | (Cmd&0xF0);  
    4d1c:	ab e3       	ldi	r26, 0x3B	; 59
    4d1e:	b0 e0       	ldi	r27, 0x00	; 0
    4d20:	eb e3       	ldi	r30, 0x3B	; 59
    4d22:	f0 e0       	ldi	r31, 0x00	; 0
    4d24:	80 81       	ld	r24, Z
    4d26:	98 2f       	mov	r25, r24
    4d28:	9f 70       	andi	r25, 0x0F	; 15
    4d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d2c:	80 7f       	andi	r24, 0xF0	; 240
    4d2e:	89 2b       	or	r24, r25
    4d30:	8c 93       	st	X, r24
	LCD_Enable ();
    4d32:	0e 94 1b 23 	call	0x4636	; 0x4636 <LCD_Enable>
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	a0 e8       	ldi	r26, 0x80	; 128
    4d3c:	bf e3       	ldi	r27, 0x3F	; 63
    4d3e:	89 8f       	std	Y+25, r24	; 0x19
    4d40:	9a 8f       	std	Y+26, r25	; 0x1a
    4d42:	ab 8f       	std	Y+27, r26	; 0x1b
    4d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d46:	69 8d       	ldd	r22, Y+25	; 0x19
    4d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	4a ef       	ldi	r20, 0xFA	; 250
    4d54:	54 e4       	ldi	r21, 0x44	; 68
    4d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	8d 8b       	std	Y+21, r24	; 0x15
    4d60:	9e 8b       	std	Y+22, r25	; 0x16
    4d62:	af 8b       	std	Y+23, r26	; 0x17
    4d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d66:	6d 89       	ldd	r22, Y+21	; 0x15
    4d68:	7e 89       	ldd	r23, Y+22	; 0x16
    4d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e8       	ldi	r20, 0x80	; 128
    4d74:	5f e3       	ldi	r21, 0x3F	; 63
    4d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7a:	88 23       	and	r24, r24
    4d7c:	2c f4       	brge	.+10     	; 0x4d88 <LCD_Wirte_Cmd+0x96>
		__ticks = 1;
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	9c 8b       	std	Y+20, r25	; 0x14
    4d84:	8b 8b       	std	Y+19, r24	; 0x13
    4d86:	3f c0       	rjmp	.+126    	; 0x4e06 <LCD_Wirte_Cmd+0x114>
	else if (__tmp > 65535)
    4d88:	6d 89       	ldd	r22, Y+21	; 0x15
    4d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	3f ef       	ldi	r19, 0xFF	; 255
    4d94:	4f e7       	ldi	r20, 0x7F	; 127
    4d96:	57 e4       	ldi	r21, 0x47	; 71
    4d98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d9c:	18 16       	cp	r1, r24
    4d9e:	4c f5       	brge	.+82     	; 0x4df2 <LCD_Wirte_Cmd+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da0:	69 8d       	ldd	r22, Y+25	; 0x19
    4da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	40 e2       	ldi	r20, 0x20	; 32
    4dae:	51 e4       	ldi	r21, 0x41	; 65
    4db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	bc 01       	movw	r22, r24
    4dba:	cd 01       	movw	r24, r26
    4dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	9c 8b       	std	Y+20, r25	; 0x14
    4dc6:	8b 8b       	std	Y+19, r24	; 0x13
    4dc8:	0f c0       	rjmp	.+30     	; 0x4de8 <LCD_Wirte_Cmd+0xf6>
    4dca:	88 ec       	ldi	r24, 0xC8	; 200
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	9a 8b       	std	Y+18, r25	; 0x12
    4dd0:	89 8b       	std	Y+17, r24	; 0x11
    4dd2:	89 89       	ldd	r24, Y+17	; 0x11
    4dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    4dd6:	01 97       	sbiw	r24, 0x01	; 1
    4dd8:	f1 f7       	brne	.-4      	; 0x4dd6 <LCD_Wirte_Cmd+0xe4>
    4dda:	9a 8b       	std	Y+18, r25	; 0x12
    4ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dde:	8b 89       	ldd	r24, Y+19	; 0x13
    4de0:	9c 89       	ldd	r25, Y+20	; 0x14
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	9c 8b       	std	Y+20, r25	; 0x14
    4de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dea:	9c 89       	ldd	r25, Y+20	; 0x14
    4dec:	00 97       	sbiw	r24, 0x00	; 0
    4dee:	69 f7       	brne	.-38     	; 0x4dca <LCD_Wirte_Cmd+0xd8>
    4df0:	14 c0       	rjmp	.+40     	; 0x4e1a <LCD_Wirte_Cmd+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df2:	6d 89       	ldd	r22, Y+21	; 0x15
    4df4:	7e 89       	ldd	r23, Y+22	; 0x16
    4df6:	8f 89       	ldd	r24, Y+23	; 0x17
    4df8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfe:	dc 01       	movw	r26, r24
    4e00:	cb 01       	movw	r24, r22
    4e02:	9c 8b       	std	Y+20, r25	; 0x14
    4e04:	8b 8b       	std	Y+19, r24	; 0x13
    4e06:	8b 89       	ldd	r24, Y+19	; 0x13
    4e08:	9c 89       	ldd	r25, Y+20	; 0x14
    4e0a:	98 8b       	std	Y+16, r25	; 0x10
    4e0c:	8f 87       	std	Y+15, r24	; 0x0f
    4e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e10:	98 89       	ldd	r25, Y+16	; 0x10
    4e12:	01 97       	sbiw	r24, 0x01	; 1
    4e14:	f1 f7       	brne	.-4      	; 0x4e12 <LCD_Wirte_Cmd+0x120>
    4e16:	98 8b       	std	Y+16, r25	; 0x10
    4e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	if (Init_Is_Finshed)
    4e1a:	80 91 f1 00 	lds	r24, 0x00F1
    4e1e:	88 23       	and	r24, r24
    4e20:	a9 f0       	breq	.+42     	; 0x4e4c <LCD_Wirte_Cmd+0x15a>
	{
		
		LCD_DATA = (((LCD_DATA&0x0F) | (Cmd&0x0F))<<4);
    4e22:	ab e3       	ldi	r26, 0x3B	; 59
    4e24:	b0 e0       	ldi	r27, 0x00	; 0
    4e26:	eb e3       	ldi	r30, 0x3B	; 59
    4e28:	f0 e0       	ldi	r31, 0x00	; 0
    4e2a:	80 81       	ld	r24, Z
    4e2c:	28 2f       	mov	r18, r24
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e32:	88 2f       	mov	r24, r24
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	82 2b       	or	r24, r18
    4e38:	93 2b       	or	r25, r19
    4e3a:	82 95       	swap	r24
    4e3c:	92 95       	swap	r25
    4e3e:	90 7f       	andi	r25, 0xF0	; 240
    4e40:	98 27       	eor	r25, r24
    4e42:	80 7f       	andi	r24, 0xF0	; 240
    4e44:	98 27       	eor	r25, r24
    4e46:	8c 93       	st	X, r24
		LCD_Enable ();
    4e48:	0e 94 1b 23 	call	0x4636	; 0x4636 <LCD_Enable>
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	a0 e0       	ldi	r26, 0x00	; 0
    4e52:	b0 e4       	ldi	r27, 0x40	; 64
    4e54:	8b 87       	std	Y+11, r24	; 0x0b
    4e56:	9c 87       	std	Y+12, r25	; 0x0c
    4e58:	ad 87       	std	Y+13, r26	; 0x0d
    4e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	4a ef       	ldi	r20, 0xFA	; 250
    4e6a:	54 e4       	ldi	r21, 0x44	; 68
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	8f 83       	std	Y+7, r24	; 0x07
    4e76:	98 87       	std	Y+8, r25	; 0x08
    4e78:	a9 87       	std	Y+9, r26	; 0x09
    4e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e7e:	78 85       	ldd	r23, Y+8	; 0x08
    4e80:	89 85       	ldd	r24, Y+9	; 0x09
    4e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	40 e8       	ldi	r20, 0x80	; 128
    4e8a:	5f e3       	ldi	r21, 0x3F	; 63
    4e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e90:	88 23       	and	r24, r24
    4e92:	2c f4       	brge	.+10     	; 0x4e9e <LCD_Wirte_Cmd+0x1ac>
		__ticks = 1;
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9e 83       	std	Y+6, r25	; 0x06
    4e9a:	8d 83       	std	Y+5, r24	; 0x05
    4e9c:	3f c0       	rjmp	.+126    	; 0x4f1c <LCD_Wirte_Cmd+0x22a>
	else if (__tmp > 65535)
    4e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea0:	78 85       	ldd	r23, Y+8	; 0x08
    4ea2:	89 85       	ldd	r24, Y+9	; 0x09
    4ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	3f ef       	ldi	r19, 0xFF	; 255
    4eaa:	4f e7       	ldi	r20, 0x7F	; 127
    4eac:	57 e4       	ldi	r21, 0x47	; 71
    4eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eb2:	18 16       	cp	r1, r24
    4eb4:	4c f5       	brge	.+82     	; 0x4f08 <LCD_Wirte_Cmd+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e2       	ldi	r20, 0x20	; 32
    4ec4:	51 e4       	ldi	r21, 0x41	; 65
    4ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	bc 01       	movw	r22, r24
    4ed0:	cd 01       	movw	r24, r26
    4ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	9e 83       	std	Y+6, r25	; 0x06
    4edc:	8d 83       	std	Y+5, r24	; 0x05
    4ede:	0f c0       	rjmp	.+30     	; 0x4efe <LCD_Wirte_Cmd+0x20c>
    4ee0:	88 ec       	ldi	r24, 0xC8	; 200
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	9c 83       	std	Y+4, r25	; 0x04
    4ee6:	8b 83       	std	Y+3, r24	; 0x03
    4ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eea:	9c 81       	ldd	r25, Y+4	; 0x04
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <LCD_Wirte_Cmd+0x1fa>
    4ef0:	9c 83       	std	Y+4, r25	; 0x04
    4ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efe:	8d 81       	ldd	r24, Y+5	; 0x05
    4f00:	9e 81       	ldd	r25, Y+6	; 0x06
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	69 f7       	brne	.-38     	; 0x4ee0 <LCD_Wirte_Cmd+0x1ee>
    4f06:	14 c0       	rjmp	.+40     	; 0x4f30 <LCD_Wirte_Cmd+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f08:	6f 81       	ldd	r22, Y+7	; 0x07
    4f0a:	78 85       	ldd	r23, Y+8	; 0x08
    4f0c:	89 85       	ldd	r24, Y+9	; 0x09
    4f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	9e 83       	std	Y+6, r25	; 0x06
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
    4f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f20:	9a 83       	std	Y+2, r25	; 0x02
    4f22:	89 83       	std	Y+1, r24	; 0x01
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	9a 81       	ldd	r25, Y+2	; 0x02
    4f28:	01 97       	sbiw	r24, 0x01	; 1
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <LCD_Wirte_Cmd+0x236>
    4f2c:	9a 83       	std	Y+2, r25	; 0x02
    4f2e:	89 83       	std	Y+1, r24	; 0x01
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
	LCD_Enable();
	#endif
	_delay_ms(2);
}
    4f30:	6d 96       	adiw	r28, 0x1d	; 29
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	cf 91       	pop	r28
    4f3e:	df 91       	pop	r29
    4f40:	08 95       	ret

00004f42 <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
    4f42:	df 93       	push	r29
    4f44:	cf 93       	push	r28
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    4f4a:	2f 97       	sbiw	r28, 0x0f	; 15
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	8f 87       	std	Y+15, r24	; 0x0f
	
	DIO_Write_Pin(PORT_LCD_A,RS_SWITCH,HIGH);
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	61 e0       	ldi	r22, 0x01	; 1
    4f5c:	41 e0       	ldi	r20, 0x01	; 1
    4f5e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_LCD_A,RW_SWITCH,LOW);
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	62 e0       	ldi	r22, 0x02	; 2
    4f66:	40 e0       	ldi	r20, 0x00	; 0
    4f68:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
#ifdef FOUR_BIT_MODE
	LCD_DATA = (LCD_DATA&0x0F) | (Char&0xF0);
    4f6c:	ab e3       	ldi	r26, 0x3B	; 59
    4f6e:	b0 e0       	ldi	r27, 0x00	; 0
    4f70:	eb e3       	ldi	r30, 0x3B	; 59
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	80 81       	ld	r24, Z
    4f76:	98 2f       	mov	r25, r24
    4f78:	9f 70       	andi	r25, 0x0F	; 15
    4f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f7c:	80 7f       	andi	r24, 0xF0	; 240
    4f7e:	89 2b       	or	r24, r25
    4f80:	8c 93       	st	X, r24
	LCD_Enable ();
    4f82:	0e 94 1b 23 	call	0x4636	; 0x4636 <LCD_Enable>
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	a0 e8       	ldi	r26, 0x80	; 128
    4f8c:	bf e3       	ldi	r27, 0x3F	; 63
    4f8e:	8b 87       	std	Y+11, r24	; 0x0b
    4f90:	9c 87       	std	Y+12, r25	; 0x0c
    4f92:	ad 87       	std	Y+13, r26	; 0x0d
    4f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	30 e0       	ldi	r19, 0x00	; 0
    4fa2:	4a ef       	ldi	r20, 0xFA	; 250
    4fa4:	54 e4       	ldi	r21, 0x44	; 68
    4fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	8f 83       	std	Y+7, r24	; 0x07
    4fb0:	98 87       	std	Y+8, r25	; 0x08
    4fb2:	a9 87       	std	Y+9, r26	; 0x09
    4fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4fb8:	78 85       	ldd	r23, Y+8	; 0x08
    4fba:	89 85       	ldd	r24, Y+9	; 0x09
    4fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e8       	ldi	r20, 0x80	; 128
    4fc4:	5f e3       	ldi	r21, 0x3F	; 63
    4fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fca:	88 23       	and	r24, r24
    4fcc:	2c f4       	brge	.+10     	; 0x4fd8 <Lcd_Write_Char+0x96>
		__ticks = 1;
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	9e 83       	std	Y+6, r25	; 0x06
    4fd4:	8d 83       	std	Y+5, r24	; 0x05
    4fd6:	3f c0       	rjmp	.+126    	; 0x5056 <Lcd_Write_Char+0x114>
	else if (__tmp > 65535)
    4fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fda:	78 85       	ldd	r23, Y+8	; 0x08
    4fdc:	89 85       	ldd	r24, Y+9	; 0x09
    4fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	3f ef       	ldi	r19, 0xFF	; 255
    4fe4:	4f e7       	ldi	r20, 0x7F	; 127
    4fe6:	57 e4       	ldi	r21, 0x47	; 71
    4fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fec:	18 16       	cp	r1, r24
    4fee:	4c f5       	brge	.+82     	; 0x5042 <Lcd_Write_Char+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ff8:	20 e0       	ldi	r18, 0x00	; 0
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	40 e2       	ldi	r20, 0x20	; 32
    4ffe:	51 e4       	ldi	r21, 0x41	; 65
    5000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5004:	dc 01       	movw	r26, r24
    5006:	cb 01       	movw	r24, r22
    5008:	bc 01       	movw	r22, r24
    500a:	cd 01       	movw	r24, r26
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9e 83       	std	Y+6, r25	; 0x06
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	0f c0       	rjmp	.+30     	; 0x5038 <Lcd_Write_Char+0xf6>
    501a:	88 ec       	ldi	r24, 0xC8	; 200
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	9c 83       	std	Y+4, r25	; 0x04
    5020:	8b 83       	std	Y+3, r24	; 0x03
    5022:	8b 81       	ldd	r24, Y+3	; 0x03
    5024:	9c 81       	ldd	r25, Y+4	; 0x04
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	f1 f7       	brne	.-4      	; 0x5026 <Lcd_Write_Char+0xe4>
    502a:	9c 83       	std	Y+4, r25	; 0x04
    502c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    502e:	8d 81       	ldd	r24, Y+5	; 0x05
    5030:	9e 81       	ldd	r25, Y+6	; 0x06
    5032:	01 97       	sbiw	r24, 0x01	; 1
    5034:	9e 83       	std	Y+6, r25	; 0x06
    5036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5038:	8d 81       	ldd	r24, Y+5	; 0x05
    503a:	9e 81       	ldd	r25, Y+6	; 0x06
    503c:	00 97       	sbiw	r24, 0x00	; 0
    503e:	69 f7       	brne	.-38     	; 0x501a <Lcd_Write_Char+0xd8>
    5040:	14 c0       	rjmp	.+40     	; 0x506a <Lcd_Write_Char+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5042:	6f 81       	ldd	r22, Y+7	; 0x07
    5044:	78 85       	ldd	r23, Y+8	; 0x08
    5046:	89 85       	ldd	r24, Y+9	; 0x09
    5048:	9a 85       	ldd	r25, Y+10	; 0x0a
    504a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	9e 83       	std	Y+6, r25	; 0x06
    5054:	8d 83       	std	Y+5, r24	; 0x05
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	89 81       	ldd	r24, Y+1	; 0x01
    5060:	9a 81       	ldd	r25, Y+2	; 0x02
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <Lcd_Write_Char+0x120>
    5066:	9a 83       	std	Y+2, r25	; 0x02
    5068:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_DATA = (((LCD_DATA&0x0F) | (Char&0x0F)<<4));
    506a:	ab e3       	ldi	r26, 0x3B	; 59
    506c:	b0 e0       	ldi	r27, 0x00	; 0
    506e:	eb e3       	ldi	r30, 0x3B	; 59
    5070:	f0 e0       	ldi	r31, 0x00	; 0
    5072:	80 81       	ld	r24, Z
    5074:	28 2f       	mov	r18, r24
    5076:	2f 70       	andi	r18, 0x0F	; 15
    5078:	8f 85       	ldd	r24, Y+15	; 0x0f
    507a:	88 2f       	mov	r24, r24
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	82 95       	swap	r24
    5080:	92 95       	swap	r25
    5082:	90 7f       	andi	r25, 0xF0	; 240
    5084:	98 27       	eor	r25, r24
    5086:	80 7f       	andi	r24, 0xF0	; 240
    5088:	98 27       	eor	r25, r24
    508a:	82 2b       	or	r24, r18
    508c:	8c 93       	st	X, r24
	LCD_Enable ();
    508e:	0e 94 1b 23 	call	0x4636	; 0x4636 <LCD_Enable>
#ifdef EIGHT_BIT_MODE
	_delay_ms(1);
	LCD_DATA = Char ;
	LCD_Enable();
#endif
}
    5092:	2f 96       	adiw	r28, 0x0f	; 15
    5094:	0f b6       	in	r0, 0x3f	; 63
    5096:	f8 94       	cli
    5098:	de bf       	out	0x3e, r29	; 62
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	cd bf       	out	0x3d, r28	; 61
    509e:	cf 91       	pop	r28
    50a0:	df 91       	pop	r29
    50a2:	08 95       	ret

000050a4 <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
    50a4:	df 93       	push	r29
    50a6:	cf 93       	push	r28
    50a8:	00 d0       	rcall	.+0      	; 0x50aa <LCD_Write_String+0x6>
    50aa:	00 d0       	rcall	.+0      	; 0x50ac <LCD_Write_String+0x8>
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <LCD_Write_String+0xa>
    50ae:	cd b7       	in	r28, 0x3d	; 61
    50b0:	de b7       	in	r29, 0x3e	; 62
    50b2:	9c 83       	std	Y+4, r25	; 0x04
    50b4:	8b 83       	std	Y+3, r24	; 0x03
    50b6:	6d 83       	std	Y+5, r22	; 0x05
    50b8:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GO_TO_INDEX(ROW,COL);
    50ba:	8d 81       	ldd	r24, Y+5	; 0x05
    50bc:	6e 81       	ldd	r22, Y+6	; 0x06
    50be:	0e 94 ff 28 	call	0x51fe	; 0x51fe <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
    50c2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Line = 0 ;
    50c4:	19 82       	std	Y+1, r1	; 0x01
    50c6:	6f c0       	rjmp	.+222    	; 0x51a6 <LCD_Write_String+0x102>
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
    50c8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ca:	88 2f       	mov	r24, r24
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	ac 01       	movw	r20, r24
    50d0:	42 95       	swap	r20
    50d2:	52 95       	swap	r21
    50d4:	50 7f       	andi	r21, 0xF0	; 240
    50d6:	54 27       	eor	r21, r20
    50d8:	40 7f       	andi	r20, 0xF0	; 240
    50da:	54 27       	eor	r21, r20
    50dc:	8a 81       	ldd	r24, Y+2	; 0x02
    50de:	28 2f       	mov	r18, r24
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	8e 81       	ldd	r24, Y+6	; 0x06
    50e4:	88 2f       	mov	r24, r24
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	82 0f       	add	r24, r18
    50ea:	93 1f       	adc	r25, r19
    50ec:	84 0f       	add	r24, r20
    50ee:	95 1f       	adc	r25, r21
    50f0:	80 31       	cpi	r24, 0x10	; 16
    50f2:	91 05       	cpc	r25, r1
    50f4:	7c f4       	brge	.+30     	; 0x5114 <LCD_Write_String+0x70>
		{
			Lcd_Write_Char(STRING[index]);
    50f6:	8a 81       	ldd	r24, Y+2	; 0x02
    50f8:	28 2f       	mov	r18, r24
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	8b 81       	ldd	r24, Y+3	; 0x03
    50fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5100:	fc 01       	movw	r30, r24
    5102:	e2 0f       	add	r30, r18
    5104:	f3 1f       	adc	r31, r19
    5106:	80 81       	ld	r24, Z
    5108:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
			index++;
    510c:	8a 81       	ldd	r24, Y+2	; 0x02
    510e:	8f 5f       	subi	r24, 0xFF	; 255
    5110:	8a 83       	std	Y+2, r24	; 0x02
    5112:	49 c0       	rjmp	.+146    	; 0x51a6 <LCD_Write_String+0x102>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
    5114:	8d 81       	ldd	r24, Y+5	; 0x05
    5116:	88 2f       	mov	r24, r24
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	ac 01       	movw	r20, r24
    511c:	42 95       	swap	r20
    511e:	52 95       	swap	r21
    5120:	50 7f       	andi	r21, 0xF0	; 240
    5122:	54 27       	eor	r21, r20
    5124:	40 7f       	andi	r20, 0xF0	; 240
    5126:	54 27       	eor	r21, r20
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	28 2f       	mov	r18, r24
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	8e 81       	ldd	r24, Y+6	; 0x06
    5130:	88 2f       	mov	r24, r24
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	82 0f       	add	r24, r18
    5136:	93 1f       	adc	r25, r19
    5138:	84 0f       	add	r24, r20
    513a:	95 1f       	adc	r25, r21
    513c:	80 31       	cpi	r24, 0x10	; 16
    513e:	91 05       	cpc	r25, r1
    5140:	51 f4       	brne	.+20     	; 0x5156 <LCD_Write_String+0xb2>
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	88 23       	and	r24, r24
    5146:	39 f4       	brne	.+14     	; 0x5156 <LCD_Write_String+0xb2>
		{
			LCD_GO_TO_INDEX(1,0) ; 
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <LCD_GO_TO_INDEX>
			Line = 1 ; 
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	89 83       	std	Y+1, r24	; 0x01
    5154:	28 c0       	rjmp	.+80     	; 0x51a6 <LCD_Write_String+0x102>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
    5156:	8d 81       	ldd	r24, Y+5	; 0x05
    5158:	88 2f       	mov	r24, r24
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	ac 01       	movw	r20, r24
    515e:	42 95       	swap	r20
    5160:	52 95       	swap	r21
    5162:	50 7f       	andi	r21, 0xF0	; 240
    5164:	54 27       	eor	r21, r20
    5166:	40 7f       	andi	r20, 0xF0	; 240
    5168:	54 27       	eor	r21, r20
    516a:	8a 81       	ldd	r24, Y+2	; 0x02
    516c:	28 2f       	mov	r18, r24
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	8e 81       	ldd	r24, Y+6	; 0x06
    5172:	88 2f       	mov	r24, r24
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	82 0f       	add	r24, r18
    5178:	93 1f       	adc	r25, r19
    517a:	84 0f       	add	r24, r20
    517c:	95 1f       	adc	r25, r21
    517e:	80 32       	cpi	r24, 0x20	; 32
    5180:	91 05       	cpc	r25, r1
    5182:	8c f4       	brge	.+34     	; 0x51a6 <LCD_Write_String+0x102>
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	81 30       	cpi	r24, 0x01	; 1
    5188:	71 f4       	brne	.+28     	; 0x51a6 <LCD_Write_String+0x102>
		{
			Lcd_Write_Char(STRING[index]);
    518a:	8a 81       	ldd	r24, Y+2	; 0x02
    518c:	28 2f       	mov	r18, r24
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	8b 81       	ldd	r24, Y+3	; 0x03
    5192:	9c 81       	ldd	r25, Y+4	; 0x04
    5194:	fc 01       	movw	r30, r24
    5196:	e2 0f       	add	r30, r18
    5198:	f3 1f       	adc	r31, r19
    519a:	80 81       	ld	r24, Z
    519c:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
			index++ ;
    51a0:	8a 81       	ldd	r24, Y+2	; 0x02
    51a2:	8f 5f       	subi	r24, 0xFF	; 255
    51a4:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
    51a6:	8a 81       	ldd	r24, Y+2	; 0x02
    51a8:	28 2f       	mov	r18, r24
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	8b 81       	ldd	r24, Y+3	; 0x03
    51ae:	9c 81       	ldd	r25, Y+4	; 0x04
    51b0:	fc 01       	movw	r30, r24
    51b2:	e2 0f       	add	r30, r18
    51b4:	f3 1f       	adc	r31, r19
    51b6:	80 81       	ld	r24, Z
    51b8:	88 23       	and	r24, r24
    51ba:	c1 f0       	breq	.+48     	; 0x51ec <LCD_Write_String+0x148>
    51bc:	8d 81       	ldd	r24, Y+5	; 0x05
    51be:	88 2f       	mov	r24, r24
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	ac 01       	movw	r20, r24
    51c4:	42 95       	swap	r20
    51c6:	52 95       	swap	r21
    51c8:	50 7f       	andi	r21, 0xF0	; 240
    51ca:	54 27       	eor	r21, r20
    51cc:	40 7f       	andi	r20, 0xF0	; 240
    51ce:	54 27       	eor	r21, r20
    51d0:	8a 81       	ldd	r24, Y+2	; 0x02
    51d2:	28 2f       	mov	r18, r24
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	8e 81       	ldd	r24, Y+6	; 0x06
    51d8:	88 2f       	mov	r24, r24
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	82 0f       	add	r24, r18
    51de:	93 1f       	adc	r25, r19
    51e0:	84 0f       	add	r24, r20
    51e2:	95 1f       	adc	r25, r21
    51e4:	81 32       	cpi	r24, 0x21	; 33
    51e6:	91 05       	cpc	r25, r1
    51e8:	0c f4       	brge	.+2      	; 0x51ec <LCD_Write_String+0x148>
    51ea:	6e cf       	rjmp	.-292    	; 0x50c8 <LCD_Write_String+0x24>
		{
			Lcd_Write_Char(STRING[index]);
			index++ ;
		}		
	}
}
    51ec:	26 96       	adiw	r28, 0x06	; 6
    51ee:	0f b6       	in	r0, 0x3f	; 63
    51f0:	f8 94       	cli
    51f2:	de bf       	out	0x3e, r29	; 62
    51f4:	0f be       	out	0x3f, r0	; 63
    51f6:	cd bf       	out	0x3d, r28	; 61
    51f8:	cf 91       	pop	r28
    51fa:	df 91       	pop	r29
    51fc:	08 95       	ret

000051fe <LCD_GO_TO_INDEX>:
 * 			@param [in]					-COL																	 	*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
    51fe:	df 93       	push	r29
    5200:	cf 93       	push	r28
    5202:	00 d0       	rcall	.+0      	; 0x5204 <LCD_GO_TO_INDEX+0x6>
    5204:	0f 92       	push	r0
    5206:	cd b7       	in	r28, 0x3d	; 61
    5208:	de b7       	in	r29, 0x3e	; 62
    520a:	8a 83       	std	Y+2, r24	; 0x02
    520c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address ; 
	if (ROW<2 && COL <16){
    520e:	8a 81       	ldd	r24, Y+2	; 0x02
    5210:	82 30       	cpi	r24, 0x02	; 2
    5212:	c8 f4       	brcc	.+50     	; 0x5246 <LCD_GO_TO_INDEX+0x48>
    5214:	8b 81       	ldd	r24, Y+3	; 0x03
    5216:	80 31       	cpi	r24, 0x10	; 16
    5218:	b0 f4       	brcc	.+44     	; 0x5246 <LCD_GO_TO_INDEX+0x48>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
    521a:	8a 81       	ldd	r24, Y+2	; 0x02
    521c:	88 2f       	mov	r24, r24
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	00 24       	eor	r0, r0
    5222:	96 95       	lsr	r25
    5224:	87 95       	ror	r24
    5226:	07 94       	ror	r0
    5228:	96 95       	lsr	r25
    522a:	87 95       	ror	r24
    522c:	07 94       	ror	r0
    522e:	98 2f       	mov	r25, r24
    5230:	80 2d       	mov	r24, r0
    5232:	98 2f       	mov	r25, r24
    5234:	8b 81       	ldd	r24, Y+3	; 0x03
    5236:	89 0f       	add	r24, r25
    5238:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	80 68       	ori	r24, 0x80	; 128
    523e:	89 83       	std	Y+1, r24	; 0x01
		LCD_Wirte_Cmd(Address);
    5240:	89 81       	ldd	r24, Y+1	; 0x01
    5242:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	}
}
    5246:	0f 90       	pop	r0
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	cf 91       	pop	r28
    524e:	df 91       	pop	r29
    5250:	08 95       	ret

00005252 <LCD_Store_Customer_Char>:
 * 			@param [in]					-CGram_index : Ram can write in and part of CGram						 	*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Store_Customer_Char(uint8_t* pattern , uint8_t CGram_index )
{
    5252:	df 93       	push	r29
    5254:	cf 93       	push	r28
    5256:	00 d0       	rcall	.+0      	; 0x5258 <LCD_Store_Customer_Char+0x6>
    5258:	00 d0       	rcall	.+0      	; 0x525a <LCD_Store_Customer_Char+0x8>
    525a:	0f 92       	push	r0
    525c:	cd b7       	in	r28, 0x3d	; 61
    525e:	de b7       	in	r29, 0x3e	; 62
    5260:	9c 83       	std	Y+4, r25	; 0x04
    5262:	8b 83       	std	Y+3, r24	; 0x03
    5264:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Address ;
	uint8_t index ;  
	if (CGram_index<8)
    5266:	8d 81       	ldd	r24, Y+5	; 0x05
    5268:	88 30       	cpi	r24, 0x08	; 8
    526a:	30 f5       	brcc	.+76     	; 0x52b8 <LCD_Store_Customer_Char+0x66>
	{
		Address = CGram_index*8 ;
    526c:	8d 81       	ldd	r24, Y+5	; 0x05
    526e:	88 2f       	mov	r24, r24
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	88 0f       	add	r24, r24
    5278:	99 1f       	adc	r25, r25
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(Address,6);
    5280:	8a 81       	ldd	r24, Y+2	; 0x02
    5282:	80 64       	ori	r24, 0x40	; 64
    5284:	8a 83       	std	Y+2, r24	; 0x02
		LCD_Wirte_Cmd(Address);
    5286:	8a 81       	ldd	r24, Y+2	; 0x02
    5288:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
		for( index = 0 ; index < 8 ; index++ )
    528c:	19 82       	std	Y+1, r1	; 0x01
    528e:	0e c0       	rjmp	.+28     	; 0x52ac <LCD_Store_Customer_Char+0x5a>
		{
			Lcd_Write_Char(pattern[index]);
    5290:	89 81       	ldd	r24, Y+1	; 0x01
    5292:	28 2f       	mov	r18, r24
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	8b 81       	ldd	r24, Y+3	; 0x03
    5298:	9c 81       	ldd	r25, Y+4	; 0x04
    529a:	fc 01       	movw	r30, r24
    529c:	e2 0f       	add	r30, r18
    529e:	f3 1f       	adc	r31, r19
    52a0:	80 81       	ld	r24, Z
    52a2:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
	if (CGram_index<8)
	{
		Address = CGram_index*8 ;
		SET_BIT(Address,6);
		LCD_Wirte_Cmd(Address);
		for( index = 0 ; index < 8 ; index++ )
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	8f 5f       	subi	r24, 0xFF	; 255
    52aa:	89 83       	std	Y+1, r24	; 0x01
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	88 30       	cpi	r24, 0x08	; 8
    52b0:	78 f3       	brcs	.-34     	; 0x5290 <LCD_Store_Customer_Char+0x3e>
		{
			Lcd_Write_Char(pattern[index]);
		}
		LCD_Wirte_Cmd(0x02); 
    52b2:	82 e0       	ldi	r24, 0x02	; 2
    52b4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <LCD_Wirte_Cmd>
	}
}
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	0f 90       	pop	r0
    52c0:	0f 90       	pop	r0
    52c2:	cf 91       	pop	r28
    52c4:	df 91       	pop	r29
    52c6:	08 95       	ret

000052c8 <LCD_Display_Customer_Char>:
 * 			@param [in]					-COL																	 	*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Display_Customer_Char(uint8_t CGRAM_Index , uint8_t ROW , uint8_t Col ) 
{
    52c8:	df 93       	push	r29
    52ca:	cf 93       	push	r28
    52cc:	00 d0       	rcall	.+0      	; 0x52ce <LCD_Display_Customer_Char+0x6>
    52ce:	0f 92       	push	r0
    52d0:	cd b7       	in	r28, 0x3d	; 61
    52d2:	de b7       	in	r29, 0x3e	; 62
    52d4:	89 83       	std	Y+1, r24	; 0x01
    52d6:	6a 83       	std	Y+2, r22	; 0x02
    52d8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GO_TO_INDEX(ROW,Col);
    52da:	8a 81       	ldd	r24, Y+2	; 0x02
    52dc:	6b 81       	ldd	r22, Y+3	; 0x03
    52de:	0e 94 ff 28 	call	0x51fe	; 0x51fe <LCD_GO_TO_INDEX>
	Lcd_Write_Char(CGRAM_Index);
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
}
    52e8:	0f 90       	pop	r0
    52ea:	0f 90       	pop	r0
    52ec:	0f 90       	pop	r0
    52ee:	cf 91       	pop	r28
    52f0:	df 91       	pop	r29
    52f2:	08 95       	ret

000052f4 <LCD_Write_Number>:
void LCD_Write_Number(uint32_t Number) 
{
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	df 93       	push	r29
    52fa:	cf 93       	push	r28
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	2c 97       	sbiw	r28, 0x0c	; 12
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
    530c:	69 87       	std	Y+9, r22	; 0x09
    530e:	7a 87       	std	Y+10, r23	; 0x0a
    5310:	8b 87       	std	Y+11, r24	; 0x0b
    5312:	9c 87       	std	Y+12, r25	; 0x0c
	uint8_t Rem[5] = {0} , count = 0  ;
    5314:	85 e0       	ldi	r24, 0x05	; 5
    5316:	fe 01       	movw	r30, r28
    5318:	34 96       	adiw	r30, 0x04	; 4
    531a:	df 01       	movw	r26, r30
    531c:	98 2f       	mov	r25, r24
    531e:	1d 92       	st	X+, r1
    5320:	9a 95       	dec	r25
    5322:	e9 f7       	brne	.-6      	; 0x531e <LCD_Write_Number+0x2a>
    5324:	1b 82       	std	Y+3, r1	; 0x03
	if (Number<10)
    5326:	89 85       	ldd	r24, Y+9	; 0x09
    5328:	9a 85       	ldd	r25, Y+10	; 0x0a
    532a:	ab 85       	ldd	r26, Y+11	; 0x0b
    532c:	bc 85       	ldd	r27, Y+12	; 0x0c
    532e:	8a 30       	cpi	r24, 0x0A	; 10
    5330:	91 05       	cpc	r25, r1
    5332:	a1 05       	cpc	r26, r1
    5334:	b1 05       	cpc	r27, r1
    5336:	90 f5       	brcc	.+100    	; 0x539c <LCD_Write_Number+0xa8>
	{
		Lcd_Write_Char(Number+48);
    5338:	89 85       	ldd	r24, Y+9	; 0x09
    533a:	80 5d       	subi	r24, 0xD0	; 208
    533c:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
    5340:	35 c0       	rjmp	.+106    	; 0x53ac <LCD_Write_Number+0xb8>
	}
	else
	{
		while(Number>0)
		{
			Rem[count++] = Number % 10 ;
    5342:	8b 81       	ldd	r24, Y+3	; 0x03
    5344:	08 2f       	mov	r16, r24
    5346:	10 e0       	ldi	r17, 0x00	; 0
    5348:	89 85       	ldd	r24, Y+9	; 0x09
    534a:	9a 85       	ldd	r25, Y+10	; 0x0a
    534c:	ab 85       	ldd	r26, Y+11	; 0x0b
    534e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5350:	2a e0       	ldi	r18, 0x0A	; 10
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 e0       	ldi	r20, 0x00	; 0
    5356:	50 e0       	ldi	r21, 0x00	; 0
    5358:	bc 01       	movw	r22, r24
    535a:	cd 01       	movw	r24, r26
    535c:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	28 2f       	mov	r18, r24
    5366:	ce 01       	movw	r24, r28
    5368:	04 96       	adiw	r24, 0x04	; 4
    536a:	fc 01       	movw	r30, r24
    536c:	e0 0f       	add	r30, r16
    536e:	f1 1f       	adc	r31, r17
    5370:	20 83       	st	Z, r18
    5372:	8b 81       	ldd	r24, Y+3	; 0x03
    5374:	8f 5f       	subi	r24, 0xFF	; 255
    5376:	8b 83       	std	Y+3, r24	; 0x03
			Number /= 10 ; 
    5378:	89 85       	ldd	r24, Y+9	; 0x09
    537a:	9a 85       	ldd	r25, Y+10	; 0x0a
    537c:	ab 85       	ldd	r26, Y+11	; 0x0b
    537e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5380:	2a e0       	ldi	r18, 0x0A	; 10
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	40 e0       	ldi	r20, 0x00	; 0
    5386:	50 e0       	ldi	r21, 0x00	; 0
    5388:	bc 01       	movw	r22, r24
    538a:	cd 01       	movw	r24, r26
    538c:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <__udivmodsi4>
    5390:	da 01       	movw	r26, r20
    5392:	c9 01       	movw	r24, r18
    5394:	89 87       	std	Y+9, r24	; 0x09
    5396:	9a 87       	std	Y+10, r25	; 0x0a
    5398:	ab 87       	std	Y+11, r26	; 0x0b
    539a:	bc 87       	std	Y+12, r27	; 0x0c
	{
		Lcd_Write_Char(Number+48);
	}
	else
	{
		while(Number>0)
    539c:	89 85       	ldd	r24, Y+9	; 0x09
    539e:	9a 85       	ldd	r25, Y+10	; 0x0a
    53a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    53a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    53a4:	00 97       	sbiw	r24, 0x00	; 0
    53a6:	a1 05       	cpc	r26, r1
    53a8:	b1 05       	cpc	r27, r1
    53aa:	59 f6       	brne	.-106    	; 0x5342 <LCD_Write_Number+0x4e>
		{
			Rem[count++] = Number % 10 ;
			Number /= 10 ; 
		}
	}
	for (int i = count-1 ; i >= 0 ; i-- )
    53ac:	8b 81       	ldd	r24, Y+3	; 0x03
    53ae:	88 2f       	mov	r24, r24
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	01 97       	sbiw	r24, 0x01	; 1
    53b4:	9a 83       	std	Y+2, r25	; 0x02
    53b6:	89 83       	std	Y+1, r24	; 0x01
    53b8:	10 c0       	rjmp	.+32     	; 0x53da <LCD_Write_Number+0xe6>
	{
		Lcd_Write_Char(Rem[i]+48);		
    53ba:	29 81       	ldd	r18, Y+1	; 0x01
    53bc:	3a 81       	ldd	r19, Y+2	; 0x02
    53be:	ce 01       	movw	r24, r28
    53c0:	04 96       	adiw	r24, 0x04	; 4
    53c2:	fc 01       	movw	r30, r24
    53c4:	e2 0f       	add	r30, r18
    53c6:	f3 1f       	adc	r31, r19
    53c8:	80 81       	ld	r24, Z
    53ca:	80 5d       	subi	r24, 0xD0	; 208
    53cc:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Lcd_Write_Char>
		{
			Rem[count++] = Number % 10 ;
			Number /= 10 ; 
		}
	}
	for (int i = count-1 ; i >= 0 ; i-- )
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
    53d2:	9a 81       	ldd	r25, Y+2	; 0x02
    53d4:	01 97       	sbiw	r24, 0x01	; 1
    53d6:	9a 83       	std	Y+2, r25	; 0x02
    53d8:	89 83       	std	Y+1, r24	; 0x01
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	9a 81       	ldd	r25, Y+2	; 0x02
    53de:	99 23       	and	r25, r25
    53e0:	64 f7       	brge	.-40     	; 0x53ba <LCD_Write_Number+0xc6>
	{
		Lcd_Write_Char(Rem[i]+48);		
	}
    53e2:	2c 96       	adiw	r28, 0x0c	; 12
    53e4:	0f b6       	in	r0, 0x3f	; 63
    53e6:	f8 94       	cli
    53e8:	de bf       	out	0x3e, r29	; 62
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	cd bf       	out	0x3d, r28	; 61
    53ee:	cf 91       	pop	r28
    53f0:	df 91       	pop	r29
    53f2:	1f 91       	pop	r17
    53f4:	0f 91       	pop	r16
    53f6:	08 95       	ret

000053f8 <KeYPad_Init>:
 *  Author: karim
 */ 
#include "Keypad.h"

void KeYPad_Init()
{
    53f8:	df 93       	push	r29
    53fa:	cf 93       	push	r28
    53fc:	cd b7       	in	r28, 0x3d	; 61
    53fe:	de b7       	in	r29, 0x3e	; 62
	Keypad_PORT_Dir = 0xF0 ; 
    5400:	e1 e3       	ldi	r30, 0x31	; 49
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	80 ef       	ldi	r24, 0xF0	; 240
    5406:	80 83       	st	Z, r24
	KeyPAd_PORT_Data= 0xFF ; 
    5408:	e2 e3       	ldi	r30, 0x32	; 50
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	8f ef       	ldi	r24, 0xFF	; 255
    540e:	80 83       	st	Z, r24
}
    5410:	cf 91       	pop	r28
    5412:	df 91       	pop	r29
    5414:	08 95       	ret

00005416 <KeyPAd_Scan>:
char KeyPAd_Scan()
{
    5416:	df 93       	push	r29
    5418:	cf 93       	push	r28
    541a:	cd b7       	in	r28, 0x3d	; 61
    541c:	de b7       	in	r29, 0x3e	; 62
    541e:	62 97       	sbiw	r28, 0x12	; 18
    5420:	0f b6       	in	r0, 0x3f	; 63
    5422:	f8 94       	cli
    5424:	de bf       	out	0x3e, r29	; 62
    5426:	0f be       	out	0x3f, r0	; 63
    5428:	cd bf       	out	0x3d, r28	; 61
	uint8_t ROWS[]={R0,R1,R2,R3};
    542a:	1c 82       	std	Y+4, r1	; 0x04
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	8d 83       	std	Y+5, r24	; 0x05
    5430:	82 e0       	ldi	r24, 0x02	; 2
    5432:	8e 83       	std	Y+6, r24	; 0x06
    5434:	83 e0       	ldi	r24, 0x03	; 3
    5436:	8f 83       	std	Y+7, r24	; 0x07

	uint8_t i,j,Result='a';
    5438:	81 e6       	ldi	r24, 0x61	; 97
    543a:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0 ; i < 4 ; i++)
    543c:	1b 82       	std	Y+3, r1	; 0x03
    543e:	31 c1       	rjmp	.+610    	; 0x56a2 <KeyPAd_Scan+0x28c>
	{
		KeyPAd_PORT_Data |=((1<<4)|(1<<5)|(1<<6)|(1<<7));
    5440:	a2 e3       	ldi	r26, 0x32	; 50
    5442:	b0 e0       	ldi	r27, 0x00	; 0
    5444:	e2 e3       	ldi	r30, 0x32	; 50
    5446:	f0 e0       	ldi	r31, 0x00	; 0
    5448:	80 81       	ld	r24, Z
    544a:	80 6f       	ori	r24, 0xF0	; 240
    544c:	8c 93       	st	X, r24
		CLEAR_BIT(KeyPAd_PORT_Data,(i+4));
    544e:	a2 e3       	ldi	r26, 0x32	; 50
    5450:	b0 e0       	ldi	r27, 0x00	; 0
    5452:	e2 e3       	ldi	r30, 0x32	; 50
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	80 81       	ld	r24, Z
    5458:	48 2f       	mov	r20, r24
    545a:	8b 81       	ldd	r24, Y+3	; 0x03
    545c:	88 2f       	mov	r24, r24
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	9c 01       	movw	r18, r24
    5462:	2c 5f       	subi	r18, 0xFC	; 252
    5464:	3f 4f       	sbci	r19, 0xFF	; 255
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	02 2e       	mov	r0, r18
    546c:	02 c0       	rjmp	.+4      	; 0x5472 <KeyPAd_Scan+0x5c>
    546e:	88 0f       	add	r24, r24
    5470:	99 1f       	adc	r25, r25
    5472:	0a 94       	dec	r0
    5474:	e2 f7       	brpl	.-8      	; 0x546e <KeyPAd_Scan+0x58>
    5476:	80 95       	com	r24
    5478:	84 23       	and	r24, r20
    547a:	8c 93       	st	X, r24
		for(j=0 ; j<4 ; j++)
    547c:	1a 82       	std	Y+2, r1	; 0x02
    547e:	0a c1       	rjmp	.+532    	; 0x5694 <KeyPAd_Scan+0x27e>
		{
			if(!(KeyPad_Pin&(1<<ROWS[j])))
    5480:	e0 e3       	ldi	r30, 0x30	; 48
    5482:	f0 e0       	ldi	r31, 0x00	; 0
    5484:	80 81       	ld	r24, Z
    5486:	48 2f       	mov	r20, r24
    5488:	50 e0       	ldi	r21, 0x00	; 0
    548a:	8a 81       	ldd	r24, Y+2	; 0x02
    548c:	28 2f       	mov	r18, r24
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	ce 01       	movw	r24, r28
    5492:	04 96       	adiw	r24, 0x04	; 4
    5494:	fc 01       	movw	r30, r24
    5496:	e2 0f       	add	r30, r18
    5498:	f3 1f       	adc	r31, r19
    549a:	80 81       	ld	r24, Z
    549c:	88 2f       	mov	r24, r24
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	9a 01       	movw	r18, r20
    54a2:	02 c0       	rjmp	.+4      	; 0x54a8 <KeyPAd_Scan+0x92>
    54a4:	35 95       	asr	r19
    54a6:	27 95       	ror	r18
    54a8:	8a 95       	dec	r24
    54aa:	e2 f7       	brpl	.-8      	; 0x54a4 <KeyPAd_Scan+0x8e>
    54ac:	c9 01       	movw	r24, r18
    54ae:	81 70       	andi	r24, 0x01	; 1
    54b0:	90 70       	andi	r25, 0x00	; 0
    54b2:	00 97       	sbiw	r24, 0x00	; 0
    54b4:	09 f0       	breq	.+2      	; 0x54b8 <KeyPAd_Scan+0xa2>
    54b6:	eb c0       	rjmp	.+470    	; 0x568e <KeyPAd_Scan+0x278>
			{
				while(!(KeyPad_Pin&(1<<ROWS[j])));
    54b8:	e0 e3       	ldi	r30, 0x30	; 48
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	80 81       	ld	r24, Z
    54be:	48 2f       	mov	r20, r24
    54c0:	50 e0       	ldi	r21, 0x00	; 0
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	28 2f       	mov	r18, r24
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	ce 01       	movw	r24, r28
    54ca:	04 96       	adiw	r24, 0x04	; 4
    54cc:	fc 01       	movw	r30, r24
    54ce:	e2 0f       	add	r30, r18
    54d0:	f3 1f       	adc	r31, r19
    54d2:	80 81       	ld	r24, Z
    54d4:	88 2f       	mov	r24, r24
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	9a 01       	movw	r18, r20
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <KeyPAd_Scan+0xca>
    54dc:	35 95       	asr	r19
    54de:	27 95       	ror	r18
    54e0:	8a 95       	dec	r24
    54e2:	e2 f7       	brpl	.-8      	; 0x54dc <KeyPAd_Scan+0xc6>
    54e4:	c9 01       	movw	r24, r18
    54e6:	81 70       	andi	r24, 0x01	; 1
    54e8:	90 70       	andi	r25, 0x00	; 0
    54ea:	00 97       	sbiw	r24, 0x00	; 0
    54ec:	29 f3       	breq	.-54     	; 0x54b8 <KeyPAd_Scan+0xa2>
				switch(i)
    54ee:	8b 81       	ldd	r24, Y+3	; 0x03
    54f0:	28 2f       	mov	r18, r24
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	3a 8b       	std	Y+18, r19	; 0x12
    54f6:	29 8b       	std	Y+17, r18	; 0x11
    54f8:	89 89       	ldd	r24, Y+17	; 0x11
    54fa:	9a 89       	ldd	r25, Y+18	; 0x12
    54fc:	81 30       	cpi	r24, 0x01	; 1
    54fe:	91 05       	cpc	r25, r1
    5500:	09 f4       	brne	.+2      	; 0x5504 <KeyPAd_Scan+0xee>
    5502:	42 c0       	rjmp	.+132    	; 0x5588 <KeyPAd_Scan+0x172>
    5504:	29 89       	ldd	r18, Y+17	; 0x11
    5506:	3a 89       	ldd	r19, Y+18	; 0x12
    5508:	22 30       	cpi	r18, 0x02	; 2
    550a:	31 05       	cpc	r19, r1
    550c:	2c f4       	brge	.+10     	; 0x5518 <KeyPAd_Scan+0x102>
    550e:	89 89       	ldd	r24, Y+17	; 0x11
    5510:	9a 89       	ldd	r25, Y+18	; 0x12
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	71 f0       	breq	.+28     	; 0x5532 <KeyPAd_Scan+0x11c>
    5516:	b8 c0       	rjmp	.+368    	; 0x5688 <KeyPAd_Scan+0x272>
    5518:	29 89       	ldd	r18, Y+17	; 0x11
    551a:	3a 89       	ldd	r19, Y+18	; 0x12
    551c:	22 30       	cpi	r18, 0x02	; 2
    551e:	31 05       	cpc	r19, r1
    5520:	09 f4       	brne	.+2      	; 0x5524 <KeyPAd_Scan+0x10e>
    5522:	5d c0       	rjmp	.+186    	; 0x55de <KeyPAd_Scan+0x1c8>
    5524:	89 89       	ldd	r24, Y+17	; 0x11
    5526:	9a 89       	ldd	r25, Y+18	; 0x12
    5528:	83 30       	cpi	r24, 0x03	; 3
    552a:	91 05       	cpc	r25, r1
    552c:	09 f4       	brne	.+2      	; 0x5530 <KeyPAd_Scan+0x11a>
    552e:	82 c0       	rjmp	.+260    	; 0x5634 <KeyPAd_Scan+0x21e>
    5530:	ab c0       	rjmp	.+342    	; 0x5688 <KeyPAd_Scan+0x272>
				{
					case 0 :
						switch(j)
    5532:	8a 81       	ldd	r24, Y+2	; 0x02
    5534:	28 2f       	mov	r18, r24
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	38 8b       	std	Y+16, r19	; 0x10
    553a:	2f 87       	std	Y+15, r18	; 0x0f
    553c:	8f 85       	ldd	r24, Y+15	; 0x0f
    553e:	98 89       	ldd	r25, Y+16	; 0x10
    5540:	81 30       	cpi	r24, 0x01	; 1
    5542:	91 05       	cpc	r25, r1
    5544:	c1 f0       	breq	.+48     	; 0x5576 <KeyPAd_Scan+0x160>
    5546:	2f 85       	ldd	r18, Y+15	; 0x0f
    5548:	38 89       	ldd	r19, Y+16	; 0x10
    554a:	22 30       	cpi	r18, 0x02	; 2
    554c:	31 05       	cpc	r19, r1
    554e:	2c f4       	brge	.+10     	; 0x555a <KeyPAd_Scan+0x144>
    5550:	8f 85       	ldd	r24, Y+15	; 0x0f
    5552:	98 89       	ldd	r25, Y+16	; 0x10
    5554:	00 97       	sbiw	r24, 0x00	; 0
    5556:	61 f0       	breq	.+24     	; 0x5570 <KeyPAd_Scan+0x15a>
    5558:	97 c0       	rjmp	.+302    	; 0x5688 <KeyPAd_Scan+0x272>
    555a:	2f 85       	ldd	r18, Y+15	; 0x0f
    555c:	38 89       	ldd	r19, Y+16	; 0x10
    555e:	22 30       	cpi	r18, 0x02	; 2
    5560:	31 05       	cpc	r19, r1
    5562:	61 f0       	breq	.+24     	; 0x557c <KeyPAd_Scan+0x166>
    5564:	8f 85       	ldd	r24, Y+15	; 0x0f
    5566:	98 89       	ldd	r25, Y+16	; 0x10
    5568:	83 30       	cpi	r24, 0x03	; 3
    556a:	91 05       	cpc	r25, r1
    556c:	51 f0       	breq	.+20     	; 0x5582 <KeyPAd_Scan+0x16c>
    556e:	8c c0       	rjmp	.+280    	; 0x5688 <KeyPAd_Scan+0x272>
						{
							case 0:Result='7';break;
    5570:	87 e3       	ldi	r24, 0x37	; 55
    5572:	89 83       	std	Y+1, r24	; 0x01
    5574:	89 c0       	rjmp	.+274    	; 0x5688 <KeyPAd_Scan+0x272>
							case 1:Result='4';break;
    5576:	84 e3       	ldi	r24, 0x34	; 52
    5578:	89 83       	std	Y+1, r24	; 0x01
    557a:	86 c0       	rjmp	.+268    	; 0x5688 <KeyPAd_Scan+0x272>
							case 2:Result='1';break;
    557c:	81 e3       	ldi	r24, 0x31	; 49
    557e:	89 83       	std	Y+1, r24	; 0x01
    5580:	83 c0       	rjmp	.+262    	; 0x5688 <KeyPAd_Scan+0x272>
							case 3:Result='?';break;
    5582:	8f e3       	ldi	r24, 0x3F	; 63
    5584:	89 83       	std	Y+1, r24	; 0x01
    5586:	80 c0       	rjmp	.+256    	; 0x5688 <KeyPAd_Scan+0x272>
						}
					break;
					case 1:
						switch(j)
    5588:	8a 81       	ldd	r24, Y+2	; 0x02
    558a:	28 2f       	mov	r18, r24
    558c:	30 e0       	ldi	r19, 0x00	; 0
    558e:	3e 87       	std	Y+14, r19	; 0x0e
    5590:	2d 87       	std	Y+13, r18	; 0x0d
    5592:	8d 85       	ldd	r24, Y+13	; 0x0d
    5594:	9e 85       	ldd	r25, Y+14	; 0x0e
    5596:	81 30       	cpi	r24, 0x01	; 1
    5598:	91 05       	cpc	r25, r1
    559a:	c1 f0       	breq	.+48     	; 0x55cc <KeyPAd_Scan+0x1b6>
    559c:	2d 85       	ldd	r18, Y+13	; 0x0d
    559e:	3e 85       	ldd	r19, Y+14	; 0x0e
    55a0:	22 30       	cpi	r18, 0x02	; 2
    55a2:	31 05       	cpc	r19, r1
    55a4:	2c f4       	brge	.+10     	; 0x55b0 <KeyPAd_Scan+0x19a>
    55a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    55a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    55aa:	00 97       	sbiw	r24, 0x00	; 0
    55ac:	61 f0       	breq	.+24     	; 0x55c6 <KeyPAd_Scan+0x1b0>
    55ae:	6c c0       	rjmp	.+216    	; 0x5688 <KeyPAd_Scan+0x272>
    55b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    55b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    55b4:	22 30       	cpi	r18, 0x02	; 2
    55b6:	31 05       	cpc	r19, r1
    55b8:	61 f0       	breq	.+24     	; 0x55d2 <KeyPAd_Scan+0x1bc>
    55ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    55bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55be:	83 30       	cpi	r24, 0x03	; 3
    55c0:	91 05       	cpc	r25, r1
    55c2:	51 f0       	breq	.+20     	; 0x55d8 <KeyPAd_Scan+0x1c2>
    55c4:	61 c0       	rjmp	.+194    	; 0x5688 <KeyPAd_Scan+0x272>
						{
							case 0:Result='8';break;
    55c6:	88 e3       	ldi	r24, 0x38	; 56
    55c8:	89 83       	std	Y+1, r24	; 0x01
    55ca:	5e c0       	rjmp	.+188    	; 0x5688 <KeyPAd_Scan+0x272>
							case 1:Result='5';break;
    55cc:	85 e3       	ldi	r24, 0x35	; 53
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	5b c0       	rjmp	.+182    	; 0x5688 <KeyPAd_Scan+0x272>
							case 2:Result='2';break;
    55d2:	82 e3       	ldi	r24, 0x32	; 50
    55d4:	89 83       	std	Y+1, r24	; 0x01
    55d6:	58 c0       	rjmp	.+176    	; 0x5688 <KeyPAd_Scan+0x272>
							case 3:Result='0';break;
    55d8:	80 e3       	ldi	r24, 0x30	; 48
    55da:	89 83       	std	Y+1, r24	; 0x01
    55dc:	55 c0       	rjmp	.+170    	; 0x5688 <KeyPAd_Scan+0x272>
						}
					break;
					case 2 :
						switch(j)
    55de:	8a 81       	ldd	r24, Y+2	; 0x02
    55e0:	28 2f       	mov	r18, r24
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	3c 87       	std	Y+12, r19	; 0x0c
    55e6:	2b 87       	std	Y+11, r18	; 0x0b
    55e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    55ec:	81 30       	cpi	r24, 0x01	; 1
    55ee:	91 05       	cpc	r25, r1
    55f0:	c1 f0       	breq	.+48     	; 0x5622 <KeyPAd_Scan+0x20c>
    55f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    55f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    55f6:	22 30       	cpi	r18, 0x02	; 2
    55f8:	31 05       	cpc	r19, r1
    55fa:	2c f4       	brge	.+10     	; 0x5606 <KeyPAd_Scan+0x1f0>
    55fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    55fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5600:	00 97       	sbiw	r24, 0x00	; 0
    5602:	61 f0       	breq	.+24     	; 0x561c <KeyPAd_Scan+0x206>
    5604:	41 c0       	rjmp	.+130    	; 0x5688 <KeyPAd_Scan+0x272>
    5606:	2b 85       	ldd	r18, Y+11	; 0x0b
    5608:	3c 85       	ldd	r19, Y+12	; 0x0c
    560a:	22 30       	cpi	r18, 0x02	; 2
    560c:	31 05       	cpc	r19, r1
    560e:	61 f0       	breq	.+24     	; 0x5628 <KeyPAd_Scan+0x212>
    5610:	8b 85       	ldd	r24, Y+11	; 0x0b
    5612:	9c 85       	ldd	r25, Y+12	; 0x0c
    5614:	83 30       	cpi	r24, 0x03	; 3
    5616:	91 05       	cpc	r25, r1
    5618:	51 f0       	breq	.+20     	; 0x562e <KeyPAd_Scan+0x218>
    561a:	36 c0       	rjmp	.+108    	; 0x5688 <KeyPAd_Scan+0x272>
						{
							case 0:Result='9';break;
    561c:	89 e3       	ldi	r24, 0x39	; 57
    561e:	89 83       	std	Y+1, r24	; 0x01
    5620:	33 c0       	rjmp	.+102    	; 0x5688 <KeyPAd_Scan+0x272>
							case 1:Result='6';break;
    5622:	86 e3       	ldi	r24, 0x36	; 54
    5624:	89 83       	std	Y+1, r24	; 0x01
    5626:	30 c0       	rjmp	.+96     	; 0x5688 <KeyPAd_Scan+0x272>
							case 2:Result='3';break;
    5628:	83 e3       	ldi	r24, 0x33	; 51
    562a:	89 83       	std	Y+1, r24	; 0x01
    562c:	2d c0       	rjmp	.+90     	; 0x5688 <KeyPAd_Scan+0x272>
							case 3:Result='=';break;
    562e:	8d e3       	ldi	r24, 0x3D	; 61
    5630:	89 83       	std	Y+1, r24	; 0x01
    5632:	2a c0       	rjmp	.+84     	; 0x5688 <KeyPAd_Scan+0x272>
						}
					break;
					case 3 :
						switch(j)
    5634:	8a 81       	ldd	r24, Y+2	; 0x02
    5636:	28 2f       	mov	r18, r24
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	3a 87       	std	Y+10, r19	; 0x0a
    563c:	29 87       	std	Y+9, r18	; 0x09
    563e:	89 85       	ldd	r24, Y+9	; 0x09
    5640:	9a 85       	ldd	r25, Y+10	; 0x0a
    5642:	81 30       	cpi	r24, 0x01	; 1
    5644:	91 05       	cpc	r25, r1
    5646:	c1 f0       	breq	.+48     	; 0x5678 <KeyPAd_Scan+0x262>
    5648:	29 85       	ldd	r18, Y+9	; 0x09
    564a:	3a 85       	ldd	r19, Y+10	; 0x0a
    564c:	22 30       	cpi	r18, 0x02	; 2
    564e:	31 05       	cpc	r19, r1
    5650:	2c f4       	brge	.+10     	; 0x565c <KeyPAd_Scan+0x246>
    5652:	89 85       	ldd	r24, Y+9	; 0x09
    5654:	9a 85       	ldd	r25, Y+10	; 0x0a
    5656:	00 97       	sbiw	r24, 0x00	; 0
    5658:	61 f0       	breq	.+24     	; 0x5672 <KeyPAd_Scan+0x25c>
    565a:	16 c0       	rjmp	.+44     	; 0x5688 <KeyPAd_Scan+0x272>
    565c:	29 85       	ldd	r18, Y+9	; 0x09
    565e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5660:	22 30       	cpi	r18, 0x02	; 2
    5662:	31 05       	cpc	r19, r1
    5664:	61 f0       	breq	.+24     	; 0x567e <KeyPAd_Scan+0x268>
    5666:	89 85       	ldd	r24, Y+9	; 0x09
    5668:	9a 85       	ldd	r25, Y+10	; 0x0a
    566a:	83 30       	cpi	r24, 0x03	; 3
    566c:	91 05       	cpc	r25, r1
    566e:	51 f0       	breq	.+20     	; 0x5684 <KeyPAd_Scan+0x26e>
    5670:	0b c0       	rjmp	.+22     	; 0x5688 <KeyPAd_Scan+0x272>
						{
							case 0:Result='/';break;
    5672:	8f e2       	ldi	r24, 0x2F	; 47
    5674:	89 83       	std	Y+1, r24	; 0x01
    5676:	08 c0       	rjmp	.+16     	; 0x5688 <KeyPAd_Scan+0x272>
							case 1:Result='*';break;
    5678:	8a e2       	ldi	r24, 0x2A	; 42
    567a:	89 83       	std	Y+1, r24	; 0x01
    567c:	05 c0       	rjmp	.+10     	; 0x5688 <KeyPAd_Scan+0x272>
							case 2:Result='-';break;
    567e:	8d e2       	ldi	r24, 0x2D	; 45
    5680:	89 83       	std	Y+1, r24	; 0x01
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <KeyPAd_Scan+0x272>
							case 3:Result='+';break;
    5684:	8b e2       	ldi	r24, 0x2B	; 43
    5686:	89 83       	std	Y+1, r24	; 0x01
						}
					break;
				}
				return Result ;
    5688:	99 81       	ldd	r25, Y+1	; 0x01
    568a:	98 87       	std	Y+8, r25	; 0x08
    568c:	10 c0       	rjmp	.+32     	; 0x56ae <KeyPAd_Scan+0x298>
	uint8_t i,j,Result='a';
	for(i = 0 ; i < 4 ; i++)
	{
		KeyPAd_PORT_Data |=((1<<4)|(1<<5)|(1<<6)|(1<<7));
		CLEAR_BIT(KeyPAd_PORT_Data,(i+4));
		for(j=0 ; j<4 ; j++)
    568e:	8a 81       	ldd	r24, Y+2	; 0x02
    5690:	8f 5f       	subi	r24, 0xFF	; 255
    5692:	8a 83       	std	Y+2, r24	; 0x02
    5694:	8a 81       	ldd	r24, Y+2	; 0x02
    5696:	84 30       	cpi	r24, 0x04	; 4
    5698:	08 f4       	brcc	.+2      	; 0x569c <KeyPAd_Scan+0x286>
    569a:	f2 ce       	rjmp	.-540    	; 0x5480 <KeyPAd_Scan+0x6a>
char KeyPAd_Scan()
{
	uint8_t ROWS[]={R0,R1,R2,R3};

	uint8_t i,j,Result='a';
	for(i = 0 ; i < 4 ; i++)
    569c:	8b 81       	ldd	r24, Y+3	; 0x03
    569e:	8f 5f       	subi	r24, 0xFF	; 255
    56a0:	8b 83       	std	Y+3, r24	; 0x03
    56a2:	8b 81       	ldd	r24, Y+3	; 0x03
    56a4:	84 30       	cpi	r24, 0x04	; 4
    56a6:	08 f4       	brcc	.+2      	; 0x56aa <KeyPAd_Scan+0x294>
    56a8:	cb ce       	rjmp	.-618    	; 0x5440 <KeyPAd_Scan+0x2a>
				}
				return Result ;
			}
		}
	}
	return Result ;
    56aa:	29 81       	ldd	r18, Y+1	; 0x01
    56ac:	28 87       	std	Y+8, r18	; 0x08
    56ae:	88 85       	ldd	r24, Y+8	; 0x08
}
    56b0:	62 96       	adiw	r28, 0x12	; 18
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	f8 94       	cli
    56b6:	de bf       	out	0x3e, r29	; 62
    56b8:	0f be       	out	0x3f, r0	; 63
    56ba:	cd bf       	out	0x3d, r28	; 61
    56bc:	cf 91       	pop	r28
    56be:	df 91       	pop	r29
    56c0:	08 95       	ret

000056c2 <JoyStick_voidInit>:

#include "JoyStick_Interface.h"
#include "ADC_INT.h"

void JoyStick_voidInit()
{
    56c2:	df 93       	push	r29
    56c4:	cf 93       	push	r28
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
	ADC_INIT() ;
    56ca:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <ADC_INIT>
	ADC_Select_Channel(CHANNEL_0);
    56ce:	80 e0       	ldi	r24, 0x00	; 0
    56d0:	0e 94 8b 18 	call	0x3116	; 0x3116 <ADC_Select_Channel>
	ADC_Enable_Triggring_Mode(FREE_RUNNIG);
    56d4:	85 e1       	ldi	r24, 0x15	; 21
    56d6:	0e 94 a7 18 	call	0x314e	; 0x314e <ADC_Enable_Triggring_Mode>

	DIO_Write_Pin_Dir(VRX_PORT,VRX_PIN,LOW) ;
    56da:	80 e0       	ldi	r24, 0x00	; 0
    56dc:	60 e0       	ldi	r22, 0x00	; 0
    56de:	40 e0       	ldi	r20, 0x00	; 0
    56e0:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(SW_PORT,SW_PIN,LOW) ;
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	64 e0       	ldi	r22, 0x04	; 4
    56e8:	40 e0       	ldi	r20, 0x00	; 0
    56ea:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
}
    56ee:	cf 91       	pop	r28
    56f0:	df 91       	pop	r29
    56f2:	08 95       	ret

000056f4 <JoyStick_voidStart>:

void JoyStick_voidStart(uint16_t Data)
{
    56f4:	df 93       	push	r29
    56f6:	cf 93       	push	r28
    56f8:	00 d0       	rcall	.+0      	; 0x56fa <JoyStick_voidStart+0x6>
    56fa:	cd b7       	in	r28, 0x3d	; 61
    56fc:	de b7       	in	r29, 0x3e	; 62
    56fe:	9a 83       	std	Y+2, r25	; 0x02
    5700:	89 83       	std	Y+1, r24	; 0x01
	ADC_Start() ;
    5702:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <ADC_Start>
	ADC_PollingSystem() ;
    5706:	0e 94 f5 17 	call	0x2fea	; 0x2fea <ADC_PollingSystem>
	ADC_Read(&Data) ;
    570a:	ce 01       	movw	r24, r28
    570c:	01 96       	adiw	r24, 0x01	; 1
    570e:	0e 94 3c 18 	call	0x3078	; 0x3078 <ADC_Read>
}
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	cf 91       	pop	r28
    5718:	df 91       	pop	r29
    571a:	08 95       	ret

0000571c <EEPROM_INTT>:
#include "IIC_Int.h"
#include "avr/delay.h"


ES_t EEPROM_INTT(uint8_t Address) 
{
    571c:	df 93       	push	r29
    571e:	cf 93       	push	r28
    5720:	00 d0       	rcall	.+0      	; 0x5722 <EEPROM_INTT+0x6>
    5722:	cd b7       	in	r28, 0x3d	; 61
    5724:	de b7       	in	r29, 0x3e	; 62
    5726:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Loc_ErrorState = NO_Error ; 
    5728:	19 82       	std	Y+1, r1	; 0x01

	IIC_MasterInit();
    572a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <IIC_MasterInit>
	
	if (IIC_SlaveInit(Address)!=NO_Error)
    572e:	8a 81       	ldd	r24, Y+2	; 0x02
    5730:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <IIC_SlaveInit>
	{
	}
	
	return Loc_ErrorState ; 
    5734:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    5736:	0f 90       	pop	r0
    5738:	0f 90       	pop	r0
    573a:	cf 91       	pop	r28
    573c:	df 91       	pop	r29
    573e:	08 95       	ret

00005740 <EEPROM_WriteData>:

ES_t EEPROM_WriteData(uint16_t Address , uint8_t Data ) 
{
    5740:	df 93       	push	r29
    5742:	cf 93       	push	r28
    5744:	00 d0       	rcall	.+0      	; 0x5746 <EEPROM_WriteData+0x6>
    5746:	00 d0       	rcall	.+0      	; 0x5748 <EEPROM_WriteData+0x8>
    5748:	00 d0       	rcall	.+0      	; 0x574a <EEPROM_WriteData+0xa>
    574a:	cd b7       	in	r28, 0x3d	; 61
    574c:	de b7       	in	r29, 0x3e	; 62
    574e:	9d 83       	std	Y+5, r25	; 0x05
    5750:	8c 83       	std	Y+4, r24	; 0x04
    5752:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Loc_ErrorState = NO_Error ;
    5754:	1b 82       	std	Y+3, r1	; 0x03
	
	#if EEPROM_TYPE == EIGHT_KBIT
	
	uint8_t Loc_Address = ((0xA0 | (EEPROM_A2_State<<3) | (((Address>>8)&3)<<1))>>1) ;
    5756:	8c 81       	ldd	r24, Y+4	; 0x04
    5758:	9d 81       	ldd	r25, Y+5	; 0x05
    575a:	89 2f       	mov	r24, r25
    575c:	99 27       	eor	r25, r25
    575e:	83 70       	andi	r24, 0x03	; 3
    5760:	90 70       	andi	r25, 0x00	; 0
    5762:	88 0f       	add	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	80 6a       	ori	r24, 0xA0	; 160
    5768:	96 95       	lsr	r25
    576a:	87 95       	ror	r24
    576c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Loc_ByteAddress = (uint8_t)Address ; 
    576e:	8c 81       	ldd	r24, Y+4	; 0x04
    5770:	89 83       	std	Y+1, r24	; 0x01
#endif
	
	if (IIC_StartCondition()==NOError)
    5772:	0e 94 0f 10 	call	0x201e	; 0x201e <IIC_StartCondition>
    5776:	88 23       	and	r24, r24
    5778:	91 f4       	brne	.+36     	; 0x579e <EEPROM_WriteData+0x5e>
	{
		if (IIC_SendSlaveAdress(Loc_Address,0) == NOError)
    577a:	8a 81       	ldd	r24, Y+2	; 0x02
    577c:	60 e0       	ldi	r22, 0x00	; 0
    577e:	0e 94 47 10 	call	0x208e	; 0x208e <IIC_SendSlaveAdress>
    5782:	88 23       	and	r24, r24
    5784:	61 f4       	brne	.+24     	; 0x579e <EEPROM_WriteData+0x5e>
		{
			if (IIC_MasterSendData_ACK(Loc_ByteAddress)==NOError)
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	0e 94 75 10 	call	0x20ea	; 0x20ea <IIC_MasterSendData_ACK>
    578c:	88 23       	and	r24, r24
    578e:	39 f4       	brne	.+14     	; 0x579e <EEPROM_WriteData+0x5e>
			{				
				if (IIC_MasterSendData_ACK(Data)==NOError)
    5790:	8e 81       	ldd	r24, Y+6	; 0x06
    5792:	0e 94 75 10 	call	0x20ea	; 0x20ea <IIC_MasterSendData_ACK>
    5796:	88 23       	and	r24, r24
    5798:	11 f4       	brne	.+4      	; 0x579e <EEPROM_WriteData+0x5e>
				{
					IIC_StopCondition();
    579a:	0e 94 40 11 	call	0x2280	; 0x2280 <IIC_StopCondition>
			}

		}
	}
	
	return Loc_ErrorState ;
    579e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    57a0:	26 96       	adiw	r28, 0x06	; 6
    57a2:	0f b6       	in	r0, 0x3f	; 63
    57a4:	f8 94       	cli
    57a6:	de bf       	out	0x3e, r29	; 62
    57a8:	0f be       	out	0x3f, r0	; 63
    57aa:	cd bf       	out	0x3d, r28	; 61
    57ac:	cf 91       	pop	r28
    57ae:	df 91       	pop	r29
    57b0:	08 95       	ret

000057b2 <EEPROM_ReadData>:


ES_t EEPROM_ReadData(uint16_t Address , uint8_t* Data ) 
{
    57b2:	df 93       	push	r29
    57b4:	cf 93       	push	r28
    57b6:	cd b7       	in	r28, 0x3d	; 61
    57b8:	de b7       	in	r29, 0x3e	; 62
    57ba:	27 97       	sbiw	r28, 0x07	; 7
    57bc:	0f b6       	in	r0, 0x3f	; 63
    57be:	f8 94       	cli
    57c0:	de bf       	out	0x3e, r29	; 62
    57c2:	0f be       	out	0x3f, r0	; 63
    57c4:	cd bf       	out	0x3d, r28	; 61
    57c6:	9d 83       	std	Y+5, r25	; 0x05
    57c8:	8c 83       	std	Y+4, r24	; 0x04
    57ca:	7f 83       	std	Y+7, r23	; 0x07
    57cc:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Loc_ErrorState = NO_Error ;
    57ce:	1b 82       	std	Y+3, r1	; 0x03
	
	#if EEPROM_TYPE == EIGHT_KBIT
	 
	uint8_t Loc_Address = ((0xA0 | (EEPROM_A2_State<<3) | (((Address>>8)&3)<<1))>>1) ;
    57d0:	8c 81       	ldd	r24, Y+4	; 0x04
    57d2:	9d 81       	ldd	r25, Y+5	; 0x05
    57d4:	89 2f       	mov	r24, r25
    57d6:	99 27       	eor	r25, r25
    57d8:	83 70       	andi	r24, 0x03	; 3
    57da:	90 70       	andi	r25, 0x00	; 0
    57dc:	88 0f       	add	r24, r24
    57de:	99 1f       	adc	r25, r25
    57e0:	80 6a       	ori	r24, 0xA0	; 160
    57e2:	96 95       	lsr	r25
    57e4:	87 95       	ror	r24
    57e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Loc_ByteAddress = (uint8_t)Address ;
    57e8:	8c 81       	ldd	r24, Y+4	; 0x04
    57ea:	89 83       	std	Y+1, r24	; 0x01
	
	#endif


	if (IIC_StartCondition()==NOError)
    57ec:	0e 94 0f 10 	call	0x201e	; 0x201e <IIC_StartCondition>
    57f0:	88 23       	and	r24, r24
    57f2:	e9 f4       	brne	.+58     	; 0x582e <EEPROM_ReadData+0x7c>
	{
		if (IIC_SendSlaveAdress(Loc_Address,0)==NOError)
    57f4:	8a 81       	ldd	r24, Y+2	; 0x02
    57f6:	60 e0       	ldi	r22, 0x00	; 0
    57f8:	0e 94 47 10 	call	0x208e	; 0x208e <IIC_SendSlaveAdress>
    57fc:	88 23       	and	r24, r24
    57fe:	b9 f4       	brne	.+46     	; 0x582e <EEPROM_ReadData+0x7c>
		{
			if (IIC_MasterSendData_ACK(Loc_ByteAddress)==NOError)
    5800:	89 81       	ldd	r24, Y+1	; 0x01
    5802:	0e 94 75 10 	call	0x20ea	; 0x20ea <IIC_MasterSendData_ACK>
    5806:	88 23       	and	r24, r24
    5808:	91 f4       	brne	.+36     	; 0x582e <EEPROM_ReadData+0x7c>
			{
				if (IIC_RepeatedStartCondition()==NOError)
    580a:	0e 94 2f 10 	call	0x205e	; 0x205e <IIC_RepeatedStartCondition>
    580e:	88 23       	and	r24, r24
    5810:	71 f4       	brne	.+28     	; 0x582e <EEPROM_ReadData+0x7c>
				{
					if (IIC_SendSlaveAdress(Loc_Address,1)==NOError)
    5812:	8a 81       	ldd	r24, Y+2	; 0x02
    5814:	61 e0       	ldi	r22, 0x01	; 1
    5816:	0e 94 47 10 	call	0x208e	; 0x208e <IIC_SendSlaveAdress>
    581a:	88 23       	and	r24, r24
    581c:	41 f4       	brne	.+16     	; 0x582e <EEPROM_ReadData+0x7c>
					{
						if (IIC_Master_ReadData_NACK(Data)==NOError)
    581e:	8e 81       	ldd	r24, Y+6	; 0x06
    5820:	9f 81       	ldd	r25, Y+7	; 0x07
    5822:	0e 94 15 11 	call	0x222a	; 0x222a <IIC_Master_ReadData_NACK>
    5826:	88 23       	and	r24, r24
    5828:	11 f4       	brne	.+4      	; 0x582e <EEPROM_ReadData+0x7c>
						{
							IIC_StopCondition();
    582a:	0e 94 40 11 	call	0x2280	; 0x2280 <IIC_StopCondition>
			}
		}
	}
	

	return Loc_ErrorState ;
    582e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5830:	27 96       	adiw	r28, 0x07	; 7
    5832:	0f b6       	in	r0, 0x3f	; 63
    5834:	f8 94       	cli
    5836:	de bf       	out	0x3e, r29	; 62
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	cd bf       	out	0x3d, r28	; 61
    583c:	cf 91       	pop	r28
    583e:	df 91       	pop	r29
    5840:	08 95       	ret

00005842 <DC_MotorInit>:
#include "DC_Motor_Interface.h"
#include "DIO.h"
#include "GIE.h"

void DC_MotorInit()
{
    5842:	df 93       	push	r29
    5844:	cf 93       	push	r28
    5846:	cd b7       	in	r28, 0x3d	; 61
    5848:	de b7       	in	r29, 0x3e	; 62
	PWM_Init() ;
    584a:	0e 94 97 07 	call	0xf2e	; 0xf2e <PWM_Init>
	Timer1_voidOCAEnableInterrupt() ;
    584e:	0e 94 98 0a 	call	0x1530	; 0x1530 <Timer1_voidOCAEnableInterrupt>
	EnableGlobalEnterrupt() ;
    5852:	0e 94 58 11 	call	0x22b0	; 0x22b0 <EnableGlobalEnterrupt>

#ifdef DC_MOTOR_1
	DIO_Write_Pin_Dir(DC_IN1_PORT,DC_IN1_PIN,OUT);	
    5856:	82 e0       	ldi	r24, 0x02	; 2
    5858:	60 e0       	ldi	r22, 0x00	; 0
    585a:	41 e0       	ldi	r20, 0x01	; 1
    585c:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_IN2_PORT,DC_IN2_PIN,OUT);
    5860:	82 e0       	ldi	r24, 0x02	; 2
    5862:	61 e0       	ldi	r22, 0x01	; 1
    5864:	41 e0       	ldi	r20, 0x01	; 1
    5866:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_EN1_PORT,DC_EN1_PIN,OUT);
    586a:	83 e0       	ldi	r24, 0x03	; 3
    586c:	65 e0       	ldi	r22, 0x05	; 5
    586e:	41 e0       	ldi	r20, 0x01	; 1
    5870:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
#endif
#ifdef DC_MOTOR_2
	DIO_Write_Pin_Dir(DC_IN3_PORT,DC_IN3_PIN,OUT);
    5874:	82 e0       	ldi	r24, 0x02	; 2
    5876:	60 e0       	ldi	r22, 0x00	; 0
    5878:	41 e0       	ldi	r20, 0x01	; 1
    587a:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_IN4_PORT,DC_IN4_PIN,OUT);
    587e:	82 e0       	ldi	r24, 0x02	; 2
    5880:	61 e0       	ldi	r22, 0x01	; 1
    5882:	41 e0       	ldi	r20, 0x01	; 1
    5884:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_EN2_PORT,DC_EN2_PIN,OUT);
    5888:	83 e0       	ldi	r24, 0x03	; 3
    588a:	65 e0       	ldi	r22, 0x05	; 5
    588c:	41 e0       	ldi	r20, 0x01	; 1
    588e:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
#endif

#ifdef DC_MOTOR_3
	DIO_Write_Pin_Dir(DC_IN7_PORT,DC_IN7_PIN,OUT);
    5892:	82 e0       	ldi	r24, 0x02	; 2
    5894:	62 e0       	ldi	r22, 0x02	; 2
    5896:	41 e0       	ldi	r20, 0x01	; 1
    5898:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_IN8_PORT,DC_IN8_PIN,OUT);
    589c:	82 e0       	ldi	r24, 0x02	; 2
    589e:	63 e0       	ldi	r22, 0x03	; 3
    58a0:	41 e0       	ldi	r20, 0x01	; 1
    58a2:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_EN3_PORT,DC_EN3_PIN,OUT);
    58a6:	83 e0       	ldi	r24, 0x03	; 3
    58a8:	64 e0       	ldi	r22, 0x04	; 4
    58aa:	41 e0       	ldi	r20, 0x01	; 1
    58ac:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
#endif

#ifdef DC_MOTOR_4
	DIO_Write_Pin_Dir(DC_IN7_PORT,DC_IN7_PIN,OUT);
    58b0:	82 e0       	ldi	r24, 0x02	; 2
    58b2:	62 e0       	ldi	r22, 0x02	; 2
    58b4:	41 e0       	ldi	r20, 0x01	; 1
    58b6:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_IN8_PORT,DC_IN8_PIN,OUT);
    58ba:	82 e0       	ldi	r24, 0x02	; 2
    58bc:	63 e0       	ldi	r22, 0x03	; 3
    58be:	41 e0       	ldi	r20, 0x01	; 1
    58c0:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(DC_EN4_PORT,DC_EN4_PIN,OUT);
    58c4:	83 e0       	ldi	r24, 0x03	; 3
    58c6:	64 e0       	ldi	r22, 0x04	; 4
    58c8:	41 e0       	ldi	r20, 0x01	; 1
    58ca:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
#endif


}
    58ce:	cf 91       	pop	r28
    58d0:	df 91       	pop	r29
    58d2:	08 95       	ret

000058d4 <DC_MotorMoveRight>:
void DC_MotorMoveRight(uint8_t Motor_Number)
{
    58d4:	df 93       	push	r29
    58d6:	cf 93       	push	r28
    58d8:	00 d0       	rcall	.+0      	; 0x58da <DC_MotorMoveRight+0x6>
    58da:	0f 92       	push	r0
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Motor_Number)
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
    58e4:	28 2f       	mov	r18, r24
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	3b 83       	std	Y+3, r19	; 0x03
    58ea:	2a 83       	std	Y+2, r18	; 0x02
    58ec:	8a 81       	ldd	r24, Y+2	; 0x02
    58ee:	9b 81       	ldd	r25, Y+3	; 0x03
    58f0:	82 30       	cpi	r24, 0x02	; 2
    58f2:	91 05       	cpc	r25, r1
    58f4:	09 f1       	breq	.+66     	; 0x5938 <DC_MotorMoveRight+0x64>
    58f6:	2a 81       	ldd	r18, Y+2	; 0x02
    58f8:	3b 81       	ldd	r19, Y+3	; 0x03
    58fa:	23 30       	cpi	r18, 0x03	; 3
    58fc:	31 05       	cpc	r19, r1
    58fe:	34 f4       	brge	.+12     	; 0x590c <DC_MotorMoveRight+0x38>
    5900:	8a 81       	ldd	r24, Y+2	; 0x02
    5902:	9b 81       	ldd	r25, Y+3	; 0x03
    5904:	81 30       	cpi	r24, 0x01	; 1
    5906:	91 05       	cpc	r25, r1
    5908:	61 f0       	breq	.+24     	; 0x5922 <DC_MotorMoveRight+0x4e>
    590a:	36 c0       	rjmp	.+108    	; 0x5978 <DC_MotorMoveRight+0xa4>
    590c:	2a 81       	ldd	r18, Y+2	; 0x02
    590e:	3b 81       	ldd	r19, Y+3	; 0x03
    5910:	23 30       	cpi	r18, 0x03	; 3
    5912:	31 05       	cpc	r19, r1
    5914:	e1 f0       	breq	.+56     	; 0x594e <DC_MotorMoveRight+0x7a>
    5916:	8a 81       	ldd	r24, Y+2	; 0x02
    5918:	9b 81       	ldd	r25, Y+3	; 0x03
    591a:	84 30       	cpi	r24, 0x04	; 4
    591c:	91 05       	cpc	r25, r1
    591e:	11 f1       	breq	.+68     	; 0x5964 <DC_MotorMoveRight+0x90>
    5920:	2b c0       	rjmp	.+86     	; 0x5978 <DC_MotorMoveRight+0xa4>
	{
	case 1 :
		DIO_Write_Pin(DC_IN1_PORT,DC_IN1_PIN,HIGH);
    5922:	82 e0       	ldi	r24, 0x02	; 2
    5924:	60 e0       	ldi	r22, 0x00	; 0
    5926:	41 e0       	ldi	r20, 0x01	; 1
    5928:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN2_PORT,DC_IN2_PIN,LOW);
    592c:	82 e0       	ldi	r24, 0x02	; 2
    592e:	61 e0       	ldi	r22, 0x01	; 1
    5930:	40 e0       	ldi	r20, 0x00	; 0
    5932:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5936:	20 c0       	rjmp	.+64     	; 0x5978 <DC_MotorMoveRight+0xa4>
		break ;
	case 2 :
		DIO_Write_Pin(DC_IN3_PORT,DC_IN3_PIN,HIGH);
    5938:	82 e0       	ldi	r24, 0x02	; 2
    593a:	60 e0       	ldi	r22, 0x00	; 0
    593c:	41 e0       	ldi	r20, 0x01	; 1
    593e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN4_PORT,DC_IN4_PIN,LOW);
    5942:	82 e0       	ldi	r24, 0x02	; 2
    5944:	61 e0       	ldi	r22, 0x01	; 1
    5946:	40 e0       	ldi	r20, 0x00	; 0
    5948:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    594c:	15 c0       	rjmp	.+42     	; 0x5978 <DC_MotorMoveRight+0xa4>
		break ;
	case 3 :
		DIO_Write_Pin(DC_IN5_PORT,DC_IN5_PIN,HIGH);
    594e:	82 e0       	ldi	r24, 0x02	; 2
    5950:	62 e0       	ldi	r22, 0x02	; 2
    5952:	41 e0       	ldi	r20, 0x01	; 1
    5954:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN6_PORT,DC_IN6_PIN,LOW);
    5958:	82 e0       	ldi	r24, 0x02	; 2
    595a:	63 e0       	ldi	r22, 0x03	; 3
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5962:	0a c0       	rjmp	.+20     	; 0x5978 <DC_MotorMoveRight+0xa4>
		break ;
	case 4 :
		DIO_Write_Pin(DC_IN7_PORT,DC_IN7_PIN,HIGH);
    5964:	82 e0       	ldi	r24, 0x02	; 2
    5966:	62 e0       	ldi	r22, 0x02	; 2
    5968:	41 e0       	ldi	r20, 0x01	; 1
    596a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN8_PORT,DC_IN8_PIN,LOW);
    596e:	82 e0       	ldi	r24, 0x02	; 2
    5970:	63 e0       	ldi	r22, 0x03	; 3
    5972:	40 e0       	ldi	r20, 0x00	; 0
    5974:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
	default :
		break ;

	}

}
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
    597c:	0f 90       	pop	r0
    597e:	cf 91       	pop	r28
    5980:	df 91       	pop	r29
    5982:	08 95       	ret

00005984 <DC_MotorMoveLeft>:
void DC_MotorMoveLeft(uint8_t Motor_Number)
{
    5984:	df 93       	push	r29
    5986:	cf 93       	push	r28
    5988:	00 d0       	rcall	.+0      	; 0x598a <DC_MotorMoveLeft+0x6>
    598a:	0f 92       	push	r0
    598c:	cd b7       	in	r28, 0x3d	; 61
    598e:	de b7       	in	r29, 0x3e	; 62
    5990:	89 83       	std	Y+1, r24	; 0x01
	switch(Motor_Number)
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	3b 83       	std	Y+3, r19	; 0x03
    599a:	2a 83       	std	Y+2, r18	; 0x02
    599c:	8a 81       	ldd	r24, Y+2	; 0x02
    599e:	9b 81       	ldd	r25, Y+3	; 0x03
    59a0:	82 30       	cpi	r24, 0x02	; 2
    59a2:	91 05       	cpc	r25, r1
    59a4:	09 f1       	breq	.+66     	; 0x59e8 <DC_MotorMoveLeft+0x64>
    59a6:	2a 81       	ldd	r18, Y+2	; 0x02
    59a8:	3b 81       	ldd	r19, Y+3	; 0x03
    59aa:	23 30       	cpi	r18, 0x03	; 3
    59ac:	31 05       	cpc	r19, r1
    59ae:	34 f4       	brge	.+12     	; 0x59bc <DC_MotorMoveLeft+0x38>
    59b0:	8a 81       	ldd	r24, Y+2	; 0x02
    59b2:	9b 81       	ldd	r25, Y+3	; 0x03
    59b4:	81 30       	cpi	r24, 0x01	; 1
    59b6:	91 05       	cpc	r25, r1
    59b8:	61 f0       	breq	.+24     	; 0x59d2 <DC_MotorMoveLeft+0x4e>
    59ba:	36 c0       	rjmp	.+108    	; 0x5a28 <DC_MotorMoveLeft+0xa4>
    59bc:	2a 81       	ldd	r18, Y+2	; 0x02
    59be:	3b 81       	ldd	r19, Y+3	; 0x03
    59c0:	23 30       	cpi	r18, 0x03	; 3
    59c2:	31 05       	cpc	r19, r1
    59c4:	e1 f0       	breq	.+56     	; 0x59fe <DC_MotorMoveLeft+0x7a>
    59c6:	8a 81       	ldd	r24, Y+2	; 0x02
    59c8:	9b 81       	ldd	r25, Y+3	; 0x03
    59ca:	84 30       	cpi	r24, 0x04	; 4
    59cc:	91 05       	cpc	r25, r1
    59ce:	11 f1       	breq	.+68     	; 0x5a14 <DC_MotorMoveLeft+0x90>
    59d0:	2b c0       	rjmp	.+86     	; 0x5a28 <DC_MotorMoveLeft+0xa4>
	{
	case 1 :
		DIO_Write_Pin(DC_IN1_PORT,DC_IN1_PIN,LOW);
    59d2:	82 e0       	ldi	r24, 0x02	; 2
    59d4:	60 e0       	ldi	r22, 0x00	; 0
    59d6:	40 e0       	ldi	r20, 0x00	; 0
    59d8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN2_PORT,DC_IN2_PIN,HIGH);
    59dc:	82 e0       	ldi	r24, 0x02	; 2
    59de:	61 e0       	ldi	r22, 0x01	; 1
    59e0:	41 e0       	ldi	r20, 0x01	; 1
    59e2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    59e6:	20 c0       	rjmp	.+64     	; 0x5a28 <DC_MotorMoveLeft+0xa4>
		break ;
	case 2 :
		DIO_Write_Pin(DC_IN3_PORT,DC_IN3_PIN,LOW);
    59e8:	82 e0       	ldi	r24, 0x02	; 2
    59ea:	60 e0       	ldi	r22, 0x00	; 0
    59ec:	40 e0       	ldi	r20, 0x00	; 0
    59ee:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN4_PORT,DC_IN4_PIN,HIGH);
    59f2:	82 e0       	ldi	r24, 0x02	; 2
    59f4:	61 e0       	ldi	r22, 0x01	; 1
    59f6:	41 e0       	ldi	r20, 0x01	; 1
    59f8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    59fc:	15 c0       	rjmp	.+42     	; 0x5a28 <DC_MotorMoveLeft+0xa4>
		break ;
	case 3 :
		DIO_Write_Pin(DC_IN5_PORT,DC_IN5_PIN,LOW);
    59fe:	82 e0       	ldi	r24, 0x02	; 2
    5a00:	62 e0       	ldi	r22, 0x02	; 2
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN6_PORT,DC_IN6_PIN,HIGH);
    5a08:	82 e0       	ldi	r24, 0x02	; 2
    5a0a:	63 e0       	ldi	r22, 0x03	; 3
    5a0c:	41 e0       	ldi	r20, 0x01	; 1
    5a0e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5a12:	0a c0       	rjmp	.+20     	; 0x5a28 <DC_MotorMoveLeft+0xa4>
		break ;
	case 4 :
		DIO_Write_Pin(DC_IN7_PORT,DC_IN7_PIN,LOW);
    5a14:	82 e0       	ldi	r24, 0x02	; 2
    5a16:	62 e0       	ldi	r22, 0x02	; 2
    5a18:	40 e0       	ldi	r20, 0x00	; 0
    5a1a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN8_PORT,DC_IN8_PIN,HIGH);
    5a1e:	82 e0       	ldi	r24, 0x02	; 2
    5a20:	63 e0       	ldi	r22, 0x03	; 3
    5a22:	41 e0       	ldi	r20, 0x01	; 1
    5a24:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		break ;
	default :
		break ;
	}
}
    5a28:	0f 90       	pop	r0
    5a2a:	0f 90       	pop	r0
    5a2c:	0f 90       	pop	r0
    5a2e:	cf 91       	pop	r28
    5a30:	df 91       	pop	r29
    5a32:	08 95       	ret

00005a34 <DC_MotorSetSpeed>:
void DC_MotorSetSpeed(uint16_t Freq , uint8_t Duty )
{
    5a34:	df 93       	push	r29
    5a36:	cf 93       	push	r28
    5a38:	00 d0       	rcall	.+0      	; 0x5a3a <DC_MotorSetSpeed+0x6>
    5a3a:	0f 92       	push	r0
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	9a 83       	std	Y+2, r25	; 0x02
    5a42:	89 83       	std	Y+1, r24	; 0x01
    5a44:	6b 83       	std	Y+3, r22	; 0x03
#ifdef DC_MOTOR_1 || DC_MOTOR_2
	PWM_Freq_Hz(Freq) ;
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <PWM_Freq_Hz>
	PWM_Duty_OCR1A(Duty);
    5a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a50:	0e 94 01 08 	call	0x1002	; 0x1002 <PWM_Duty_OCR1A>
#endif

#ifdef DC_MOTOR_3 || DC_MOTOR_4
	PWM_Freq_Hz(Freq) ;
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	9a 81       	ldd	r25, Y+2	; 0x02
    5a58:	0e 94 cd 07 	call	0xf9a	; 0xf9a <PWM_Freq_Hz>
	PWM_Duty_OCR1B(Duty);
    5a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a5e:	0e 94 49 08 	call	0x1092	; 0x1092 <PWM_Duty_OCR1B>
#endif
}
    5a62:	0f 90       	pop	r0
    5a64:	0f 90       	pop	r0
    5a66:	0f 90       	pop	r0
    5a68:	cf 91       	pop	r28
    5a6a:	df 91       	pop	r29
    5a6c:	08 95       	ret

00005a6e <DC_MotorStop>:
void DC_MotorStop(uint8_t Motor_Number)
{
    5a6e:	df 93       	push	r29
    5a70:	cf 93       	push	r28
    5a72:	00 d0       	rcall	.+0      	; 0x5a74 <DC_MotorStop+0x6>
    5a74:	0f 92       	push	r0
    5a76:	cd b7       	in	r28, 0x3d	; 61
    5a78:	de b7       	in	r29, 0x3e	; 62
    5a7a:	89 83       	std	Y+1, r24	; 0x01
	switch(Motor_Number)
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
    5a7e:	28 2f       	mov	r18, r24
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	3b 83       	std	Y+3, r19	; 0x03
    5a84:	2a 83       	std	Y+2, r18	; 0x02
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	9b 81       	ldd	r25, Y+3	; 0x03
    5a8a:	82 30       	cpi	r24, 0x02	; 2
    5a8c:	91 05       	cpc	r25, r1
    5a8e:	09 f1       	breq	.+66     	; 0x5ad2 <DC_MotorStop+0x64>
    5a90:	2a 81       	ldd	r18, Y+2	; 0x02
    5a92:	3b 81       	ldd	r19, Y+3	; 0x03
    5a94:	23 30       	cpi	r18, 0x03	; 3
    5a96:	31 05       	cpc	r19, r1
    5a98:	34 f4       	brge	.+12     	; 0x5aa6 <DC_MotorStop+0x38>
    5a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a9e:	81 30       	cpi	r24, 0x01	; 1
    5aa0:	91 05       	cpc	r25, r1
    5aa2:	61 f0       	breq	.+24     	; 0x5abc <DC_MotorStop+0x4e>
    5aa4:	36 c0       	rjmp	.+108    	; 0x5b12 <DC_MotorStop+0xa4>
    5aa6:	2a 81       	ldd	r18, Y+2	; 0x02
    5aa8:	3b 81       	ldd	r19, Y+3	; 0x03
    5aaa:	23 30       	cpi	r18, 0x03	; 3
    5aac:	31 05       	cpc	r19, r1
    5aae:	e1 f0       	breq	.+56     	; 0x5ae8 <DC_MotorStop+0x7a>
    5ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab4:	84 30       	cpi	r24, 0x04	; 4
    5ab6:	91 05       	cpc	r25, r1
    5ab8:	11 f1       	breq	.+68     	; 0x5afe <DC_MotorStop+0x90>
    5aba:	2b c0       	rjmp	.+86     	; 0x5b12 <DC_MotorStop+0xa4>
	{
	case 1 :
		DIO_Write_Pin(DC_IN1_PORT,DC_IN1_PIN,LOW);
    5abc:	82 e0       	ldi	r24, 0x02	; 2
    5abe:	60 e0       	ldi	r22, 0x00	; 0
    5ac0:	40 e0       	ldi	r20, 0x00	; 0
    5ac2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN2_PORT,DC_IN2_PIN,LOW);
    5ac6:	82 e0       	ldi	r24, 0x02	; 2
    5ac8:	61 e0       	ldi	r22, 0x01	; 1
    5aca:	40 e0       	ldi	r20, 0x00	; 0
    5acc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5ad0:	20 c0       	rjmp	.+64     	; 0x5b12 <DC_MotorStop+0xa4>
		break ;
	case 2 :
		DIO_Write_Pin(DC_IN3_PORT,DC_IN3_PIN,LOW);
    5ad2:	82 e0       	ldi	r24, 0x02	; 2
    5ad4:	60 e0       	ldi	r22, 0x00	; 0
    5ad6:	40 e0       	ldi	r20, 0x00	; 0
    5ad8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN4_PORT,DC_IN4_PIN,LOW);
    5adc:	82 e0       	ldi	r24, 0x02	; 2
    5ade:	61 e0       	ldi	r22, 0x01	; 1
    5ae0:	40 e0       	ldi	r20, 0x00	; 0
    5ae2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5ae6:	15 c0       	rjmp	.+42     	; 0x5b12 <DC_MotorStop+0xa4>
		break ;
	case 3 :
		DIO_Write_Pin(DC_IN5_PORT,DC_IN5_PIN,LOW);
    5ae8:	82 e0       	ldi	r24, 0x02	; 2
    5aea:	62 e0       	ldi	r22, 0x02	; 2
    5aec:	40 e0       	ldi	r20, 0x00	; 0
    5aee:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN6_PORT,DC_IN6_PIN,LOW);
    5af2:	82 e0       	ldi	r24, 0x02	; 2
    5af4:	63 e0       	ldi	r22, 0x03	; 3
    5af6:	40 e0       	ldi	r20, 0x00	; 0
    5af8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
    5afc:	0a c0       	rjmp	.+20     	; 0x5b12 <DC_MotorStop+0xa4>
		break ;
	case 4 :
		DIO_Write_Pin(DC_IN7_PORT,DC_IN7_PIN,LOW);
    5afe:	82 e0       	ldi	r24, 0x02	; 2
    5b00:	62 e0       	ldi	r22, 0x02	; 2
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		DIO_Write_Pin(DC_IN8_PORT,DC_IN8_PIN,LOW);
    5b08:	82 e0       	ldi	r24, 0x02	; 2
    5b0a:	63 e0       	ldi	r22, 0x03	; 3
    5b0c:	40 e0       	ldi	r20, 0x00	; 0
    5b0e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
		break ;
	default :
		break ;
	}
}
    5b12:	0f 90       	pop	r0
    5b14:	0f 90       	pop	r0
    5b16:	0f 90       	pop	r0
    5b18:	cf 91       	pop	r28
    5b1a:	df 91       	pop	r29
    5b1c:	08 95       	ret

00005b1e <_7_SEG_Init>:
 *  Author: karim
 */ 
#include "7_SEG.h"
 
void _7_SEG_Init()
{
    5b1e:	df 93       	push	r29
    5b20:	cf 93       	push	r28
    5b22:	cd b7       	in	r28, 0x3d	; 61
    5b24:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0XFF ;
    5b26:	e4 e3       	ldi	r30, 0x34	; 52
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	8f ef       	ldi	r24, 0xFF	; 255
    5b2c:	80 83       	st	Z, r24
}
    5b2e:	cf 91       	pop	r28
    5b30:	df 91       	pop	r29
    5b32:	08 95       	ret

00005b34 <_7_SEG_Start>:
void _7_SEG_Start()
{
    5b34:	df 93       	push	r29
    5b36:	cf 93       	push	r28
    5b38:	cd b7       	in	r28, 0x3d	; 61
    5b3a:	de b7       	in	r29, 0x3e	; 62
    5b3c:	6f 97       	sbiw	r28, 0x1f	; 31
    5b3e:	0f b6       	in	r0, 0x3f	; 63
    5b40:	f8 94       	cli
    5b42:	de bf       	out	0x3e, r29	; 62
    5b44:	0f be       	out	0x3f, r0	; 63
    5b46:	cd bf       	out	0x3d, r28	; 61
	uint8_t SEG[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE,ZERO};
    5b48:	ce 01       	movw	r24, r28
    5b4a:	40 96       	adiw	r24, 0x10	; 16
    5b4c:	9c 8f       	std	Y+28, r25	; 0x1c
    5b4e:	8b 8f       	std	Y+27, r24	; 0x1b
    5b50:	e7 ec       	ldi	r30, 0xC7	; 199
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	fe 8f       	std	Y+30, r31	; 0x1e
    5b56:	ed 8f       	std	Y+29, r30	; 0x1d
    5b58:	fb e0       	ldi	r31, 0x0B	; 11
    5b5a:	ff 8f       	std	Y+31, r31	; 0x1f
    5b5c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5b5e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5b60:	00 80       	ld	r0, Z
    5b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b66:	01 96       	adiw	r24, 0x01	; 1
    5b68:	9e 8f       	std	Y+30, r25	; 0x1e
    5b6a:	8d 8f       	std	Y+29, r24	; 0x1d
    5b6c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5b6e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5b70:	00 82       	st	Z, r0
    5b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b76:	01 96       	adiw	r24, 0x01	; 1
    5b78:	9c 8f       	std	Y+28, r25	; 0x1c
    5b7a:	8b 8f       	std	Y+27, r24	; 0x1b
    5b7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5b7e:	91 50       	subi	r25, 0x01	; 1
    5b80:	9f 8f       	std	Y+31, r25	; 0x1f
    5b82:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5b84:	ee 23       	and	r30, r30
    5b86:	51 f7       	brne	.-44     	; 0x5b5c <_7_SEG_Start+0x28>
	for ( uint8_t i =0 ; i < 11 ; i++ )
    5b88:	1f 86       	std	Y+15, r1	; 0x0f
    5b8a:	81 c0       	rjmp	.+258    	; 0x5c8e <_7_SEG_Start+0x15a>
	{
		PORTC = SEG[i] ;
    5b8c:	a5 e3       	ldi	r26, 0x35	; 53
    5b8e:	b0 e0       	ldi	r27, 0x00	; 0
    5b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b92:	28 2f       	mov	r18, r24
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	ce 01       	movw	r24, r28
    5b98:	40 96       	adiw	r24, 0x10	; 16
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	e2 0f       	add	r30, r18
    5b9e:	f3 1f       	adc	r31, r19
    5ba0:	80 81       	ld	r24, Z
    5ba2:	8c 93       	st	X, r24
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	a8 e4       	ldi	r26, 0x48	; 72
    5baa:	b4 e4       	ldi	r27, 0x44	; 68
    5bac:	8b 87       	std	Y+11, r24	; 0x0b
    5bae:	9c 87       	std	Y+12, r25	; 0x0c
    5bb0:	ad 87       	std	Y+13, r26	; 0x0d
    5bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	4a ef       	ldi	r20, 0xFA	; 250
    5bc2:	54 e4       	ldi	r21, 0x44	; 68
    5bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	8f 83       	std	Y+7, r24	; 0x07
    5bce:	98 87       	std	Y+8, r25	; 0x08
    5bd0:	a9 87       	std	Y+9, r26	; 0x09
    5bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    5bd6:	78 85       	ldd	r23, Y+8	; 0x08
    5bd8:	89 85       	ldd	r24, Y+9	; 0x09
    5bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bdc:	20 e0       	ldi	r18, 0x00	; 0
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e8       	ldi	r20, 0x80	; 128
    5be2:	5f e3       	ldi	r21, 0x3F	; 63
    5be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5be8:	88 23       	and	r24, r24
    5bea:	2c f4       	brge	.+10     	; 0x5bf6 <_7_SEG_Start+0xc2>
		__ticks = 1;
    5bec:	81 e0       	ldi	r24, 0x01	; 1
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	9e 83       	std	Y+6, r25	; 0x06
    5bf2:	8d 83       	std	Y+5, r24	; 0x05
    5bf4:	3f c0       	rjmp	.+126    	; 0x5c74 <_7_SEG_Start+0x140>
	else if (__tmp > 65535)
    5bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf8:	78 85       	ldd	r23, Y+8	; 0x08
    5bfa:	89 85       	ldd	r24, Y+9	; 0x09
    5bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	3f ef       	ldi	r19, 0xFF	; 255
    5c02:	4f e7       	ldi	r20, 0x7F	; 127
    5c04:	57 e4       	ldi	r21, 0x47	; 71
    5c06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c0a:	18 16       	cp	r1, r24
    5c0c:	4c f5       	brge	.+82     	; 0x5c60 <_7_SEG_Start+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	40 e2       	ldi	r20, 0x20	; 32
    5c1c:	51 e4       	ldi	r21, 0x41	; 65
    5c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	bc 01       	movw	r22, r24
    5c28:	cd 01       	movw	r24, r26
    5c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2e:	dc 01       	movw	r26, r24
    5c30:	cb 01       	movw	r24, r22
    5c32:	9e 83       	std	Y+6, r25	; 0x06
    5c34:	8d 83       	std	Y+5, r24	; 0x05
    5c36:	0f c0       	rjmp	.+30     	; 0x5c56 <_7_SEG_Start+0x122>
    5c38:	88 ec       	ldi	r24, 0xC8	; 200
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	9c 83       	std	Y+4, r25	; 0x04
    5c3e:	8b 83       	std	Y+3, r24	; 0x03
    5c40:	8b 81       	ldd	r24, Y+3	; 0x03
    5c42:	9c 81       	ldd	r25, Y+4	; 0x04
    5c44:	01 97       	sbiw	r24, 0x01	; 1
    5c46:	f1 f7       	brne	.-4      	; 0x5c44 <_7_SEG_Start+0x110>
    5c48:	9c 83       	std	Y+4, r25	; 0x04
    5c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c50:	01 97       	sbiw	r24, 0x01	; 1
    5c52:	9e 83       	std	Y+6, r25	; 0x06
    5c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c56:	8d 81       	ldd	r24, Y+5	; 0x05
    5c58:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5a:	00 97       	sbiw	r24, 0x00	; 0
    5c5c:	69 f7       	brne	.-38     	; 0x5c38 <_7_SEG_Start+0x104>
    5c5e:	14 c0       	rjmp	.+40     	; 0x5c88 <_7_SEG_Start+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c60:	6f 81       	ldd	r22, Y+7	; 0x07
    5c62:	78 85       	ldd	r23, Y+8	; 0x08
    5c64:	89 85       	ldd	r24, Y+9	; 0x09
    5c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	9e 83       	std	Y+6, r25	; 0x06
    5c72:	8d 83       	std	Y+5, r24	; 0x05
    5c74:	8d 81       	ldd	r24, Y+5	; 0x05
    5c76:	9e 81       	ldd	r25, Y+6	; 0x06
    5c78:	9a 83       	std	Y+2, r25	; 0x02
    5c7a:	89 83       	std	Y+1, r24	; 0x01
    5c7c:	89 81       	ldd	r24, Y+1	; 0x01
    5c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c80:	01 97       	sbiw	r24, 0x01	; 1
    5c82:	f1 f7       	brne	.-4      	; 0x5c80 <_7_SEG_Start+0x14c>
    5c84:	9a 83       	std	Y+2, r25	; 0x02
    5c86:	89 83       	std	Y+1, r24	; 0x01
	DDRC = 0XFF ;
}
void _7_SEG_Start()
{
	uint8_t SEG[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE,ZERO};
	for ( uint8_t i =0 ; i < 11 ; i++ )
    5c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c8a:	8f 5f       	subi	r24, 0xFF	; 255
    5c8c:	8f 87       	std	Y+15, r24	; 0x0f
    5c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c90:	8b 30       	cpi	r24, 0x0B	; 11
    5c92:	08 f4       	brcc	.+2      	; 0x5c96 <_7_SEG_Start+0x162>
    5c94:	7b cf       	rjmp	.-266    	; 0x5b8c <_7_SEG_Start+0x58>
	{
		PORTC = SEG[i] ;
		_delay_ms(800);
	}	
    5c96:	6f 96       	adiw	r28, 0x1f	; 31
    5c98:	0f b6       	in	r0, 0x3f	; 63
    5c9a:	f8 94       	cli
    5c9c:	de bf       	out	0x3e, r29	; 62
    5c9e:	0f be       	out	0x3f, r0	; 63
    5ca0:	cd bf       	out	0x3d, r28	; 61
    5ca2:	cf 91       	pop	r28
    5ca4:	df 91       	pop	r29
    5ca6:	08 95       	ret

00005ca8 <main>:
#include "LCD.h"
#include "USART.h"


int main ()
{
    5ca8:	df 93       	push	r29
    5caa:	cf 93       	push	r28
    5cac:	cd b7       	in	r28, 0x3d	; 61
    5cae:	de b7       	in	r29, 0x3e	; 62
    5cb0:	65 97       	sbiw	r28, 0x15	; 21
    5cb2:	0f b6       	in	r0, 0x3f	; 63
    5cb4:	f8 94       	cli
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	0f be       	out	0x3f, r0	; 63
    5cba:	cd bf       	out	0x3d, r28	; 61

	uint8_t Data1[20] ={0}  , i = 0 ;
    5cbc:	84 e1       	ldi	r24, 0x14	; 20
    5cbe:	fe 01       	movw	r30, r28
    5cc0:	32 96       	adiw	r30, 0x02	; 2
    5cc2:	df 01       	movw	r26, r30
    5cc4:	98 2f       	mov	r25, r24
    5cc6:	1d 92       	st	X+, r1
    5cc8:	9a 95       	dec	r25
    5cca:	e9 f7       	brne	.-6      	; 0x5cc6 <main+0x1e>
    5ccc:	19 82       	std	Y+1, r1	; 0x01

	DIO_Write_Pin_Dir(PORT_B,PIN3,OUT) ;
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	63 e0       	ldi	r22, 0x03	; 3
    5cd2:	41 e0       	ldi	r20, 0x01	; 1
    5cd4:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,PIN4,OUT) ;
    5cd8:	81 e0       	ldi	r24, 0x01	; 1
    5cda:	64 e0       	ldi	r22, 0x04	; 4
    5cdc:	41 e0       	ldi	r20, 0x01	; 1
    5cde:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,PIN5,OUT) ;
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	65 e0       	ldi	r22, 0x05	; 5
    5ce6:	41 e0       	ldi	r20, 0x01	; 1
    5ce8:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,PIN6,OUT) ;
    5cec:	81 e0       	ldi	r24, 0x01	; 1
    5cee:	66 e0       	ldi	r22, 0x06	; 6
    5cf0:	41 e0       	ldi	r20, 0x01	; 1
    5cf2:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_Write_Pin_Dir>

	LCD_Init() ;
    5cf6:	0e 94 aa 23 	call	0x4754	; 0x4754 <LCD_Init>
	USART_Init() ;
    5cfa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_Init>

	while(1)
	{
		i = 0 ;
    5cfe:	19 82       	std	Y+1, r1	; 0x01
		while(1)
		{
			USART_Recieve_Char(&Data1[i]) ;
    5d00:	89 81       	ldd	r24, Y+1	; 0x01
    5d02:	28 2f       	mov	r18, r24
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	ce 01       	movw	r24, r28
    5d08:	02 96       	adiw	r24, 0x02	; 2
    5d0a:	82 0f       	add	r24, r18
    5d0c:	93 1f       	adc	r25, r19
    5d0e:	0e 94 b9 06 	call	0xd72	; 0xd72 <USART_Recieve_Char>
			if(Data1[i]=='0')
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	28 2f       	mov	r18, r24
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	ce 01       	movw	r24, r28
    5d1a:	02 96       	adiw	r24, 0x02	; 2
    5d1c:	fc 01       	movw	r30, r24
    5d1e:	e2 0f       	add	r30, r18
    5d20:	f3 1f       	adc	r31, r19
    5d22:	80 81       	ld	r24, Z
    5d24:	80 33       	cpi	r24, 0x30	; 48
    5d26:	a9 f4       	brne	.+42     	; 0x5d52 <main+0xaa>
			{
				Data1[i] = '\0' ;
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	28 2f       	mov	r18, r24
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	ce 01       	movw	r24, r28
    5d30:	02 96       	adiw	r24, 0x02	; 2
    5d32:	fc 01       	movw	r30, r24
    5d34:	e2 0f       	add	r30, r18
    5d36:	f3 1f       	adc	r31, r19
    5d38:	10 82       	st	Z, r1
				break ;
			}
			i++ ;
		}
		LCD_Clear_Screen() ;
    5d3a:	0e 94 11 23 	call	0x4622	; 0x4622 <LCD_Clear_Screen>
		if(strcmp((char*)Data1,"LCD ON")==0)
    5d3e:	ce 01       	movw	r24, r28
    5d40:	02 96       	adiw	r24, 0x02	; 2
    5d42:	20 e6       	ldi	r18, 0x60	; 96
    5d44:	30 e0       	ldi	r19, 0x00	; 0
    5d46:	b9 01       	movw	r22, r18
    5d48:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5d4c:	00 97       	sbiw	r24, 0x00	; 0
    5d4e:	29 f0       	breq	.+10     	; 0x5d5a <main+0xb2>
    5d50:	0b c0       	rjmp	.+22     	; 0x5d68 <main+0xc0>
			if(Data1[i]=='0')
			{
				Data1[i] = '\0' ;
				break ;
			}
			i++ ;
    5d52:	89 81       	ldd	r24, Y+1	; 0x01
    5d54:	8f 5f       	subi	r24, 0xFF	; 255
    5d56:	89 83       	std	Y+1, r24	; 0x01
    5d58:	d3 cf       	rjmp	.-90     	; 0x5d00 <main+0x58>
		}
		LCD_Clear_Screen() ;
		if(strcmp((char*)Data1,"LCD ON")==0)
		{
			LCD_Write_String((uint8_t*)"Hello LCD",0,0) ;
    5d5a:	87 e6       	ldi	r24, 0x67	; 103
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	60 e0       	ldi	r22, 0x00	; 0
    5d60:	40 e0       	ldi	r20, 0x00	; 0
    5d62:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5d66:	cb cf       	rjmp	.-106    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 1 ON")==0)
    5d68:	ce 01       	movw	r24, r28
    5d6a:	02 96       	adiw	r24, 0x02	; 2
    5d6c:	21 e7       	ldi	r18, 0x71	; 113
    5d6e:	30 e0       	ldi	r19, 0x00	; 0
    5d70:	b9 01       	movw	r22, r18
    5d72:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5d76:	00 97       	sbiw	r24, 0x00	; 0
    5d78:	61 f4       	brne	.+24     	; 0x5d92 <main+0xea>
		{
			DIO_Write_Pin(PORT_B,PIN4,HIGH) ;
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	64 e0       	ldi	r22, 0x04	; 4
    5d7e:	41 e0       	ldi	r20, 0x01	; 1
    5d80:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 1 ON",0,0) ;
    5d84:	81 e7       	ldi	r24, 0x71	; 113
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	60 e0       	ldi	r22, 0x00	; 0
    5d8a:	40 e0       	ldi	r20, 0x00	; 0
    5d8c:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5d90:	b6 cf       	rjmp	.-148    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 1 OFF")==0)
    5d92:	ce 01       	movw	r24, r28
    5d94:	02 96       	adiw	r24, 0x02	; 2
    5d96:	2a e7       	ldi	r18, 0x7A	; 122
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	b9 01       	movw	r22, r18
    5d9c:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5da0:	00 97       	sbiw	r24, 0x00	; 0
    5da2:	61 f4       	brne	.+24     	; 0x5dbc <main+0x114>
		{
			DIO_Write_Pin(PORT_B,PIN4,LOW) ;
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	64 e0       	ldi	r22, 0x04	; 4
    5da8:	40 e0       	ldi	r20, 0x00	; 0
    5daa:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 1 OFF",0,0) ;
    5dae:	8a e7       	ldi	r24, 0x7A	; 122
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	60 e0       	ldi	r22, 0x00	; 0
    5db4:	40 e0       	ldi	r20, 0x00	; 0
    5db6:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5dba:	a1 cf       	rjmp	.-190    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 2 ON")==0)
    5dbc:	ce 01       	movw	r24, r28
    5dbe:	02 96       	adiw	r24, 0x02	; 2
    5dc0:	24 e8       	ldi	r18, 0x84	; 132
    5dc2:	30 e0       	ldi	r19, 0x00	; 0
    5dc4:	b9 01       	movw	r22, r18
    5dc6:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5dca:	00 97       	sbiw	r24, 0x00	; 0
    5dcc:	61 f4       	brne	.+24     	; 0x5de6 <main+0x13e>
		{
			DIO_Write_Pin(PORT_B,PIN5,HIGH) ;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	65 e0       	ldi	r22, 0x05	; 5
    5dd2:	41 e0       	ldi	r20, 0x01	; 1
    5dd4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 2 ON",0,0) ;
    5dd8:	84 e8       	ldi	r24, 0x84	; 132
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	40 e0       	ldi	r20, 0x00	; 0
    5de0:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5de4:	8c cf       	rjmp	.-232    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 2 OFF")==0)
    5de6:	ce 01       	movw	r24, r28
    5de8:	02 96       	adiw	r24, 0x02	; 2
    5dea:	2d e8       	ldi	r18, 0x8D	; 141
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	b9 01       	movw	r22, r18
    5df0:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5df4:	00 97       	sbiw	r24, 0x00	; 0
    5df6:	61 f4       	brne	.+24     	; 0x5e10 <main+0x168>
		{
			DIO_Write_Pin(PORT_B,PIN5,LOW) ;
    5df8:	81 e0       	ldi	r24, 0x01	; 1
    5dfa:	65 e0       	ldi	r22, 0x05	; 5
    5dfc:	40 e0       	ldi	r20, 0x00	; 0
    5dfe:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 2 OFF",0,0) ;
    5e02:	8d e8       	ldi	r24, 0x8D	; 141
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	60 e0       	ldi	r22, 0x00	; 0
    5e08:	40 e0       	ldi	r20, 0x00	; 0
    5e0a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5e0e:	77 cf       	rjmp	.-274    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 3 ON")==0)
    5e10:	ce 01       	movw	r24, r28
    5e12:	02 96       	adiw	r24, 0x02	; 2
    5e14:	27 e9       	ldi	r18, 0x97	; 151
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	b9 01       	movw	r22, r18
    5e1a:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5e1e:	00 97       	sbiw	r24, 0x00	; 0
    5e20:	61 f4       	brne	.+24     	; 0x5e3a <main+0x192>
		{
			DIO_Write_Pin(PORT_B,PIN6,HIGH) ;
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	66 e0       	ldi	r22, 0x06	; 6
    5e26:	41 e0       	ldi	r20, 0x01	; 1
    5e28:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 3 ON",0,0) ;
    5e2c:	87 e9       	ldi	r24, 0x97	; 151
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	60 e0       	ldi	r22, 0x00	; 0
    5e32:	40 e0       	ldi	r20, 0x00	; 0
    5e34:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5e38:	62 cf       	rjmp	.-316    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"LED 3 OFF")==0)
    5e3a:	ce 01       	movw	r24, r28
    5e3c:	02 96       	adiw	r24, 0x02	; 2
    5e3e:	20 ea       	ldi	r18, 0xA0	; 160
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	b9 01       	movw	r22, r18
    5e44:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5e48:	00 97       	sbiw	r24, 0x00	; 0
    5e4a:	61 f4       	brne	.+24     	; 0x5e64 <main+0x1bc>
		{
			DIO_Write_Pin(PORT_B,PIN6,LOW) ;
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	66 e0       	ldi	r22, 0x06	; 6
    5e50:	40 e0       	ldi	r20, 0x00	; 0
    5e52:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"LED 3 OFF",0,0) ;
    5e56:	80 ea       	ldi	r24, 0xA0	; 160
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	60 e0       	ldi	r22, 0x00	; 0
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5e62:	4d cf       	rjmp	.-358    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"BUZZER ON")==0)
    5e64:	ce 01       	movw	r24, r28
    5e66:	02 96       	adiw	r24, 0x02	; 2
    5e68:	2a ea       	ldi	r18, 0xAA	; 170
    5e6a:	30 e0       	ldi	r19, 0x00	; 0
    5e6c:	b9 01       	movw	r22, r18
    5e6e:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5e72:	00 97       	sbiw	r24, 0x00	; 0
    5e74:	61 f4       	brne	.+24     	; 0x5e8e <main+0x1e6>
		{
			DIO_Write_Pin(PORT_B,PIN3,HIGH) ;
    5e76:	81 e0       	ldi	r24, 0x01	; 1
    5e78:	63 e0       	ldi	r22, 0x03	; 3
    5e7a:	41 e0       	ldi	r20, 0x01	; 1
    5e7c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"BUZZER ON",0,0) ;
    5e80:	8a ea       	ldi	r24, 0xAA	; 170
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	60 e0       	ldi	r22, 0x00	; 0
    5e86:	40 e0       	ldi	r20, 0x00	; 0
    5e88:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5e8c:	38 cf       	rjmp	.-400    	; 0x5cfe <main+0x56>
		}
		else if(strcmp((char*)Data1,"BUZZER OFF")==0)
    5e8e:	ce 01       	movw	r24, r28
    5e90:	02 96       	adiw	r24, 0x02	; 2
    5e92:	24 eb       	ldi	r18, 0xB4	; 180
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	b9 01       	movw	r22, r18
    5e98:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <strcmp>
    5e9c:	00 97       	sbiw	r24, 0x00	; 0
    5e9e:	09 f0       	breq	.+2      	; 0x5ea2 <main+0x1fa>
    5ea0:	2e cf       	rjmp	.-420    	; 0x5cfe <main+0x56>
		{
			DIO_Write_Pin(PORT_B,PIN3,LOW) ;
    5ea2:	81 e0       	ldi	r24, 0x01	; 1
    5ea4:	63 e0       	ldi	r22, 0x03	; 3
    5ea6:	40 e0       	ldi	r20, 0x00	; 0
    5ea8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <DIO_Write_Pin>
			LCD_Write_String((uint8_t*)"BUZZER OFF",0,0) ;
    5eac:	84 eb       	ldi	r24, 0xB4	; 180
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	60 e0       	ldi	r22, 0x00	; 0
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <LCD_Write_String>
    5eb8:	22 cf       	rjmp	.-444    	; 0x5cfe <main+0x56>

00005eba <__mulsi3>:
    5eba:	62 9f       	mul	r22, r18
    5ebc:	d0 01       	movw	r26, r0
    5ebe:	73 9f       	mul	r23, r19
    5ec0:	f0 01       	movw	r30, r0
    5ec2:	82 9f       	mul	r24, r18
    5ec4:	e0 0d       	add	r30, r0
    5ec6:	f1 1d       	adc	r31, r1
    5ec8:	64 9f       	mul	r22, r20
    5eca:	e0 0d       	add	r30, r0
    5ecc:	f1 1d       	adc	r31, r1
    5ece:	92 9f       	mul	r25, r18
    5ed0:	f0 0d       	add	r31, r0
    5ed2:	83 9f       	mul	r24, r19
    5ed4:	f0 0d       	add	r31, r0
    5ed6:	74 9f       	mul	r23, r20
    5ed8:	f0 0d       	add	r31, r0
    5eda:	65 9f       	mul	r22, r21
    5edc:	f0 0d       	add	r31, r0
    5ede:	99 27       	eor	r25, r25
    5ee0:	72 9f       	mul	r23, r18
    5ee2:	b0 0d       	add	r27, r0
    5ee4:	e1 1d       	adc	r30, r1
    5ee6:	f9 1f       	adc	r31, r25
    5ee8:	63 9f       	mul	r22, r19
    5eea:	b0 0d       	add	r27, r0
    5eec:	e1 1d       	adc	r30, r1
    5eee:	f9 1f       	adc	r31, r25
    5ef0:	bd 01       	movw	r22, r26
    5ef2:	cf 01       	movw	r24, r30
    5ef4:	11 24       	eor	r1, r1
    5ef6:	08 95       	ret

00005ef8 <__udivmodqi4>:
    5ef8:	99 1b       	sub	r25, r25
    5efa:	79 e0       	ldi	r23, 0x09	; 9
    5efc:	04 c0       	rjmp	.+8      	; 0x5f06 <__udivmodqi4_ep>

00005efe <__udivmodqi4_loop>:
    5efe:	99 1f       	adc	r25, r25
    5f00:	96 17       	cp	r25, r22
    5f02:	08 f0       	brcs	.+2      	; 0x5f06 <__udivmodqi4_ep>
    5f04:	96 1b       	sub	r25, r22

00005f06 <__udivmodqi4_ep>:
    5f06:	88 1f       	adc	r24, r24
    5f08:	7a 95       	dec	r23
    5f0a:	c9 f7       	brne	.-14     	; 0x5efe <__udivmodqi4_loop>
    5f0c:	80 95       	com	r24
    5f0e:	08 95       	ret

00005f10 <__udivmodhi4>:
    5f10:	aa 1b       	sub	r26, r26
    5f12:	bb 1b       	sub	r27, r27
    5f14:	51 e1       	ldi	r21, 0x11	; 17
    5f16:	07 c0       	rjmp	.+14     	; 0x5f26 <__udivmodhi4_ep>

00005f18 <__udivmodhi4_loop>:
    5f18:	aa 1f       	adc	r26, r26
    5f1a:	bb 1f       	adc	r27, r27
    5f1c:	a6 17       	cp	r26, r22
    5f1e:	b7 07       	cpc	r27, r23
    5f20:	10 f0       	brcs	.+4      	; 0x5f26 <__udivmodhi4_ep>
    5f22:	a6 1b       	sub	r26, r22
    5f24:	b7 0b       	sbc	r27, r23

00005f26 <__udivmodhi4_ep>:
    5f26:	88 1f       	adc	r24, r24
    5f28:	99 1f       	adc	r25, r25
    5f2a:	5a 95       	dec	r21
    5f2c:	a9 f7       	brne	.-22     	; 0x5f18 <__udivmodhi4_loop>
    5f2e:	80 95       	com	r24
    5f30:	90 95       	com	r25
    5f32:	bc 01       	movw	r22, r24
    5f34:	cd 01       	movw	r24, r26
    5f36:	08 95       	ret

00005f38 <__udivmodsi4>:
    5f38:	a1 e2       	ldi	r26, 0x21	; 33
    5f3a:	1a 2e       	mov	r1, r26
    5f3c:	aa 1b       	sub	r26, r26
    5f3e:	bb 1b       	sub	r27, r27
    5f40:	fd 01       	movw	r30, r26
    5f42:	0d c0       	rjmp	.+26     	; 0x5f5e <__udivmodsi4_ep>

00005f44 <__udivmodsi4_loop>:
    5f44:	aa 1f       	adc	r26, r26
    5f46:	bb 1f       	adc	r27, r27
    5f48:	ee 1f       	adc	r30, r30
    5f4a:	ff 1f       	adc	r31, r31
    5f4c:	a2 17       	cp	r26, r18
    5f4e:	b3 07       	cpc	r27, r19
    5f50:	e4 07       	cpc	r30, r20
    5f52:	f5 07       	cpc	r31, r21
    5f54:	20 f0       	brcs	.+8      	; 0x5f5e <__udivmodsi4_ep>
    5f56:	a2 1b       	sub	r26, r18
    5f58:	b3 0b       	sbc	r27, r19
    5f5a:	e4 0b       	sbc	r30, r20
    5f5c:	f5 0b       	sbc	r31, r21

00005f5e <__udivmodsi4_ep>:
    5f5e:	66 1f       	adc	r22, r22
    5f60:	77 1f       	adc	r23, r23
    5f62:	88 1f       	adc	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	1a 94       	dec	r1
    5f68:	69 f7       	brne	.-38     	; 0x5f44 <__udivmodsi4_loop>
    5f6a:	60 95       	com	r22
    5f6c:	70 95       	com	r23
    5f6e:	80 95       	com	r24
    5f70:	90 95       	com	r25
    5f72:	9b 01       	movw	r18, r22
    5f74:	ac 01       	movw	r20, r24
    5f76:	bd 01       	movw	r22, r26
    5f78:	cf 01       	movw	r24, r30
    5f7a:	08 95       	ret

00005f7c <__prologue_saves__>:
    5f7c:	2f 92       	push	r2
    5f7e:	3f 92       	push	r3
    5f80:	4f 92       	push	r4
    5f82:	5f 92       	push	r5
    5f84:	6f 92       	push	r6
    5f86:	7f 92       	push	r7
    5f88:	8f 92       	push	r8
    5f8a:	9f 92       	push	r9
    5f8c:	af 92       	push	r10
    5f8e:	bf 92       	push	r11
    5f90:	cf 92       	push	r12
    5f92:	df 92       	push	r13
    5f94:	ef 92       	push	r14
    5f96:	ff 92       	push	r15
    5f98:	0f 93       	push	r16
    5f9a:	1f 93       	push	r17
    5f9c:	cf 93       	push	r28
    5f9e:	df 93       	push	r29
    5fa0:	cd b7       	in	r28, 0x3d	; 61
    5fa2:	de b7       	in	r29, 0x3e	; 62
    5fa4:	ca 1b       	sub	r28, r26
    5fa6:	db 0b       	sbc	r29, r27
    5fa8:	0f b6       	in	r0, 0x3f	; 63
    5faa:	f8 94       	cli
    5fac:	de bf       	out	0x3e, r29	; 62
    5fae:	0f be       	out	0x3f, r0	; 63
    5fb0:	cd bf       	out	0x3d, r28	; 61
    5fb2:	09 94       	ijmp

00005fb4 <__epilogue_restores__>:
    5fb4:	2a 88       	ldd	r2, Y+18	; 0x12
    5fb6:	39 88       	ldd	r3, Y+17	; 0x11
    5fb8:	48 88       	ldd	r4, Y+16	; 0x10
    5fba:	5f 84       	ldd	r5, Y+15	; 0x0f
    5fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    5fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    5fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    5fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    5fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    5fc6:	b9 84       	ldd	r11, Y+9	; 0x09
    5fc8:	c8 84       	ldd	r12, Y+8	; 0x08
    5fca:	df 80       	ldd	r13, Y+7	; 0x07
    5fcc:	ee 80       	ldd	r14, Y+6	; 0x06
    5fce:	fd 80       	ldd	r15, Y+5	; 0x05
    5fd0:	0c 81       	ldd	r16, Y+4	; 0x04
    5fd2:	1b 81       	ldd	r17, Y+3	; 0x03
    5fd4:	aa 81       	ldd	r26, Y+2	; 0x02
    5fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    5fd8:	ce 0f       	add	r28, r30
    5fda:	d1 1d       	adc	r29, r1
    5fdc:	0f b6       	in	r0, 0x3f	; 63
    5fde:	f8 94       	cli
    5fe0:	de bf       	out	0x3e, r29	; 62
    5fe2:	0f be       	out	0x3f, r0	; 63
    5fe4:	cd bf       	out	0x3d, r28	; 61
    5fe6:	ed 01       	movw	r28, r26
    5fe8:	08 95       	ret

00005fea <strcmp>:
    5fea:	fb 01       	movw	r30, r22
    5fec:	dc 01       	movw	r26, r24
    5fee:	8d 91       	ld	r24, X+
    5ff0:	01 90       	ld	r0, Z+
    5ff2:	80 19       	sub	r24, r0
    5ff4:	01 10       	cpse	r0, r1
    5ff6:	d9 f3       	breq	.-10     	; 0x5fee <strcmp+0x4>
    5ff8:	99 0b       	sbc	r25, r25
    5ffa:	08 95       	ret

00005ffc <_exit>:
    5ffc:	f8 94       	cli

00005ffe <__stop_program>:
    5ffe:	ff cf       	rjmp	.-2      	; 0x5ffe <__stop_program>
